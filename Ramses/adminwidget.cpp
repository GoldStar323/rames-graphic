#include "adminwidget.h"

AdminWidget::AdminWidget(DBInterface *db, QWidget *parent) :
    QWidget(parent)
{
    setupUi(this);

    dbi = db;

    error = new QErrorMessage();
}

// GENERAL

void AdminWidget::on_adminTab_currentChanged(int index)
{
    statusesAdminReset();
    stagesAdminReset();
    projectsAdminReset();
    shotsAdminReset();
}

void AdminWidget::init(QList<RAMStatus *> status, QList<RAMStage *> stages, QList<RAMProject *> projects, QList<RAMShot *> shots, RAMProject *current)
{
    //reset UI
    statusAdminList->clear();
    stagesAdminList->clear();
    projectAdminList->clear();
    shotsAdminList->clear();

    //load status
    statusList = status;
    foreach(RAMStatus *s,statusList)
    {
        newStatus(s);
    }

    //load stage
    stagesList = stages;
    foreach(RAMStage *s,stagesList)
    {
        newStage(s);
    }

    //load project
    projectsList = projects;
    foreach(RAMProject *p,projectsList)
    {
        newProject(p);
    }
    currentProject = current;

    //load shot
    shotsList = shots;
    for(int i = 0; i < shots.count(); i++)
    {
        RAMShot *s = shots[i];
        newShot(s,i);
    }

    adminTab->setCurrentIndex(0);
}

void AdminWidget::setCurrentProject(RAMProject *project)
{
    currentProject = project;
}

// STATUS

void AdminWidget::newStatus(RAMStatus *rs)
{
    // Create UI item
    QListWidgetItem *item = new QListWidgetItem(rs->getShortName() + " | " + rs->getName());
    item->setBackgroundColor(rs->getColor());
    item->setToolTip(rs->getDescription());
    item->setData(Qt::UserRole,rs->getId());
    statusAdminList->addItem(item);
}

RAMStatus* AdminWidget::getStatus(int id)
{
    foreach(RAMStatus *rs,statusList)
    {
        if (rs->getId() == id) return rs;
    }
    return 0;
}

void AdminWidget::on_addStatusButton_clicked()
{
    // Create a new Default Status
    QString name = "New Status";
    QString shortName = "New";
    QColor color = QColor("#6d6d6d");
    QString description = "";

    // find higher id
    // TODO this is temporary, get the id generated by the local db
    int id = 1;
    foreach(RAMStatus *rs,statusList)
    {
        if (rs->getId() >= id) id = rs->getId()+1;
    }

    // create status
    RAMStatus *rs = new RAMStatus(dbi,id,name,shortName,color,description,true);

    // Add the status to the list
    statusList << rs;

    // Create UI item
    newStatus(rs);

    // send it to the mainwindow
    emit statusCreated(rs);

    // Select item
    statusAdminList->setCurrentRow(statusAdminList->count()-1);
    on_statusAdminList_itemClicked(statusAdminList->item(statusAdminList->count()-1));
}

void AdminWidget::on_statusAdminList_itemClicked(QListWidgetItem *i)
{
    RAMStatus *s = getStatus(i->data(Qt::UserRole).toInt());

    statusNameEdit->setText(s->getName());
    statusShortNameEdit->setText(s->getShortName());
    if (s->getShortName() == "STB" || s->getShortName() == "OK" || s->getShortName() == "TODO")
    {
        statusShortNameEdit->setEnabled(false);
    }
    else
    {
        statusShortNameEdit->setEnabled(true);
    }
    statusColorEdit->setText(s->getColor().name().right(6));
    statusDescriptionEdit->setPlainText(s->getDescription());

    statusConfigWidget->setEnabled(true);
}

void AdminWidget::on_statusColorButton_clicked()
{
    this->setEnabled(false);
    QColorDialog cd(QColor("#" + statusColorEdit->text()));
    cd.setOptions(QColorDialog::DontUseNativeDialog);
    cd.setWindowFlags(Qt::FramelessWindowHint);
    cd.move(this->geometry().center().x()-cd.geometry().width()/2,this->geometry().center().y()-cd.geometry().height()/2);
    if (cd.exec())
    {
        QColor color = cd.selectedColor();
        QString colorHex = color.name();
        statusColorEdit->setText(colorHex.right(6));
    }
    this->setEnabled(true);
}

void AdminWidget::on_statusApplyButton_clicked()
{
    int currentRow = statusAdminList->currentRow();
    if (currentRow < 0) return;

    QString name = statusNameEdit->text();
    QString shortName = statusShortNameEdit->text();
    QString description = statusDescriptionEdit->toPlainText();
    QColor color("#" + statusColorEdit->text());

    RAMStatus *rs = getStatus(statusAdminList->currentItem()->data(Qt::UserRole).toInt());
    rs->setColor(color);
    rs->setName(name);
    rs->setShortName(shortName);
    rs->setDescription(description);
    rs->update();

    //update UI
    QListWidgetItem *item = statusAdminList->currentItem();
    item->setText(shortName + " | " + name);
    item->setBackgroundColor(color);
    item->setToolTip(description);
}

void AdminWidget::on_removeStatusButton_clicked()
{
    int currentRow = statusAdminList->currentRow();
    if (currentRow < 0) return;

    RAMStatus *rs = getStatus(statusAdminList->currentItem()->data(Qt::UserRole).toInt());

    QString sN = rs->getShortName();
    if (sN == "OK" || sN == "STB" || sN == "TODO")
    {
        error->showMessage("Cannot remove OK, STB and TODO statuses.");
        return;
    }

    statusList.removeAll(rs);
    rs->remove();
    QListWidgetItem *item = statusAdminList->takeItem(currentRow);
    delete item;

    statusesAdminReset();
}

void AdminWidget::statusesAdminReset()
{
    statusAdminList->setCurrentRow(-1);
    statusNameEdit->setText("");
    statusShortNameEdit->setText("");
    statusColorEdit->setText("");
    statusDescriptionEdit->setPlainText("");
    statusConfigWidget->setEnabled(false);
}

// STAGE

void AdminWidget::newStage(RAMStage *rs)
{
    // Create UI item
    QListWidgetItem *item = new QListWidgetItem(rs->getShortName() + " | " + rs->getName());
    item->setData(Qt::UserRole,rs->getId());
    stagesAdminList->addItem(item);
}

RAMStage* AdminWidget::getStage(int id)
{
    foreach(RAMStage *rs,stagesList)
    {
        if (rs->getId() == id) return rs;
    }
    return 0;
}

void AdminWidget::on_addStageButton_clicked()
{
    // Create a new default stage
    QString name = "New Stage";
    QString shortName = "New";

    // find higher id
    int id = 1;
    foreach(RAMStage *rs,stagesList)
    {
        if (rs->getId() >= id) id = rs->getId()+1;
    }

    RAMStage *rs = new RAMStage(dbi,name,shortName,id,true);
    newStage(rs);
    stagesList << rs;

    // send it to the mainwindow
    emit stageCreated(rs);

    //select item
    stagesAdminList->setCurrentRow(stagesAdminList->count()-1);
    on_stagesAdminList_itemClicked(stagesAdminList->item(stagesAdminList->count()-1));
}

void AdminWidget::on_stagesAdminList_itemClicked(QListWidgetItem *item)
{
     RAMStage *s = getStage(item->data(Qt::UserRole).toInt());

     stageNameEdit->setText(s->getName());
     stageShortNameEdit->setText(s->getShortName());
     stageConfigWidget->setEnabled(true);
}

void AdminWidget::on_stageApplyButton_clicked()
{
    int currentRow = stagesAdminList->currentRow();
    if (currentRow < 0) return;

    RAMStage *s = getStage(stagesAdminList->currentItem()->data(Qt::UserRole).toInt());

    QString name = stageNameEdit->text();
    QString shortName = stageShortNameEdit->text();

    s->setName(name);
    s->setShortName(shortName);
    s->update();

    //update UI
    QListWidgetItem *item = stagesAdminList->item(currentRow);
    item->setText(shortName + " | " + name);
}

void AdminWidget::on_removeStageButton_clicked()
{
    int currentRow = stagesAdminList->currentRow();
    if (currentRow < 0) return;

    RAMStage *rs = getStage(stagesAdminList->currentItem()->data(Qt::UserRole).toInt());

    stagesList.removeAll(rs);
    rs->remove();
    QListWidgetItem *item = stagesAdminList->takeItem(currentRow);
    delete item;

    stagesAdminReset();
}

void AdminWidget::stagesAdminReset()
{
    stagesAdminList->setCurrentRow(-1);
    stageNameEdit->setText("");
    stageShortNameEdit->setText("");
    stageConfigWidget->setEnabled(false);
}

// PROJECT

void AdminWidget::newProject(RAMProject *rp)
{
    // Create UI item
    QListWidgetItem *item = new QListWidgetItem(rp->getShortName() + " | " + rp->getName());
    item->setData(Qt::UserRole,rp->getId());
    projectAdminList->addItem(item);
}

RAMProject *AdminWidget::getProject(int id)
{
    foreach(RAMProject *rp,projectsList)
    {
        if (rp->getId() == id) return rp;
    }
}

void AdminWidget::on_addProjectButton_clicked()
{
    // Create a new default project
    QString name = "New Project";
    QString shortName = "New";

    // Find the biggest id
    int id = 1;
    foreach(RAMProject *rp,projectsList)
    {
        if (rp->getId() >= id) id = rp->getId()+1;
    }

    RAMProject *rp = new RAMProject(dbi,id,name,shortName,true);
    newProject(rp);
    projectsList << rp;

    // send it to the mainwindow
    emit projectCreated(rp);

    //select item
    projectAdminList->setCurrentRow(projectAdminList->count()-1);
    on_projectAdminList_itemClicked(projectAdminList->item(projectAdminList->count()-1));
}

void AdminWidget::on_projectAdminList_itemClicked(QListWidgetItem *item)
{
     int currentRow = projectAdminList->currentRow();
     if (currentRow < 0) return;

     RAMProject *p = getProject(item->data(Qt::UserRole).toInt());

     projectNameEdit->setText(p->getName());
     projectShortNameEdit->setText(p->getShortName());

     //populate stages combo box and list
     projectStagesList->clear();
     projectStagesComboBox->clear();
     QList<RAMStage*> pStages = p->getStages();

     foreach(RAMStage*s,stagesList)
     {
         //check if it is used
         bool usedByProject = false;
         foreach(RAMStage *ps,pStages)
         {
             if (ps == s)
             {
                 //add to list
                 QListWidgetItem *i = new QListWidgetItem(s->getShortName());
                 i->setToolTip(s->getName());
                 i->setData(Qt::UserRole,s->getId());
                 projectStagesList->addItem(i);
                 usedByProject = true;
                 break;
             }
         }
         //add to combo box
         if (!usedByProject)
         {
            projectStagesComboBox->addItem(s->getShortName(),s->getId());
         }
     }

     projectConfigWidget->setEnabled(true);
}

void AdminWidget::on_projectApplyButton_clicked()
{
    int currentRow = projectAdminList->currentRow();
    if (currentRow < 0) return;

    RAMProject *rp = getProject(projectAdminList->currentItem()->data(Qt::UserRole).toInt());

    QString name = projectNameEdit->text();
    QString shortName = projectShortNameEdit->text();

    rp->setName(name);
    rp->setShortName(shortName);
    rp->update();

    //update UI
    QListWidgetItem *item = projectAdminList->item(currentRow);
    item->setText(shortName + " | " + name);
}

void AdminWidget::on_removeProjectButton_clicked()
{
    int currentRow = projectAdminList->currentRow();
    if (currentRow < 0) return;

    RAMProject *rp = getProject(projectAdminList->currentItem()->data(Qt::UserRole).toInt());

    projectsList.removeAll(rp);
    rp->remove();
    QListWidgetItem *item = projectAdminList->takeItem(currentRow);
    delete item;

    projectsAdminReset();
}

void AdminWidget::on_projectAddStageButton_clicked()
{
    int sId = projectStagesComboBox->currentData().toInt();
    int pId = projectAdminList->currentItem()->data(Qt::UserRole).toInt();
    RAMProject *rp = getProject(pId);
    RAMStage *rs = getStage(sId);
    rp->addStage(rs,true);

    //update UI
    //remove from combobox
    projectStagesComboBox->removeItem(projectStagesComboBox->currentIndex());
    //add to list
    QListWidgetItem *i = new QListWidgetItem(rs->getShortName());
    i->setToolTip(rs->getName());
    i->setData(Qt::UserRole,rs->getId());
    projectStagesList->addItem(i);
}

void AdminWidget::on_removeStageProjectButton_clicked()
{
    if (projectStagesList->currentRow() < 0) return;

    RAMStage *rs = getStage(projectStagesList->currentIndex().data(Qt::UserRole).toInt());
    RAMProject *rp = getProject(projectAdminList->currentItem()->data(Qt::UserRole).toInt());

    rp->removeStage(rs,true);

    //update UI
    //remove from list
    QListWidgetItem *item = projectStagesList->takeItem(projectStagesList->currentRow());
    delete item;
    //add to combobox
    projectStagesComboBox->addItem(rs->getShortName(),rs->getId());
}

void AdminWidget::projectsAdminReset()
{
    projectAdminList->setCurrentRow(-1);
    projectNameEdit->setText("");
    projectShortNameEdit->setText("");
    projectConfigWidget->setEnabled(false);
    projectStagesList->clear();
    //reload stages into combo box
    projectStagesComboBox->clear();
    projectStagesList->clear();
}

// SHOT

void AdminWidget::newShot(RAMShot *rs, int row)
{
    //update list
    QListWidgetItem *item = new QListWidgetItem(rs->getName());
    item->setData(Qt::UserRole,rs->getId());
    shotsAdminList->insertItem(row,item);
}

void AdminWidget::resetShotsOrder()
{
    QList<int> ids;
    foreach(RAMShot *rs,shotsList)
    {
        ids << rs->getId();
    }
    dbi->resetShotsOrder(ids);
}

RAMShot *AdminWidget::getShot(int id)
{
    foreach(RAMShot *rs,shotsList)
    {
        if (rs->getId() == id) return rs;
    }
    return 0;
}

void AdminWidget::on_addShotButton_clicked()
{
    //only if new
    bool ok = true;
    int row = 0;
    foreach(RAMShot *rs,shotsList)
    {
        if (rs->getName() == "000")
        {
            ok = false;
            row = shotsList.indexOf(rs);
        }
    }

    if (ok)
    {
        if (shotsAdminList->currentItem())
        {
            row = shotsAdminList->currentRow() + 1;
        }
        else if (shotsAdminList->count() > 0)
        {
            row = shotsAdminList->count();
        }

        //getProject
        int projectId = currentProject->getId();


        //get higher id, prefix with project id
        int id = 1;
        foreach(RAMShot *rs,shotsList)
        {
            if (rs->getId() >= id) id = rs->getId()+1;
        }
        QString idString = QString::number(projectId) + QString::number(id);
        id = idString.toInt();

        RAMShot *rs = new RAMShot(dbi,projectId,id,"000",0.0,true);

        //update UI
        newShot(rs,row);
        shotsList.insert(row,rs);

        // send it to the mainwindow
        emit shotCreated(rs,row);
    }

    //select shot
    shotsAdminList->clearSelection();
    shotsAdminList->setCurrentRow(row);
    on_shotsAdminList_itemClicked(shotsAdminList->item(row));

    resetShotsOrder();
}

void AdminWidget::on_batchAddShotButton_clicked()
{
    /*this->setEnabled(false);
    AddShotsDialog as;
    as.move(this->geometry().center().x()-as.geometry().width()/2,this->geometry().center().y()-as.geometry().height()/2);
    if (as.exec())
    {
        QStringList shotNames = as.getShots();
        setWaiting();
        //get order (if a row is selected, or else insert after the last row)
        int order = 0;
        if (shotsAdminList->currentItem())
        {
            order = shotsList[shotsAdminList->currentRow()]->getShotOrder()+1;
        }
        else if (shotsAdminList->count() > 0)
        {
            order = shotsList[shotsAdminList->count()-1]->getShotOrder()+1;
        }
        shotsAdminReset();
        //getProject
        int projectId = projectSelector->currentData().toInt();
        //get status
        int statusId = 0;
        foreach(RAMStatus *s,statusesList)
        {
            if (s->getShortName() == "STB")
            {
                statusId = s->getId();
                break;
            }
        }
        dbi->addShots(projectId,statusId,shotNames,order);
    }
    this->setEnabled(true);*/
}

void AdminWidget::on_importShotsButton_clicked()
{
    /*this->setEnabled(false);
    QString file = QFileDialog::getOpenFileName(this,"Please choose the editing file you want to import.","","All supported edits (*.edl *.xml);;EDL (*.edl);;Final Cut / XML (*.xml);;All Files (*.*)");
    if (file == "")
    {
        this->setEnabled(true);
        return;
    }

    if (file.toLower().endsWith(".edl")) importEDL(file);
    else if (file.toLower().endsWith(".xml")) importXML(file);
    else
    {
        //TODO open file to try to find what it is
    }
    this->setEnabled(true);*/
}

void AdminWidget::on_shotsAdminList_itemClicked(QListWidgetItem *item)
{
    RAMShot *rs = getShot(item->data(Qt::UserRole).toInt());

    shotNameEdit->setText(rs->getName());
    shotDurationSpinBox->setValue(rs->getDuration());
    shotConfigWidget->setEnabled(true);
}

void AdminWidget::on_shotApplyButton_clicked()
{
    int currentRow = shotsAdminList->currentRow();
    if (currentRow < 0) return;

    RAMShot *rs = getShot(shotsAdminList->currentItem()->data(Qt::UserRole).toInt());

    QString name = shotNameEdit->text();
    double duration = shotDurationSpinBox->value();

    rs->setName(name);
    rs->setDuration(duration);
    rs->update();

    //update UI
    QListWidgetItem *item = shotsAdminList->item(currentRow);
    item->setText(name);
}

void AdminWidget::on_removeShotButton_clicked()
{
    QList<int> ids;
    foreach(QListWidgetItem *item,shotsAdminList->selectedItems())
    {
        int id = item->data(Qt::UserRole).toInt();
        ids << id;
        RAMShot *rs = getShot(id);
        rs->remove(false);
        shotsList.removeAll(rs);
        delete item;
    }

    dbi->removeShots(ids);
    resetShotsOrder();

    shotsAdminReset();
}

void AdminWidget::on_moveShotUpButton_clicked()
{
    QList<QListWidgetItem *> items;

    //sort selection
    QList<int> rows;
    foreach(QListWidgetItem *item,shotsAdminList->selectedItems())
    {
        rows << shotsAdminList->row(item);
    }
    std::sort(rows.begin(),rows.end());

    foreach(int row,rows)
    {
        items << shotsAdminList->item(row);
    }

    foreach(QListWidgetItem *item,items)
    {
        int id = item->data(Qt::UserRole).toInt();

        RAMShot *rs = getShot(id);
        int index = shotsList.indexOf(rs)-1;

        shotsList.removeAll(rs);
        shotsList.insert(index,rs);

        shotsAdminList->takeItem(index+1);
        shotsAdminList->insertItem(index,item);
    }

    //reselect items
    foreach(QListWidgetItem *item,items)
    {
        item->setSelected(true);
    }

    //update db
    resetShotsOrder();
}

void AdminWidget::on_moveShotDownButton_clicked()
{
    QList<QListWidgetItem *> items;

    //sort selection
    QList<int> rows;
    foreach(QListWidgetItem *item,shotsAdminList->selectedItems())
    {
        rows << shotsAdminList->row(item);
    }
    std::sort(rows.begin(),rows.end());

    for(int i = rows.count() -1 ; i >= 0 ; i--)
    {
        items << shotsAdminList->item(rows[i]);
    }

    foreach(QListWidgetItem *item,items)
    {
        int id = item->data(Qt::UserRole).toInt();

        RAMShot *rs = getShot(id);
        int index = shotsList.indexOf(rs)+1;

        shotsList.removeAll(rs);
        shotsList.insert(index,rs);

        shotsAdminList->takeItem(index-1);
        shotsAdminList->insertItem(index,item);
    }

    //reselect items
    foreach(QListWidgetItem *item,items)
    {
        item->setSelected(true);
    }

    //update db
    resetShotsOrder();
}

void AdminWidget::shotsAdminReset()
{
    shotsAdminList->setCurrentRow(-1);
    shotNameEdit->setText("");
    shotDurationSpinBox->setValue(0.0);
    shotConfigWidget->setEnabled(false);
}
