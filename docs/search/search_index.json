{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ramses - The Rainbox Asset Management System Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . What\u2019s this? Ramses , the Rx Asset Management System, is a complete framework to help you, your team, your studio, track the production of your films. It is meant to be used both by freelancers, small or big teams. Let\u2019s have a look at a few key features. \u25b9 Read the changelog to know exactly what\u2019s already available and what\u2019s planned (along with known issues) \u25b9 Free and open source Ramses is licensed under the GNU General Public License v3, which means you\u2019re free to do anything you\u2019d like with it, use it the way you want, modify it, and share your modifications. \u25b9 Modular and scalable Ramses is made of several components which can be used either individually or as a whole framework . If you just need an add-on to your creative software to improve your workflow and versionning, you could use only one of the Ramses Add-ons . If you\u2019re interested in production tracking, you\u2019ll need the Ramses Client Application and maybe connect it to the Ramses Server to stay connected with your team. Of course, each of these components can work together and share information for a seamless integration into your workflow . This scalability makes Ramses a good choice for individuals as well as teams of all sizes. \u25b8 Read more \u25b9 Production Planning Ramses helps you easily plan your production , and estimate how long you\u2019ll need to produce your project. For each shot and asset of the project, you\u2019ll be able to (automatically) estimate how long it will take to produce, and Ramses will keep track of all estimations for you so you can plan accordingly. \u25b8 Read more \u25b9 Production Tracking At any time, Ramses can tell you where you are in the production, how late (or not) you are, and warn you if something\u2019s going wrong. You can always keep a close (or overall) look at the production , and check which assets and shots are longer or shorter to produce, and the state in which they are at any time. \u25b8 Read more \u25b9 Pipeline automation In combination with the Ramses Add-ons which integrate Ramses in your favorite creative software, Ramses is able to automate your pipeline , managing the versionning of the files, the exports, imports and all these manual tasks a robot could do for you. An example: the Autodesk Maya shelf of the Ramses Maya Add-on. With a nice and modern nodal view, it\u2019s easy to design your pipeline, connecting each step and setting how the data should go from one step to the other. All this information will be used both by the Ramses production tracking algorithms and the Add-ons to help you focus on your real work: creation . \u25b8 Read more \u25b9 (Very) Easy-to-use A tool like Ramses is here to help, not to give you a headache. All user interface components have been carefully crafted to be beautiful, but most of all to be intuitive and practical . Everything has to be clear, precise, and meaningful. Of course, there\u2019s this comprehensive documentation if you have any doubt\u2026 \u25b9 And also\u2026 Why would one want to track one\u2019s production from a web browser? Ramses comes with its own native application for Linux , Mac OS and Windows . It\u2019s designed to by very light and unintrusive, fast and responsive. It ususally takes about ten times less memory than a usual web-browser with a single tab opened. Ramses is extensible . Although it already comes with some add-ons for your creative software, if you have specific needs, you can use the provided Python and Adobe ExtendScript API , to implement your own add-ons which fully integrate with both Ramses and your creative applications. The Daemon and the Server API are also fully documented. And, after all, Ramses is open source! Ramses can manage all your files : the idea is that you won\u2019t ever need to search for any file through the system\u2019s explorer. \u25b9 The future Ramses is (far from) not finished . And probably never will: it is going to evolve, and there are a lot of other planned features and improvements on their way! \u25b9 Read the changelog for more details about what\u2019s going on, and known issues Here are some of the features which are not available yet but which will be available in the future. Full SSL encryption when connecting to the server. SSL may already be available on Linux and will be available on Windows and Mac OS shortly. If Ramses \u2018 beta versions can already be tested without it, it is a mandatory feature for the release versions, as the security of your data is non-negociable. The Dashboard will be an area where each user accesses all its important data and schedule. It comes with notifications so you won\u2019t miss any change concerning your assets, shots and steps. The Offline mode for the Ramses Client Application will make it easier to use for one-man bands; you will be able to use Ramses without having to install the server. This also means you\u2019ll still be able to use Ramses even if you\u2019re not connected to the network, when you\u2019re in a train or on top of a mountain. Project Planning : a simple but indispensable tool to easily plan the production of the project, at the very beginning of the production. With this planning tool you will be able to set the important dates of the production, the deadlines for each step, all in an easy-to-use and visual panel. Status automation : when a character is rigged, it means it\u2019s ready to be animated. Status automation will automatically update the states of all the items according to the pipeline design, and your custom rules. Data export and import : if you\u2019re planning important software update, or for your backups at the end of a production, it may be useful to export and re-import your data. File tools will provide automatic ways to manage your files, create new assets and shots from already existing files, clean the tree, backup, remove temporary data, batch rename files and folders\u2026 Editing tools to manage your shots from your edits. Automatically set shot duration, order and other metadata by just importing your edit. A lot of UI improvements and tweaks are planned too, and work will be done to improve the performance of the Ramses Client Application even further. Syncthing integration will provide a free, open, and secure way to synchronize all files and data of your production accross multiple workstations, servers, NAS, etc. There\u2019s also a lot of ongoing work to extend the supported creative applications through Ramses Add-ons. This table shows what\u2019s planned, what\u2019s already available, what will be available soon. Application Scripting Language Status Comment API Python A Beta version is already available. API ExtendScript For Adobe Creative Cloud API UXP For Adobe Creative Cloud UXP is a new scripting environment for Adobe Software. Ramses won\u2019t officially support it until it is mature enough, which is not the case as of July 2020. This being said, the ExtendScript API may be compatible with UXP . Adobe After Effects ExtendScript Adobe Illustrator ExtendScript Low-priority Adobe Photoshop ExtendScript Autodesk Maya Python A Beta version is already available. Autodesk Maya Rubika Flavor Python A Beta version is already available. Blender Python Inkscape Python Low-priority Krita Python The Foundry Nuke Python Legend: Available | In development | Planned | Not supported Table of Contents Introduction (this page) The Pipeline & Production Management Introduction Administration Pipeline Production tracking Planning Ramses Components Introduction The Ramses server Introduction Installation Administration The Ramses application (client) Introduction Installation and settings Administration Project settings The pipeline Assets and shots production tracking Schedule and statistics Ramses Add-ons General information Autodesk Maya Autodesk Maya Add-on Extensibility The Rubika Flavor The Ramses Tree Introduction Naming scheme Folder Structure Extending Ramses, Development Introduction Files and folders The Scripting API (Add-ons) The Ramses Daemon API The Ramses Server API Miscellaneous Credits Changelog Licenses Software: GNU GPLv3 Documentation: GNU FDL Medias: CC BY-NC-SA 4.0 License Software The software this documentation is referring to is licensed under the GNU General Public License . Copyright (C) 2020 Nicolas Dufresne and Contributors. This program is free software; you can redistribute them and/or modify them under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program . If not, see http://www.gnu.org/licenses/ . Icons and other graphical elements All graphical elements, especially icons, are from RxUI by Nicolas Dufresne and RxLaboratory are licensed under CC BY-NC-SA 4.0 . Copyright (C) 2021 Nicolas Dufresne and Contributors. This Documentation Copyright (C) 2020 Nicolas Dufresne and Contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \u201c Documentation License \u201d.","title":"v0.1.1-Alpha"},{"location":"#ramses-the-rainbox-asset-management-system","text":"Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues .","title":"Ramses - The Rainbox Asset Management System"},{"location":"#whats-this","text":"Ramses , the Rx Asset Management System, is a complete framework to help you, your team, your studio, track the production of your films. It is meant to be used both by freelancers, small or big teams. Let\u2019s have a look at a few key features. \u25b9 Read the changelog to know exactly what\u2019s already available and what\u2019s planned (along with known issues)","title":"What's this?"},{"location":"#free-and-open-source","text":"Ramses is licensed under the GNU General Public License v3, which means you\u2019re free to do anything you\u2019d like with it, use it the way you want, modify it, and share your modifications.","title":"\u25b9 Free and open source"},{"location":"#modular-and-scalable","text":"Ramses is made of several components which can be used either individually or as a whole framework . If you just need an add-on to your creative software to improve your workflow and versionning, you could use only one of the Ramses Add-ons . If you\u2019re interested in production tracking, you\u2019ll need the Ramses Client Application and maybe connect it to the Ramses Server to stay connected with your team. Of course, each of these components can work together and share information for a seamless integration into your workflow . This scalability makes Ramses a good choice for individuals as well as teams of all sizes. \u25b8 Read more","title":"\u25b9 Modular and scalable"},{"location":"#production-planning","text":"Ramses helps you easily plan your production , and estimate how long you\u2019ll need to produce your project. For each shot and asset of the project, you\u2019ll be able to (automatically) estimate how long it will take to produce, and Ramses will keep track of all estimations for you so you can plan accordingly. \u25b8 Read more","title":"\u25b9 Production Planning"},{"location":"#production-tracking","text":"At any time, Ramses can tell you where you are in the production, how late (or not) you are, and warn you if something\u2019s going wrong. You can always keep a close (or overall) look at the production , and check which assets and shots are longer or shorter to produce, and the state in which they are at any time. \u25b8 Read more","title":"\u25b9 Production Tracking"},{"location":"#pipeline-automation","text":"In combination with the Ramses Add-ons which integrate Ramses in your favorite creative software, Ramses is able to automate your pipeline , managing the versionning of the files, the exports, imports and all these manual tasks a robot could do for you. An example: the Autodesk Maya shelf of the Ramses Maya Add-on. With a nice and modern nodal view, it\u2019s easy to design your pipeline, connecting each step and setting how the data should go from one step to the other. All this information will be used both by the Ramses production tracking algorithms and the Add-ons to help you focus on your real work: creation . \u25b8 Read more","title":"\u25b9 Pipeline automation"},{"location":"#very-easy-to-use","text":"A tool like Ramses is here to help, not to give you a headache. All user interface components have been carefully crafted to be beautiful, but most of all to be intuitive and practical . Everything has to be clear, precise, and meaningful. Of course, there\u2019s this comprehensive documentation if you have any doubt\u2026","title":"\u25b9 (Very) Easy-to-use"},{"location":"#and-also","text":"Why would one want to track one\u2019s production from a web browser? Ramses comes with its own native application for Linux , Mac OS and Windows . It\u2019s designed to by very light and unintrusive, fast and responsive. It ususally takes about ten times less memory than a usual web-browser with a single tab opened. Ramses is extensible . Although it already comes with some add-ons for your creative software, if you have specific needs, you can use the provided Python and Adobe ExtendScript API , to implement your own add-ons which fully integrate with both Ramses and your creative applications. The Daemon and the Server API are also fully documented. And, after all, Ramses is open source! Ramses can manage all your files : the idea is that you won\u2019t ever need to search for any file through the system\u2019s explorer.","title":"\u25b9 And also..."},{"location":"#the-future","text":"Ramses is (far from) not finished . And probably never will: it is going to evolve, and there are a lot of other planned features and improvements on their way! \u25b9 Read the changelog for more details about what\u2019s going on, and known issues Here are some of the features which are not available yet but which will be available in the future. Full SSL encryption when connecting to the server. SSL may already be available on Linux and will be available on Windows and Mac OS shortly. If Ramses \u2018 beta versions can already be tested without it, it is a mandatory feature for the release versions, as the security of your data is non-negociable. The Dashboard will be an area where each user accesses all its important data and schedule. It comes with notifications so you won\u2019t miss any change concerning your assets, shots and steps. The Offline mode for the Ramses Client Application will make it easier to use for one-man bands; you will be able to use Ramses without having to install the server. This also means you\u2019ll still be able to use Ramses even if you\u2019re not connected to the network, when you\u2019re in a train or on top of a mountain. Project Planning : a simple but indispensable tool to easily plan the production of the project, at the very beginning of the production. With this planning tool you will be able to set the important dates of the production, the deadlines for each step, all in an easy-to-use and visual panel. Status automation : when a character is rigged, it means it\u2019s ready to be animated. Status automation will automatically update the states of all the items according to the pipeline design, and your custom rules. Data export and import : if you\u2019re planning important software update, or for your backups at the end of a production, it may be useful to export and re-import your data. File tools will provide automatic ways to manage your files, create new assets and shots from already existing files, clean the tree, backup, remove temporary data, batch rename files and folders\u2026 Editing tools to manage your shots from your edits. Automatically set shot duration, order and other metadata by just importing your edit. A lot of UI improvements and tweaks are planned too, and work will be done to improve the performance of the Ramses Client Application even further. Syncthing integration will provide a free, open, and secure way to synchronize all files and data of your production accross multiple workstations, servers, NAS, etc. There\u2019s also a lot of ongoing work to extend the supported creative applications through Ramses Add-ons. This table shows what\u2019s planned, what\u2019s already available, what will be available soon. Application Scripting Language Status Comment API Python A Beta version is already available. API ExtendScript For Adobe Creative Cloud API UXP For Adobe Creative Cloud UXP is a new scripting environment for Adobe Software. Ramses won\u2019t officially support it until it is mature enough, which is not the case as of July 2020. This being said, the ExtendScript API may be compatible with UXP . Adobe After Effects ExtendScript Adobe Illustrator ExtendScript Low-priority Adobe Photoshop ExtendScript Autodesk Maya Python A Beta version is already available. Autodesk Maya Rubika Flavor Python A Beta version is already available. Blender Python Inkscape Python Low-priority Krita Python The Foundry Nuke Python Legend: Available | In development | Planned | Not supported","title":"\u25b9 The future"},{"location":"#table-of-contents","text":"Introduction (this page) The Pipeline & Production Management Introduction Administration Pipeline Production tracking Planning Ramses Components Introduction The Ramses server Introduction Installation Administration The Ramses application (client) Introduction Installation and settings Administration Project settings The pipeline Assets and shots production tracking Schedule and statistics Ramses Add-ons General information Autodesk Maya Autodesk Maya Add-on Extensibility The Rubika Flavor The Ramses Tree Introduction Naming scheme Folder Structure Extending Ramses, Development Introduction Files and folders The Scripting API (Add-ons) The Ramses Daemon API The Ramses Server API Miscellaneous Credits Changelog Licenses Software: GNU GPLv3 Documentation: GNU FDL Medias: CC BY-NC-SA 4.0","title":"Table of Contents"},{"location":"#license","text":"","title":"License"},{"location":"#software","text":"The software this documentation is referring to is licensed under the GNU General Public License . Copyright (C) 2020 Nicolas Dufresne and Contributors. This program is free software; you can redistribute them and/or modify them under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program . If not, see http://www.gnu.org/licenses/ .","title":"Software"},{"location":"#icons-and-other-graphical-elements","text":"All graphical elements, especially icons, are from RxUI by Nicolas Dufresne and RxLaboratory are licensed under CC BY-NC-SA 4.0 . Copyright (C) 2021 Nicolas Dufresne and Contributors.","title":"Icons and other graphical elements"},{"location":"#this-documentation","text":"Copyright (C) 2020 Nicolas Dufresne and Contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \u201c Documentation License \u201d.","title":"This Documentation"},{"location":"changelog/","text":"Ramses Changelog We\u2019re listing here all changes for all versions of the whole Ramses framework. To make things simpler, all components always share the same version , all are updated if one is updated. All the components you\u2019re using should always be in the same version. For each version, there\u2019s also a list of known issues . To read more details about these issues, check our tracking on Github . Note Versions ending with -Alpha or -Beta are released for testing purposes only and should not be used in production, unless you know what you\u2019re doing. In versions labeled Alpha , the APIs may still vary a lot, especially for versions still in 0.x . Planned Features The detailed list of planned features and enhancements is available on Github . Full SSL encryption when connecting to the server. SSL may already be available on Linux and will be available on Windows and Mac OS shortly. If Ramses \u2018 beta versions can already be tested without it, it is a mandatory feature for the release versions, as the security of your data is non-negociable. The Dashboard will be an area where each user accesses all its important data and schedule. It comes with notifications so you won\u2019t miss any change concerning your assets, shots and steps. The Offline mode for the Ramses Client Application will make it easier to use for one-man bands; you will be able to use Ramses without having to install the server. This also means you\u2019ll still be able to use Ramses even if you\u2019re not connected to the network, when you\u2019re in a train or on top of a mountain. Project Planning : a simple but indispensable tool to easily plan the production of the project, at the very beginning of the production. With this planning tool you will be able to set the important dates of the production, the deadlines for each step, all in an easy-to-use and visual panel. Status automation : when a character is rigged, it means it\u2019s ready to be animated. Status automation will automatically update the states of all the items according to the pipeline design, and your custom rules. Data export and import : if you\u2019re planning important software update, or for your backups at the end of a production, it may be useful to export and re-import your data. File tools will provide automatic ways to manage your files, create new assets and shots from already existing files, clean the tree, backup, remove temporary data, batch rename files and folders\u2026 Video Editing tools to manage your shots from your edits. Automatically set shot duration, order and other metadata by just importing your edit from a Final Cut XML , EDL or CSV file. A lot of UI improvements and tweaks are planned too, and work will be done to improve the performance of the Ramses Client Application even further. Folder monitoring will provide a way to handle versionning and production tracking even if there\u2019s no Ramses Add-on available for the application being used. Syncthing integration will provide a free, open, and secure way to synchronize all files and data of your production accross multiple workstations, servers, NAS, etc. 0.1.1-Alpha Initial release. Known Issues Server #105 : Internal Server Error when moving steps/changing their order. #107 : Table prefixes can\u2019t be changed. Client and Daemon #137 : The SSL option should be disabled if openSSL is not available on the system. #105 : Internal Server Error when moving steps/changing their order. #106 : Errors in the Python API when special characters are sent by the Daemon . #110 : Ramses should use a versionning system for published files. #136 : Sanitation needed to check if names and IDs respect the Ramses naming conventions. #138 : The client should list only projects the user is assigned to. #11 : The client should check if it\u2019s connected to a server with the same version. #151 : The client should switch to offline mode when the server session token becomes invalid (server timeout). On Windows , the tray icon may not be removed if the client crashes. On Linux/Ubuntu 18.04 and Mac OS it is sometimes impossible to interact with the schedule table. Restart the application to fix the issue. Python API #106 : crash when special characters are sent by the Daemon . #110 : Ramses should use a versionning system for published files. Add-ons #109 : Maya . The version should be added in the comment when saving restored versions. #110 : Ramses should use a versionning system for published files. #118 : It seems the Preview function does not always work on Maya 2020 .","title":"Changelog"},{"location":"changelog/#ramses-changelog","text":"We\u2019re listing here all changes for all versions of the whole Ramses framework. To make things simpler, all components always share the same version , all are updated if one is updated. All the components you\u2019re using should always be in the same version. For each version, there\u2019s also a list of known issues . To read more details about these issues, check our tracking on Github . Note Versions ending with -Alpha or -Beta are released for testing purposes only and should not be used in production, unless you know what you\u2019re doing. In versions labeled Alpha , the APIs may still vary a lot, especially for versions still in 0.x .","title":"Ramses Changelog"},{"location":"changelog/#planned-features","text":"The detailed list of planned features and enhancements is available on Github . Full SSL encryption when connecting to the server. SSL may already be available on Linux and will be available on Windows and Mac OS shortly. If Ramses \u2018 beta versions can already be tested without it, it is a mandatory feature for the release versions, as the security of your data is non-negociable. The Dashboard will be an area where each user accesses all its important data and schedule. It comes with notifications so you won\u2019t miss any change concerning your assets, shots and steps. The Offline mode for the Ramses Client Application will make it easier to use for one-man bands; you will be able to use Ramses without having to install the server. This also means you\u2019ll still be able to use Ramses even if you\u2019re not connected to the network, when you\u2019re in a train or on top of a mountain. Project Planning : a simple but indispensable tool to easily plan the production of the project, at the very beginning of the production. With this planning tool you will be able to set the important dates of the production, the deadlines for each step, all in an easy-to-use and visual panel. Status automation : when a character is rigged, it means it\u2019s ready to be animated. Status automation will automatically update the states of all the items according to the pipeline design, and your custom rules. Data export and import : if you\u2019re planning important software update, or for your backups at the end of a production, it may be useful to export and re-import your data. File tools will provide automatic ways to manage your files, create new assets and shots from already existing files, clean the tree, backup, remove temporary data, batch rename files and folders\u2026 Video Editing tools to manage your shots from your edits. Automatically set shot duration, order and other metadata by just importing your edit from a Final Cut XML , EDL or CSV file. A lot of UI improvements and tweaks are planned too, and work will be done to improve the performance of the Ramses Client Application even further. Folder monitoring will provide a way to handle versionning and production tracking even if there\u2019s no Ramses Add-on available for the application being used. Syncthing integration will provide a free, open, and secure way to synchronize all files and data of your production accross multiple workstations, servers, NAS, etc.","title":"Planned Features"},{"location":"changelog/#011-alpha","text":"Initial release.","title":"0.1.1-Alpha"},{"location":"changelog/#known-issues","text":"","title":"Known Issues"},{"location":"changelog/#server","text":"#105 : Internal Server Error when moving steps/changing their order. #107 : Table prefixes can\u2019t be changed.","title":"Server"},{"location":"changelog/#client-and-daemon","text":"#137 : The SSL option should be disabled if openSSL is not available on the system. #105 : Internal Server Error when moving steps/changing their order. #106 : Errors in the Python API when special characters are sent by the Daemon . #110 : Ramses should use a versionning system for published files. #136 : Sanitation needed to check if names and IDs respect the Ramses naming conventions. #138 : The client should list only projects the user is assigned to. #11 : The client should check if it\u2019s connected to a server with the same version. #151 : The client should switch to offline mode when the server session token becomes invalid (server timeout). On Windows , the tray icon may not be removed if the client crashes. On Linux/Ubuntu 18.04 and Mac OS it is sometimes impossible to interact with the schedule table. Restart the application to fix the issue.","title":"Client and Daemon"},{"location":"changelog/#python-api","text":"#106 : crash when special characters are sent by the Daemon . #110 : Ramses should use a versionning system for published files.","title":"Python API"},{"location":"changelog/#add-ons","text":"#109 : Maya . The version should be added in the comment when saving restored versions. #110 : Ramses should use a versionning system for published files. #118 : It seems the Preview function does not always work on Maya 2020 .","title":"Add-ons"},{"location":"credits/","text":"Credits Development Lead developper Nicolas \u201cDuduf\u201d Dufresne Developpers and code contributors Lisa Lain\u00e9 (Python API) Jean-Philippe Luchez (Python API) Translations Third-party libraries and other code Qt licensed under the GNU GPLv3 OpenSSL licensed under the OpenSSL License and the SSLeay License Documentation Text Nicolas Dufresne Pictures and Media Files Funding Rainbox Productions All the 583 backers from the RxOT Crowdfunding Campaign and especially: Adam Aguirre, Adam Buritsch, Adam Knight, Adrien Boutin, Adrien du Repaire, aembury, aescripts + aeplugins , A\u00efda del Solar, Alejandro R. Gonzalez, Aleksander Saharovsky, Alex Beekman, Alexandre FAVRE, alietout, Amit Gicelter, Ana Arce, Ana Arce, Ana\u00efs Guigue, Andreas Tanner, andrewrakestraw, Anez Florez Corpus, Anne Frumin, ANTOINE BIEBER, Antoine Dueso, Antonis Petroulias, Antony Pastor, Archita Ghosh, Armelle Renac, Atelier Graphoui, audrey sysaykeo, Aur\u00e9lien Delamare, aur\u00e9lien malagoli, Autret Claude, Baptiste Cochard, Bartosz B\u0105k, basimabu, Bastien Bironneau, Bastien Delmare, Ben Fligans, Benjamin Cohen-Jonathan, Benjamin Trancart, benoit jodry, Bethany Vaughan, Breece Kelsey, Brent N Walker, Brian Kolm, Bruno Quintin, Busson Remy, Calinski julien, Cam Hayduk, Cameron Gough, Carlos Arandia, Caroline Maire, Cedric Layrac, C\u00e9dric Serres, C\u00e9lia Tocco, Celine Sanno, Ching Mok, Chlo\u00e9 Chatellier, chris kieffer, Christophe \u2018IKESU\u2019 Clarey, Claire Dejoie, cl\u00e9ment Laporte, Cl\u00e9ment Vernet, Coleen Lochabay, Colin Brain, Com\u2019of design, damien.bracciotti , Dan Hollacher, Daniel Budka, David Hoizey, David Polizelli Hoffmann, david.baril, Davide Bedocchi, Derek Lau, djstep1, Dmitry Abdeev, Ebube Onyema, Elen Le Tannou, Elisabeth Springer, Emiliano Martinez, Emilien Gillet, Eric Bardot, Eric Beaup\u00e8re, Eric Paoli Infanzon, Eriks Lapins, eva.lacuskova, eva.lacuskova, Fabien Nowak, Fanny Moulin, Fernando Ferreira da Costa Junior, Florent Bonneviale, Florent Guilbaud, Francis Banguet, Fran\u00e7ois QUILLARD, Fred Luzet, fuerst.pascal, George Bowler, Germain Cauvy, Giedrius Budrys, gil, Gilles Pfeiffer, Giz Beardon, greg.araya, GRELIER Florentine, Guave Studios GmbH Guave Motion, GU\u00c9RET Matthieu, Guido Mariano, Guilbert Sylvain, Guillaume Mariotti, Guillaume Marrou, Guillaume Polveche, Guillaume Rousseau, Gustavo Almenara, Gustavo Miaciro, Gwendal Le Naour, gyom h, H Robert Marquet \u201cBob\u201d, H\u00e5kon Lundvall, Harlem Harl, Herv\u00e9 Dumont, Hiromi Ishibashi, Hristina Braykova, Ilya Gusinski, INSITE SCOP, Jacek Jefimiuk, Jack Kasprzak, Jakub Adam Makowski, Jared Mark Graham, Jason Jantzen, Javier Villalba, Jean-Baptiste Quaghebeur, Jean-Baptiste Sanno, Jean-Damien Gros, Jean-Philippe Albaret, Jean-Philippe Jambert, Jeff Cooney, Jeremi Picard, Jeremy Pluvinage, Jesse Kerman, Joachim Schwarz, Joakim Ottosson, Joe Brooks, Joel PiTrel, Johannes Krohn, John Nelson, Jonas Hummelstrand, jonasgreulich, Jose Carlos Conde Acuaviva, jose gerardo arce lopez, joshua.gslaby, Juan David Almanza Lamo, Juanca Flores, Julie Faussard, Julien Brugi\u00e8re, Julien Gouz, Julien Pilarski, Julien Pilipczuk, Karyl GAUTIER, Kate Jessop, Keizo Abe, kim nari, Kirby Conn, Kris Bosmans, Krista van der Wilk, Lars , Latham Arnott, Laura Marchant, Laura Palmer, Laurent Kanadiou Freyre, Lea Str, Lemesre Julien Erase-studio, Lenny Pomerantz, LES FILMS DU NORD, Liguori Nicolas, Luca Pecori, Luigi De Frenza, Maeva Pensivy, Manuel Viqueira Carballal, Marc Messiaen, Marco Oggero, Maresch & Sturm, Mario Burbach, Mario Hounkanrin, Marion PATIN, Martial Coulon, Martin Pageot, Martine Carton, matanarbel, Mathieu Faure, Mathieu JACOULET, Mathieu Travi, Mathilde Boudet, Matt Lloyd, Matthew Fernandez, matthewacarrick, Matthias Jach, Matthieu Fremeaux, megamonkees , Merlin Pardo, Michael Gorbachev, Michael Helmrich, Mickael Carton, Micka\u00ebl Hernandez, morgan, Motion Caf\u00e9, Motion Design Studio BRUSSOBAUM, MrGlox , muftix, Mysteropodes Drouin, Neil Ingle, Nic Dean, nicolas bougere, Nicolas Castelli, Nicolas Chaunu, Nicolas Dehaut, Nicolas DIDION, Nicolas Dufresne, Nicolas Grandry, nicolas matelot, nicolas.palmier, nicole alman, nirl28, Norbert Radvanyi, Nothing to Hide, Nuno Trindade, Nycolas Gorizian, Oana Nechifor, Olivier Escher, Olivier Jean, Olivier Patt\u00e9, onillon.thierry, P Yalaoui, Pauline DE, Payage Mickael, pdicamillo12, Philip P Betts, Philipp Reinhardt, Philippe Mignot, Philippe VECI, Pierre Cornille, Pierre Jond, pierre marteel, Pierre Munier, Pierre W. Borne, Pierre-Alain L\u00e9croart, Pierre-Baptiste Harrivelle, QingRu Yu, Rapha\u00eblle Prud\u2019homme, R\u00e9mi Rongier, Renaud DANIEL, Renaud Mazotti, Ren\u00e9 Andritsch, Ricardo Abraham Ibarra Duarte, Ricardo Arce, Robin CARLO, Rodrigo Dominguez Salazar, Romy Tokic, Ronald Anzenberger, Ronny Andr\u00e4, Ronny Andr\u00e4, Roth Fr\u00e9d\u00e9ric, Roxana Rodriguez, Ruben Alejandro Trejo Segura, Ruben Gim\u00e9nez, ruldewuold, Ryan Sears, SAINT RAYMOND, Sam Burkardt, Samuel Van Ingen, samy tichadou, Saul Yance Echegaray, S\u00e9bastien GAETTA, Sebastien Mesnage, Sebastien Vincent, Sergey Vodianov, Shao H, shirley natasha pinto, Simon Hervieu, Simon Stojanovski, Songz Meng, Sonya Robine, Sorrentino Ana\u00efs, Spenser Williams, Stein WILD, Stephane Neau, St\u00e9phane Zissu, Stephanie Leonard, Stephen Richard, Steve Pratt, Sylvain Kauffmann, Tao Mao, THAN TRONG Frederic, Thiago Maia, Thomas Crausaz, Thomas Duphil, Thomas Prinzivalli, thrawn, Tiago Castro, Tim Martyn, Tom Conner, Tomas \u00c4rlemo, Tom\u00e1\u0161 Hon\u011bk, Tomas Spokauskas, traffic.in.the.skies, Trebalag Ludovic, Ty Bardi, Vadim Luks, Valentin Nozahic, Val\u00e9rie WINTZ, Valleron Nicolas, vendu, Veronica Delgado, Vicidomini Lionel, Viliam Snirc, Viliam Snirc, Villain Cedric, Vitaliy Movsha, Voignier lisa, Warren D M Reed, wlazinski matthieu, Xavier Golfier, Yan-Ali Tabarand, Yavor Popov, Yaya Gadon, Yohan Le Diraison, Yohann GAMBA, Yoran Legemble, Zach Prichard, Zden\u011bk Dovole, Z\u00e9t\u00e9ny V\u00f6r\u00f6s. Thank you! Without your generous support, Ramses would not exist.","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#development","text":"","title":"Development"},{"location":"credits/#lead-developper","text":"Nicolas \u201cDuduf\u201d Dufresne","title":"Lead developper"},{"location":"credits/#developpers-and-code-contributors","text":"Lisa Lain\u00e9 (Python API) Jean-Philippe Luchez (Python API)","title":"Developpers and code contributors"},{"location":"credits/#translations","text":"","title":"Translations"},{"location":"credits/#third-party-libraries-and-other-code","text":"Qt licensed under the GNU GPLv3 OpenSSL licensed under the OpenSSL License and the SSLeay License","title":"Third-party libraries and other code"},{"location":"credits/#documentation","text":"","title":"Documentation"},{"location":"credits/#text","text":"Nicolas Dufresne","title":"Text"},{"location":"credits/#pictures-and-media-files","text":"","title":"Pictures and Media Files"},{"location":"credits/#funding","text":"Rainbox Productions All the 583 backers from the RxOT Crowdfunding Campaign and especially: Adam Aguirre, Adam Buritsch, Adam Knight, Adrien Boutin, Adrien du Repaire, aembury, aescripts + aeplugins , A\u00efda del Solar, Alejandro R. Gonzalez, Aleksander Saharovsky, Alex Beekman, Alexandre FAVRE, alietout, Amit Gicelter, Ana Arce, Ana Arce, Ana\u00efs Guigue, Andreas Tanner, andrewrakestraw, Anez Florez Corpus, Anne Frumin, ANTOINE BIEBER, Antoine Dueso, Antonis Petroulias, Antony Pastor, Archita Ghosh, Armelle Renac, Atelier Graphoui, audrey sysaykeo, Aur\u00e9lien Delamare, aur\u00e9lien malagoli, Autret Claude, Baptiste Cochard, Bartosz B\u0105k, basimabu, Bastien Bironneau, Bastien Delmare, Ben Fligans, Benjamin Cohen-Jonathan, Benjamin Trancart, benoit jodry, Bethany Vaughan, Breece Kelsey, Brent N Walker, Brian Kolm, Bruno Quintin, Busson Remy, Calinski julien, Cam Hayduk, Cameron Gough, Carlos Arandia, Caroline Maire, Cedric Layrac, C\u00e9dric Serres, C\u00e9lia Tocco, Celine Sanno, Ching Mok, Chlo\u00e9 Chatellier, chris kieffer, Christophe \u2018IKESU\u2019 Clarey, Claire Dejoie, cl\u00e9ment Laporte, Cl\u00e9ment Vernet, Coleen Lochabay, Colin Brain, Com\u2019of design, damien.bracciotti , Dan Hollacher, Daniel Budka, David Hoizey, David Polizelli Hoffmann, david.baril, Davide Bedocchi, Derek Lau, djstep1, Dmitry Abdeev, Ebube Onyema, Elen Le Tannou, Elisabeth Springer, Emiliano Martinez, Emilien Gillet, Eric Bardot, Eric Beaup\u00e8re, Eric Paoli Infanzon, Eriks Lapins, eva.lacuskova, eva.lacuskova, Fabien Nowak, Fanny Moulin, Fernando Ferreira da Costa Junior, Florent Bonneviale, Florent Guilbaud, Francis Banguet, Fran\u00e7ois QUILLARD, Fred Luzet, fuerst.pascal, George Bowler, Germain Cauvy, Giedrius Budrys, gil, Gilles Pfeiffer, Giz Beardon, greg.araya, GRELIER Florentine, Guave Studios GmbH Guave Motion, GU\u00c9RET Matthieu, Guido Mariano, Guilbert Sylvain, Guillaume Mariotti, Guillaume Marrou, Guillaume Polveche, Guillaume Rousseau, Gustavo Almenara, Gustavo Miaciro, Gwendal Le Naour, gyom h, H Robert Marquet \u201cBob\u201d, H\u00e5kon Lundvall, Harlem Harl, Herv\u00e9 Dumont, Hiromi Ishibashi, Hristina Braykova, Ilya Gusinski, INSITE SCOP, Jacek Jefimiuk, Jack Kasprzak, Jakub Adam Makowski, Jared Mark Graham, Jason Jantzen, Javier Villalba, Jean-Baptiste Quaghebeur, Jean-Baptiste Sanno, Jean-Damien Gros, Jean-Philippe Albaret, Jean-Philippe Jambert, Jeff Cooney, Jeremi Picard, Jeremy Pluvinage, Jesse Kerman, Joachim Schwarz, Joakim Ottosson, Joe Brooks, Joel PiTrel, Johannes Krohn, John Nelson, Jonas Hummelstrand, jonasgreulich, Jose Carlos Conde Acuaviva, jose gerardo arce lopez, joshua.gslaby, Juan David Almanza Lamo, Juanca Flores, Julie Faussard, Julien Brugi\u00e8re, Julien Gouz, Julien Pilarski, Julien Pilipczuk, Karyl GAUTIER, Kate Jessop, Keizo Abe, kim nari, Kirby Conn, Kris Bosmans, Krista van der Wilk, Lars , Latham Arnott, Laura Marchant, Laura Palmer, Laurent Kanadiou Freyre, Lea Str, Lemesre Julien Erase-studio, Lenny Pomerantz, LES FILMS DU NORD, Liguori Nicolas, Luca Pecori, Luigi De Frenza, Maeva Pensivy, Manuel Viqueira Carballal, Marc Messiaen, Marco Oggero, Maresch & Sturm, Mario Burbach, Mario Hounkanrin, Marion PATIN, Martial Coulon, Martin Pageot, Martine Carton, matanarbel, Mathieu Faure, Mathieu JACOULET, Mathieu Travi, Mathilde Boudet, Matt Lloyd, Matthew Fernandez, matthewacarrick, Matthias Jach, Matthieu Fremeaux, megamonkees , Merlin Pardo, Michael Gorbachev, Michael Helmrich, Mickael Carton, Micka\u00ebl Hernandez, morgan, Motion Caf\u00e9, Motion Design Studio BRUSSOBAUM, MrGlox , muftix, Mysteropodes Drouin, Neil Ingle, Nic Dean, nicolas bougere, Nicolas Castelli, Nicolas Chaunu, Nicolas Dehaut, Nicolas DIDION, Nicolas Dufresne, Nicolas Grandry, nicolas matelot, nicolas.palmier, nicole alman, nirl28, Norbert Radvanyi, Nothing to Hide, Nuno Trindade, Nycolas Gorizian, Oana Nechifor, Olivier Escher, Olivier Jean, Olivier Patt\u00e9, onillon.thierry, P Yalaoui, Pauline DE, Payage Mickael, pdicamillo12, Philip P Betts, Philipp Reinhardt, Philippe Mignot, Philippe VECI, Pierre Cornille, Pierre Jond, pierre marteel, Pierre Munier, Pierre W. Borne, Pierre-Alain L\u00e9croart, Pierre-Baptiste Harrivelle, QingRu Yu, Rapha\u00eblle Prud\u2019homme, R\u00e9mi Rongier, Renaud DANIEL, Renaud Mazotti, Ren\u00e9 Andritsch, Ricardo Abraham Ibarra Duarte, Ricardo Arce, Robin CARLO, Rodrigo Dominguez Salazar, Romy Tokic, Ronald Anzenberger, Ronny Andr\u00e4, Ronny Andr\u00e4, Roth Fr\u00e9d\u00e9ric, Roxana Rodriguez, Ruben Alejandro Trejo Segura, Ruben Gim\u00e9nez, ruldewuold, Ryan Sears, SAINT RAYMOND, Sam Burkardt, Samuel Van Ingen, samy tichadou, Saul Yance Echegaray, S\u00e9bastien GAETTA, Sebastien Mesnage, Sebastien Vincent, Sergey Vodianov, Shao H, shirley natasha pinto, Simon Hervieu, Simon Stojanovski, Songz Meng, Sonya Robine, Sorrentino Ana\u00efs, Spenser Williams, Stein WILD, Stephane Neau, St\u00e9phane Zissu, Stephanie Leonard, Stephen Richard, Steve Pratt, Sylvain Kauffmann, Tao Mao, THAN TRONG Frederic, Thiago Maia, Thomas Crausaz, Thomas Duphil, Thomas Prinzivalli, thrawn, Tiago Castro, Tim Martyn, Tom Conner, Tomas \u00c4rlemo, Tom\u00e1\u0161 Hon\u011bk, Tomas Spokauskas, traffic.in.the.skies, Trebalag Ludovic, Ty Bardi, Vadim Luks, Valentin Nozahic, Val\u00e9rie WINTZ, Valleron Nicolas, vendu, Veronica Delgado, Vicidomini Lionel, Viliam Snirc, Viliam Snirc, Villain Cedric, Vitaliy Movsha, Voignier lisa, Warren D M Reed, wlazinski matthieu, Xavier Golfier, Yan-Ali Tabarand, Yavor Popov, Yaya Gadon, Yohan Le Diraison, Yohann GAMBA, Yoran Legemble, Zach Prichard, Zden\u011bk Dovole, Z\u00e9t\u00e9ny V\u00f6r\u00f6s. Thank you! Without your generous support, Ramses would not exist.","title":"Funding"},{"location":"components/","text":"Ramses Components Ramses is a complete framework made of different components interacting together. This makes it very modular and scalable to any kind of production, from the freelancer working at home to the biggest studios. General Description The Ramses framework can be viewed as a hirerachical tree, going from the data stored by the Ramses Server up to the creative applications add-ons and the files and folder structure on the workstations. Ramses Data : all the meta-data is stored by Ramses in an SQL server. Ramses Server : this data is managed by a webserver, which reads and writes the data on demand from connected Ramses Clients . Ramses Client : the client is run on each workstation and is the central application and provides the main User Interface of Ramses . Ramses Daemon : the daemon is run by the client itself, and is a local server which is used as a bridge between creative applications and the client itself. It handles all communications and data with the applications add-ons. Ramses Add-ons : the add-ons are scripts to be used from inside the creative applications (e.g. Blender , Maya , After Effects \u2026) so that the artist does not have to leave his application to use Ramses . Ramses Tree : on the lowest level, Ramses manages the files and folder structure on the workstation (and/or clones on remote locations). The modularity of Ramses comes from the fact that children modules don\u2019t necessarily need the parent module, at least for their core functionnalities. For example, you can use the Ramses Client without the Ramses Server and Data , or you can even use the Ramses add-ons without the Ramses Client . But you can not skip levels, i.e. the Ramses Add-ons can not be used with the Ramses Server without having both the Ramses Client and Ramses Daemon . Ramses Data Most of the data used by Ramses is stored in SQL databases. When using the Ramses Server , the main data is stored in a remote SQL server; in its default implementation, the Ramses Server works with MySQL . The Ramses Client keeps a local copy of the data in a SQLite database. Ramses Server The Ramses Server is the interface between the client and the data. It is meant only to be used programmatically and it does not have any UI. It is a very standard REST web server written in PHP , exchanging data in JSON . This means the Ramses Server and its associated Ramses Data can be easily installed everywhere, on a workstation (with a standard web server), on a shared hosting or a private server, no matter the operating system. Installation of Ramses on a server is as simple as copying php files to the server, and adding a little information in the configuration file. Ramses Client and Daemon The client is the main Ramses application. It can be used without the Ramses Server , without losing any functionnality, apart from collaborative work. In this case, the data is stored locally. When the server is not available (e.g. loss of internet connection), the Ramses Client can still work offline, and synchronize the data as soon as it comes online later. The client is a native application ( Qt / C++ ), and is available on Linux , Windows and MacOS , which makes it fast and lightweight. It may be available later for Android . The client also runs the Ramses Daemon which is a local server which communicates with the Ramses Add-ons and shares the data with them. Ramses Add-ons The add-ons are scripts available inside the creative applications (e.g. Blender , Maya , After Effects \u2026). They could be used without the client, with limited functionnalities. In this case, data is retrieved from the Ramses Tree . The add-ons are in charge of file management and versionning, publishing, etc. Ramses Tree On the lowest level, Ramses handles all files and folders for the managed projects. It is able to retrieve missing data from the file structure, and missing files from clones on remote and backup locations. Both the Add-ons and the Client can manage the files and folders.","title":"Introduction"},{"location":"components/#ramses-components","text":"Ramses is a complete framework made of different components interacting together. This makes it very modular and scalable to any kind of production, from the freelancer working at home to the biggest studios.","title":"Ramses Components"},{"location":"components/#general-description","text":"The Ramses framework can be viewed as a hirerachical tree, going from the data stored by the Ramses Server up to the creative applications add-ons and the files and folder structure on the workstations. Ramses Data : all the meta-data is stored by Ramses in an SQL server. Ramses Server : this data is managed by a webserver, which reads and writes the data on demand from connected Ramses Clients . Ramses Client : the client is run on each workstation and is the central application and provides the main User Interface of Ramses . Ramses Daemon : the daemon is run by the client itself, and is a local server which is used as a bridge between creative applications and the client itself. It handles all communications and data with the applications add-ons. Ramses Add-ons : the add-ons are scripts to be used from inside the creative applications (e.g. Blender , Maya , After Effects \u2026) so that the artist does not have to leave his application to use Ramses . Ramses Tree : on the lowest level, Ramses manages the files and folder structure on the workstation (and/or clones on remote locations). The modularity of Ramses comes from the fact that children modules don\u2019t necessarily need the parent module, at least for their core functionnalities. For example, you can use the Ramses Client without the Ramses Server and Data , or you can even use the Ramses add-ons without the Ramses Client . But you can not skip levels, i.e. the Ramses Add-ons can not be used with the Ramses Server without having both the Ramses Client and Ramses Daemon .","title":"General Description"},{"location":"components/#ramses-data","text":"Most of the data used by Ramses is stored in SQL databases. When using the Ramses Server , the main data is stored in a remote SQL server; in its default implementation, the Ramses Server works with MySQL . The Ramses Client keeps a local copy of the data in a SQLite database.","title":"Ramses Data"},{"location":"components/#ramses-server","text":"The Ramses Server is the interface between the client and the data. It is meant only to be used programmatically and it does not have any UI. It is a very standard REST web server written in PHP , exchanging data in JSON . This means the Ramses Server and its associated Ramses Data can be easily installed everywhere, on a workstation (with a standard web server), on a shared hosting or a private server, no matter the operating system. Installation of Ramses on a server is as simple as copying php files to the server, and adding a little information in the configuration file.","title":"Ramses Server"},{"location":"components/#ramses-client-and-daemon","text":"The client is the main Ramses application. It can be used without the Ramses Server , without losing any functionnality, apart from collaborative work. In this case, the data is stored locally. When the server is not available (e.g. loss of internet connection), the Ramses Client can still work offline, and synchronize the data as soon as it comes online later. The client is a native application ( Qt / C++ ), and is available on Linux , Windows and MacOS , which makes it fast and lightweight. It may be available later for Android . The client also runs the Ramses Daemon which is a local server which communicates with the Ramses Add-ons and shares the data with them.","title":"Ramses Client and Daemon"},{"location":"components/#ramses-add-ons","text":"The add-ons are scripts available inside the creative applications (e.g. Blender , Maya , After Effects \u2026). They could be used without the client, with limited functionnalities. In this case, data is retrieved from the Ramses Tree . The add-ons are in charge of file management and versionning, publishing, etc.","title":"Ramses Add-ons"},{"location":"components/#ramses-tree","text":"On the lowest level, Ramses handles all files and folders for the managed projects. It is able to retrieve missing data from the file structure, and missing files from clones on remote and backup locations. Both the Add-ons and the Client can manage the files and folders.","title":"Ramses Tree"},{"location":"components/addons/","text":"Add-ons Warning Ramses is still under active development , and this documentation is still being written. For now, the only Add-on available for testing is the Autodesk Maya Add-On , others will follow in the upcoming weeks and months. This specific page of the documentation is just a draft, sorry! Ramses comes with some add-ons to be used in your creative applications ( Blender , Maya , After Effects \u2026). They are basic add-ons to demonstrate some capabilities of Ramses for file versionning and asset management, and can be used as templates to develop your own add-ons working with Ramses. They will be developed one after each other, and you\u2019re welcome to contribute with your own! Here are some guidelines and descriptions about how these add-ons should work. We\u2019re trying to apply the same guidelines to all host applications for a unified experience. These add-ons should use the provided Scripting API available at first in Python and Adobe ExtendsScript . Introduction Although the add-ons are primarily meant to be used in conjunction with the Ramses Client Application (which in turn may be connected to the Ramses Server ), they can also be used on their own. In which case not all functionnalities will be available; the differences are mentionned in this documentation. Available Commands Some of these commands manage files in the Ramses Tree , see the corresponding documentation . All commands except open Ramses and Settings should first: If the add-on is not set to offline by the user (in the settings): If the path to the Client executable file is invalid: warn the user and stop. If the user is not connected, warn the user and stop Open // TODO Save If the file is not a working file, but a version coming from the ramses_version subfolder (named restore-vXX ), runs Save new version instead of Save . If the file is in the _versions folder or if its resource name contains restore-vXX . Increments the existing WIP file, saves over it, and increments again. Else Saves the current file. Backs up the file in the _versions subfolder. Version is automatically incremented if the auto-increment timeout has expired (defined in the settings). If online Send the new status of the asset/shot for this step (version, date, state, comment, completion ratio) to the Ramses Client . See the naming scheme and folder structure for more information. Save new version & Publish If the file is in the ramses_version folder or if its resource name contains restore-vXX . Copies the current working file into the version folder, appending the state got from the Ramses client if available, or else just \u201cv\u201d, and the incremented version number. Saves the current file as the working file (in the working folder, and removing restore-XX from the resource name) Removes the current file (version file, keeps only the new working file) if it was a restored version Else Saves the current file. Copies the current file to the _versions subfolder, appending the current state and the incremented version number. If the file is published Copies the current file to the _published subfolder. If the client is available : sends the update command to the client, with the date, state and version of the current asset/shot, and publish information. Retrieve version Gets a specific version back from the ramses_versions subfolder. Copies the file to the asset/shot folder, adds restore-vXX to the resource name, where XX is the restored version number. Opens it. It is only when the file will be saved that this new copied file will be removed and the working file will be overwritten to a new version. Publish as template Saves the file in the corresponding step folder (in a \u201ctemplates\u201d subfolder), using a specific naming: PROJECTID_G_stepID_template-resourceName.ext (asks for overwrite if the file exists) Saves the file in a temp folder (to never overwrite a template when Ctrl+S) Open template Lists the available templates Opens the selected one Saves it in a temp folder Import template Lists the available templates Imports the selected one Settings Opens the settings editor of the Add-on. Open Ramses Opens the Ramses Client if available. Try to connect to the Daemon . Warns the user if not available/cannot connect to the Daemon . If the Daemon is available, sets the mode to \u201conline\u201d. If not, sets to \u201coffline\u201d. UI / UX Depending on the host application, the implementation and User Interface / User Experience of the add-ons may vary, but they should follow these guidelines as closely as possible. Integrated commands When possible, the commands should be integrated as seamlessly as possible in the host application, e.g. by adding or even replacing menu items for saving files, saving as., etc. Especially for the save command, the default save shortcut (generally [Ctrl] + [S] ) should be replaced by the save command for Ramses . Other save command shortcuts should be added, preferably the same for all add-ons: Save : [Ctrl] + [S] Save new version : [Ctrl] + [Alt] + [S] Publish : [Ctrl] + [Shift] + [P] These shortcuts have been chosen to avoid conflicts in most host applications but can be changed to something else if they\u2019re still conflicting with something important. UI Panel If possible, each Ramses Add-on should provide a UI panel integrated into the host software, but organized similarly in all add-ons, with specific variations to respect the host software UI guidelines. The panel must display buttons for all available commands. The panel must also provide a way to quickly set the current Project and Step , and show the opened asset or shot information: state, version, date, comment, completion ratio\u2026 This information is retrieved from the client application if available, or from the Ramses Tree if not. The panel and this information must be updated as soon as the opened file changes, or at least when the user interacts with it. Information available in the panel: Current user (online only) Current project Step Current shot or asset Containing asset group or sequence (sequence available only if online) Date of latest version (read only) Current state Current resource name Current version (read only) Completion ratio Is template (read only) If the client application is not available, the Project and Step information is displayed but cannot be changed. Comment is not available. Settings If the host application provides a way to display the settings of its add-ons, the settings should be located there (and the settings command should open this location if possible). If it does not, the Add-on must provide a dialog or a panel to let the user change the settings. These settings are: Location of the Ramses Client executable file ( .exe on Windows , .app on MacOS , .appimage or binary on Linux ) Listening port of the Ramses Daemon Note: the settings are saved in a shared location (user documents folder ?) between all add-ons so that they\u2019re configured only once. They\u2019re in an easy-to-edit JSON text file.","title":"General Information"},{"location":"components/addons/#add-ons","text":"Warning Ramses is still under active development , and this documentation is still being written. For now, the only Add-on available for testing is the Autodesk Maya Add-On , others will follow in the upcoming weeks and months. This specific page of the documentation is just a draft, sorry! Ramses comes with some add-ons to be used in your creative applications ( Blender , Maya , After Effects \u2026). They are basic add-ons to demonstrate some capabilities of Ramses for file versionning and asset management, and can be used as templates to develop your own add-ons working with Ramses. They will be developed one after each other, and you\u2019re welcome to contribute with your own! Here are some guidelines and descriptions about how these add-ons should work. We\u2019re trying to apply the same guidelines to all host applications for a unified experience. These add-ons should use the provided Scripting API available at first in Python and Adobe ExtendsScript .","title":"Add-ons"},{"location":"components/addons/#introduction","text":"Although the add-ons are primarily meant to be used in conjunction with the Ramses Client Application (which in turn may be connected to the Ramses Server ), they can also be used on their own. In which case not all functionnalities will be available; the differences are mentionned in this documentation.","title":"Introduction"},{"location":"components/addons/#available-commands","text":"Some of these commands manage files in the Ramses Tree , see the corresponding documentation . All commands except open Ramses and Settings should first: If the add-on is not set to offline by the user (in the settings): If the path to the Client executable file is invalid: warn the user and stop. If the user is not connected, warn the user and stop","title":"Available Commands"},{"location":"components/addons/#open","text":"// TODO","title":"Open"},{"location":"components/addons/#save","text":"If the file is not a working file, but a version coming from the ramses_version subfolder (named restore-vXX ), runs Save new version instead of Save . If the file is in the _versions folder or if its resource name contains restore-vXX . Increments the existing WIP file, saves over it, and increments again. Else Saves the current file. Backs up the file in the _versions subfolder. Version is automatically incremented if the auto-increment timeout has expired (defined in the settings). If online Send the new status of the asset/shot for this step (version, date, state, comment, completion ratio) to the Ramses Client . See the naming scheme and folder structure for more information.","title":"Save"},{"location":"components/addons/#save-new-version-publish","text":"If the file is in the ramses_version folder or if its resource name contains restore-vXX . Copies the current working file into the version folder, appending the state got from the Ramses client if available, or else just \u201cv\u201d, and the incremented version number. Saves the current file as the working file (in the working folder, and removing restore-XX from the resource name) Removes the current file (version file, keeps only the new working file) if it was a restored version Else Saves the current file. Copies the current file to the _versions subfolder, appending the current state and the incremented version number. If the file is published Copies the current file to the _published subfolder. If the client is available : sends the update command to the client, with the date, state and version of the current asset/shot, and publish information.","title":"Save new version &amp; Publish"},{"location":"components/addons/#retrieve-version","text":"Gets a specific version back from the ramses_versions subfolder. Copies the file to the asset/shot folder, adds restore-vXX to the resource name, where XX is the restored version number. Opens it. It is only when the file will be saved that this new copied file will be removed and the working file will be overwritten to a new version.","title":"Retrieve version"},{"location":"components/addons/#publish-as-template","text":"Saves the file in the corresponding step folder (in a \u201ctemplates\u201d subfolder), using a specific naming: PROJECTID_G_stepID_template-resourceName.ext (asks for overwrite if the file exists) Saves the file in a temp folder (to never overwrite a template when Ctrl+S)","title":"Publish as template"},{"location":"components/addons/#open-template","text":"Lists the available templates Opens the selected one Saves it in a temp folder","title":"Open template"},{"location":"components/addons/#import-template","text":"Lists the available templates Imports the selected one","title":"Import template"},{"location":"components/addons/#settings","text":"Opens the settings editor of the Add-on.","title":"Settings"},{"location":"components/addons/#open-ramses","text":"Opens the Ramses Client if available. Try to connect to the Daemon . Warns the user if not available/cannot connect to the Daemon . If the Daemon is available, sets the mode to \u201conline\u201d. If not, sets to \u201coffline\u201d.","title":"Open Ramses"},{"location":"components/addons/#ui-ux","text":"Depending on the host application, the implementation and User Interface / User Experience of the add-ons may vary, but they should follow these guidelines as closely as possible.","title":"UI / UX"},{"location":"components/addons/#integrated-commands","text":"When possible, the commands should be integrated as seamlessly as possible in the host application, e.g. by adding or even replacing menu items for saving files, saving as., etc. Especially for the save command, the default save shortcut (generally [Ctrl] + [S] ) should be replaced by the save command for Ramses . Other save command shortcuts should be added, preferably the same for all add-ons: Save : [Ctrl] + [S] Save new version : [Ctrl] + [Alt] + [S] Publish : [Ctrl] + [Shift] + [P] These shortcuts have been chosen to avoid conflicts in most host applications but can be changed to something else if they\u2019re still conflicting with something important.","title":"Integrated commands"},{"location":"components/addons/#ui-panel","text":"If possible, each Ramses Add-on should provide a UI panel integrated into the host software, but organized similarly in all add-ons, with specific variations to respect the host software UI guidelines. The panel must display buttons for all available commands. The panel must also provide a way to quickly set the current Project and Step , and show the opened asset or shot information: state, version, date, comment, completion ratio\u2026 This information is retrieved from the client application if available, or from the Ramses Tree if not. The panel and this information must be updated as soon as the opened file changes, or at least when the user interacts with it. Information available in the panel: Current user (online only) Current project Step Current shot or asset Containing asset group or sequence (sequence available only if online) Date of latest version (read only) Current state Current resource name Current version (read only) Completion ratio Is template (read only) If the client application is not available, the Project and Step information is displayed but cannot be changed. Comment is not available.","title":"UI Panel"},{"location":"components/addons/#settings_1","text":"If the host application provides a way to display the settings of its add-ons, the settings should be located there (and the settings command should open this location if possible). If it does not, the Add-on must provide a dialog or a panel to let the user change the settings. These settings are: Location of the Ramses Client executable file ( .exe on Windows , .app on MacOS , .appimage or binary on Linux ) Listening port of the Ramses Daemon Note: the settings are saved in a shared location (user documents folder ?) between all add-ons so that they\u2019re configured only once. They\u2019re in an easy-to-edit JSON text file.","title":"Settings"},{"location":"components/addons/maya-extend/","text":"Extending the Ramses Maya Add-on You can easily add features to the Ramses Maya Add-On , especially by registering your own scripts/methods to be run when a status changes, when a scene is being published, or to import items. You can also easily use the included Ramses Scripting API as a Python module to develop your own functions. Getting started Technically, the simplest and recommended way to extend the Ramses Maya Add-On is to add your own module(s) inside the Add-on iteself. It is very easy and this way you do not need to register your script or plug-in with Maya , Ramses takes care of that for you. Install the Add-On First, install the Ramses Maya Add-On as described here . These folders should be available: icons : The icons used by the Add-On plug-ins : The actual Python code dumaf : Some useful Python code for Maya ramses : The Ramses Scripting API as a Python module ramses_maya : The Add-On itself shelves : The Ramses Maya shelf Create your module All you need to do to easily extend the Ramses Maya Add-On is to create your own module in the plug-ins folder. Create a subfolder in the plug-ins folder, containing an empty __init__.py file. You can also optionally add your own shelf in the shelves folder. The new tree should look like this: icons plug-ins dumaf ramses ramses_maya your_new_module : contains __init__.py shelves : optionally add shelf_YourModule.mel In the new your_new_module/__init__.py file, you will import or code all the methods you want to expose and make available in Maya, for example to be used in a shelf or any other Python script. You can also register your Ramses callbacks there (read below for more information about Ramses callbacks). Here is an example of such an __init__.py file, assuming you have two other files ( anotherFile.py and aSecondFile.py ) in the same folder, containing the actual code and methods to import: from .anotherFile import aPublicMethod from .aSecondFile import aPublishMethod, anImportMethod # Now, 'aPublicMethod' can be called from everyhwere in Maya # And we can register the publish and import method as callbacks for Ramses. # For this, we need to import the Ramses Module (API) from ramses import Ramses # Now we just have to add the callbacks: ramses = Ramses.instance() # The publish method ramses.publishScripts.append( aPublishMethod ) # The import method ramses.importScripts.append( anImportMethod ) Import the module Finally, you just have to import your new module in the ramses_maya module: add a simple import at the end of the ramses_maya/__init__.py file, which should look like this: from .ram_cmds import cmds_classes from ramses import log, LogLevel import your_new_module Both the new module and the shelf will be automatically registered by the Ramses Maya Add-On when it\u2019s loaded in Maya . Example A complete and working example has been made available: it is the extension made for the school Rubika Animation / Supinfocom , for the production pipeline of the graduation movies of the students. You can get it here , and it comes with a comprehensive documentation . Feel free to try and use it, and study it. As explained just before, all the extension is packaged in its own module called rubika in the plug-ins folder. Callbacks Ramses stores three lists of callbacks you can extend. Ramses.publishScripts contains the functions to be called when a scene is being published. When Ramses publishes a scene, it first copies the scene file to the publish folder, and then calls all the scripts listed there. Each callback you add to this list must take three arguments. Read the Scripting API Reference for more information. Ramses.statusScripts contains the functions to be called when a scene status changes. When Ramses updates a status, it first copies the scene file to the version folder and calls the Daemon (if available) to notify the update, and then calls all the scripts listed there. Each callback you add to this list must take two arguments. Read the Scripting API Reference for more information. Ramses.importScripts contains the functions to be called when the user selects an item (shot or asset) to import. By default, if and only if the list is empty, Ramses imports the selected item in the current scene, in a group named after the item, and in another group named after the asset group if it is an asset. Adding new callbacks to the list will de-activate this default behaviour so you can use your own methods for importing items. Each callback you add to this list must take two arguments. Read the Scripting API Reference for more information. There are two ways to register your methods: by using a Maya command, or by forking the provided Add-On to add your functions. Once the callbacks have been registered, they are automatically called when the user interacts with the add-on and wants to update/import/publish an item. You can also explicitly call them by calling these three methods: Ramses.updateStatus( item, status, stepShortName ) Ramses.importItem( item, filePath, stepShortName ) Ramses.publish( item, filePath, stepShortName ) Read the Scripting API Reference for more information. Adding your custom callbacks To register your callbacks, you just have to append them in the corresponding Ramses lists: # We need to import the Ramses Module (API) from ramses import Ramses # Now we just have to add the callbacks ramses = Ramses.instance() # A publish method ramses.publishScripts.append( aPublishMethod ) # An import method ramses.importScripts.append( anImportMethod ) # A status method ramses.statusScripts.append( aStatusMethod ) Now, all these methods will be automatically called each time a status changes, an item is published, or an item is imported. Detailed Example In this example, three files are added, with the import, status, and publish methods. The file plug-ins/your_new_module/myPublishCallbacks.py creates the callbacks used to publish shots and assets. # myPublishCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def publishAsset(item, filePath, step): \"\"\"Callback used to publish Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the filePath and the Step doSomething( item.shortName(), item.group(), filePath, step.shortName()) # etc. def publishShot(item, filePath, step): \"\"\"Callback used to publish Shots only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.SHOT: return # Now we can do what we need using the RamShot object, the filePath and the Step doSomething( item.shortName(), item.duration(), filePath, step.shortName()) # etc. The file plug-ins/your_new_module/myStatusCallbacks.py creates the callbacks used when a status changes. # myStatusCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def updateAsset(item, status, step): \"\"\"Callback used to update Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the RamStatus object and the RamStep object doSomething( item.shortName(), item.group(), status.completionRatio, status.user, step.shortName()) # etc. def updateShot(item, filePath, publishFolderPath): \"\"\"Callback used to update Shots only\"\"\" # The item must be a RamShot if item.itemType() != ram.ItemType.SHOT: return # Now we can do what we need using the RamAsset object, the RamStatus object and the RamStep object doSomething( item.shortName(), item.group(), status.completionRatio, status.user, step.shortName()) # etc. The file plug-ins/your_new_module/myImportCallbacks.py creates the callbacks used to import items. # myImportCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def importAsset(item, filePath, step): \"\"\"Callback used to import Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the RamStep object and the file path doSomething( item.shortName(), item.group(), step.shortName(), filePath) # etc. The file plug-ins/your_new_module/otherMethods.py creates a few other methods, for example to be used in a Maya shelf . # otherMethods.py def methodForAShelf(): doSomething() Finally, we just need to import these files in the plug-ins/your_new_module/__init__.py file of our custom module. We can register them here. # __init__.py from myImportCallbacks import importAsset from myStatusCallbacks import updateAsset, updateShot from myPublishCallbacks import publishAsset, publishShot from otherMethods import methodForAShelf from ramses import Ramses # Get the ramses instance ramses = Ramses.instance() # Add the callbacks to the publish list ramses.publishScripts.append( publishAsset ) ramses.publishScripts.append( publishShot ) # Add the callbacks to the status list ramses.statusScripts.append( updateAsset ) ramses.statusScripts.append( updateShot ) # Add the callbacks to the status list ramses.importScripts.append( importAsset ) And don\u2019t forget to import your new module in plug-ins/ramses_maya/__init__.py : # plug-ins/ramses_maya/__init__.py from .ram_cmds import cmds_classes from ramses import log, LogLevel import your_new_module Don\u2019t change anything else in the file! Now you can also use methodForAShelf() in an existing or new shelf , which can be stored in the shelves folder if you want it to be deployed with your extension.","title":"Extensibility"},{"location":"components/addons/maya-extend/#extending-the-ramses-maya-add-on","text":"You can easily add features to the Ramses Maya Add-On , especially by registering your own scripts/methods to be run when a status changes, when a scene is being published, or to import items. You can also easily use the included Ramses Scripting API as a Python module to develop your own functions.","title":"Extending the Ramses Maya Add-on"},{"location":"components/addons/maya-extend/#getting-started","text":"Technically, the simplest and recommended way to extend the Ramses Maya Add-On is to add your own module(s) inside the Add-on iteself. It is very easy and this way you do not need to register your script or plug-in with Maya , Ramses takes care of that for you.","title":"Getting started"},{"location":"components/addons/maya-extend/#install-the-add-on","text":"First, install the Ramses Maya Add-On as described here . These folders should be available: icons : The icons used by the Add-On plug-ins : The actual Python code dumaf : Some useful Python code for Maya ramses : The Ramses Scripting API as a Python module ramses_maya : The Add-On itself shelves : The Ramses Maya shelf","title":"Install the Add-On"},{"location":"components/addons/maya-extend/#create-your-module","text":"All you need to do to easily extend the Ramses Maya Add-On is to create your own module in the plug-ins folder. Create a subfolder in the plug-ins folder, containing an empty __init__.py file. You can also optionally add your own shelf in the shelves folder. The new tree should look like this: icons plug-ins dumaf ramses ramses_maya your_new_module : contains __init__.py shelves : optionally add shelf_YourModule.mel In the new your_new_module/__init__.py file, you will import or code all the methods you want to expose and make available in Maya, for example to be used in a shelf or any other Python script. You can also register your Ramses callbacks there (read below for more information about Ramses callbacks). Here is an example of such an __init__.py file, assuming you have two other files ( anotherFile.py and aSecondFile.py ) in the same folder, containing the actual code and methods to import: from .anotherFile import aPublicMethod from .aSecondFile import aPublishMethod, anImportMethod # Now, 'aPublicMethod' can be called from everyhwere in Maya # And we can register the publish and import method as callbacks for Ramses. # For this, we need to import the Ramses Module (API) from ramses import Ramses # Now we just have to add the callbacks: ramses = Ramses.instance() # The publish method ramses.publishScripts.append( aPublishMethod ) # The import method ramses.importScripts.append( anImportMethod )","title":"Create your module"},{"location":"components/addons/maya-extend/#import-the-module","text":"Finally, you just have to import your new module in the ramses_maya module: add a simple import at the end of the ramses_maya/__init__.py file, which should look like this: from .ram_cmds import cmds_classes from ramses import log, LogLevel import your_new_module Both the new module and the shelf will be automatically registered by the Ramses Maya Add-On when it\u2019s loaded in Maya .","title":"Import the module"},{"location":"components/addons/maya-extend/#example","text":"A complete and working example has been made available: it is the extension made for the school Rubika Animation / Supinfocom , for the production pipeline of the graduation movies of the students. You can get it here , and it comes with a comprehensive documentation . Feel free to try and use it, and study it. As explained just before, all the extension is packaged in its own module called rubika in the plug-ins folder.","title":"Example"},{"location":"components/addons/maya-extend/#callbacks","text":"Ramses stores three lists of callbacks you can extend. Ramses.publishScripts contains the functions to be called when a scene is being published. When Ramses publishes a scene, it first copies the scene file to the publish folder, and then calls all the scripts listed there. Each callback you add to this list must take three arguments. Read the Scripting API Reference for more information. Ramses.statusScripts contains the functions to be called when a scene status changes. When Ramses updates a status, it first copies the scene file to the version folder and calls the Daemon (if available) to notify the update, and then calls all the scripts listed there. Each callback you add to this list must take two arguments. Read the Scripting API Reference for more information. Ramses.importScripts contains the functions to be called when the user selects an item (shot or asset) to import. By default, if and only if the list is empty, Ramses imports the selected item in the current scene, in a group named after the item, and in another group named after the asset group if it is an asset. Adding new callbacks to the list will de-activate this default behaviour so you can use your own methods for importing items. Each callback you add to this list must take two arguments. Read the Scripting API Reference for more information. There are two ways to register your methods: by using a Maya command, or by forking the provided Add-On to add your functions. Once the callbacks have been registered, they are automatically called when the user interacts with the add-on and wants to update/import/publish an item. You can also explicitly call them by calling these three methods: Ramses.updateStatus( item, status, stepShortName ) Ramses.importItem( item, filePath, stepShortName ) Ramses.publish( item, filePath, stepShortName ) Read the Scripting API Reference for more information.","title":"Callbacks"},{"location":"components/addons/maya-extend/#adding-your-custom-callbacks","text":"To register your callbacks, you just have to append them in the corresponding Ramses lists: # We need to import the Ramses Module (API) from ramses import Ramses # Now we just have to add the callbacks ramses = Ramses.instance() # A publish method ramses.publishScripts.append( aPublishMethod ) # An import method ramses.importScripts.append( anImportMethod ) # A status method ramses.statusScripts.append( aStatusMethod ) Now, all these methods will be automatically called each time a status changes, an item is published, or an item is imported.","title":"Adding your custom callbacks"},{"location":"components/addons/maya-extend/#detailed-example","text":"In this example, three files are added, with the import, status, and publish methods. The file plug-ins/your_new_module/myPublishCallbacks.py creates the callbacks used to publish shots and assets. # myPublishCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def publishAsset(item, filePath, step): \"\"\"Callback used to publish Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the filePath and the Step doSomething( item.shortName(), item.group(), filePath, step.shortName()) # etc. def publishShot(item, filePath, step): \"\"\"Callback used to publish Shots only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.SHOT: return # Now we can do what we need using the RamShot object, the filePath and the Step doSomething( item.shortName(), item.duration(), filePath, step.shortName()) # etc. The file plug-ins/your_new_module/myStatusCallbacks.py creates the callbacks used when a status changes. # myStatusCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def updateAsset(item, status, step): \"\"\"Callback used to update Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the RamStatus object and the RamStep object doSomething( item.shortName(), item.group(), status.completionRatio, status.user, step.shortName()) # etc. def updateShot(item, filePath, publishFolderPath): \"\"\"Callback used to update Shots only\"\"\" # The item must be a RamShot if item.itemType() != ram.ItemType.SHOT: return # Now we can do what we need using the RamAsset object, the RamStatus object and the RamStep object doSomething( item.shortName(), item.group(), status.completionRatio, status.user, step.shortName()) # etc. The file plug-ins/your_new_module/myImportCallbacks.py creates the callbacks used to import items. # myImportCallbacks.py import ramses as ram # Get the ramses instance ramses = ram.Ramses.instance() def importAsset(item, filePath, step): \"\"\"Callback used to import Assets only\"\"\" # The item must be a RamAsset if item.itemType() != ram.ItemType.ASSET: return # Now we can do what we need using the RamAsset object, the RamStep object and the file path doSomething( item.shortName(), item.group(), step.shortName(), filePath) # etc. The file plug-ins/your_new_module/otherMethods.py creates a few other methods, for example to be used in a Maya shelf . # otherMethods.py def methodForAShelf(): doSomething() Finally, we just need to import these files in the plug-ins/your_new_module/__init__.py file of our custom module. We can register them here. # __init__.py from myImportCallbacks import importAsset from myStatusCallbacks import updateAsset, updateShot from myPublishCallbacks import publishAsset, publishShot from otherMethods import methodForAShelf from ramses import Ramses # Get the ramses instance ramses = Ramses.instance() # Add the callbacks to the publish list ramses.publishScripts.append( publishAsset ) ramses.publishScripts.append( publishShot ) # Add the callbacks to the status list ramses.statusScripts.append( updateAsset ) ramses.statusScripts.append( updateShot ) # Add the callbacks to the status list ramses.importScripts.append( importAsset ) And don\u2019t forget to import your new module in plug-ins/ramses_maya/__init__.py : # plug-ins/ramses_maya/__init__.py from .ram_cmds import cmds_classes from ramses import log, LogLevel import your_new_module Don\u2019t change anything else in the file! Now you can also use methodForAShelf() in an existing or new shelf , which can be stored in the shelves folder if you want it to be deployed with your extension.","title":"Detailed Example"},{"location":"components/addons/maya-rubika/","text":"Rubika Flavor of the Ramses Maya Add-on The Rubika Flavor of the Ramses Maya Add-on is an extension of the add-on developed to be used at the Rubika Supinfocom school, automating the workflow and production pipeline of the graduation movie of the students during the last year of their studies. It is provided as an example extension of the Ramses Maya Add-on and can be used as-is in other productions too. It extends the default add-on with some automations when exporting and importing items, and adds an Update command, located in the Ramses shelf too. The shelf is almost the same as the default add-on, except for the extra Update button. The Rubika Flavor of the Maya Add-on automates the publication, import and update of the items according to how the pipeline is set up in the Ramses Client Application . When publishing or importing an item, the Add-on asks the Ramses Daemon which formats needs to be published or imported and then runs the corresponding automation scripts. This makes the add-on very versatile, as it adapts to the way the pipeline has been designed, using a simple set of predefined formats to be used through the pipes. Read the Configuration and settings section to learn how to configure the pipeline. As well as the default add-on, the Rubika Flavor can also be used without the Ramses Client Application , in which case it will fall back to predefined default values and formats explained in the Configuration and settings section below. Publication Before publishing an item from an asset or a shot scene, you have to tell Ramses exactly what you want to publish. Ramses doesn\u2019t publish all the content of the scene , but only what has been set to be exported. To set the items to be exported, you just have to include them in one of the following predefined Maya Sets . Set name Desciption Ramses_Publish The items to be published Ramses_Proxy The proxies to be published (either geometry, or shaders). For shaders, add the geometry associated to the shaders to be exported. Ramses_DelOnPublish This special set contains the nodes to be removed from the scene before publishing it. The easiest way to always have these sets available in the scenes is to create them in the template files used by each step. Warning The names of the sets are case sensitive! Ramses_Publish will be handled, but not ramses_publish . You just need to add the root node of the items to publish in the corresponding set; Do not add the whole hierearchy! Ramses will automatically publish all its children. This root node can be of any type, and not necessarily a group. In this example, \u201c Beautiful_asset \u201d and \u201c Another_item \u201d will be published in separate files: Ramses publishes altogether all the child nodes of the nodes found into the Ramses_Publish set. All exported files contains the name of the pipe and the name of the item if any, as defined in the pipeline editor of the Ramses Client Application . This is how the published files are listed in the Add-on (with the *Open and Import* command). This is how the published files are listed in the Ramses Client Application . Ramses will also copy an extra file in the _publish folder: a copy of the Scene as it is at the moment you publish it. According to the information the add-on gets from the Daemon , when publishing items from a specific steps, a few options may be shown. Animation - AnimPipe Ramses will clean the scene before exporting, removing everything not checked in the options and not included in the Ramses_Publish Maya set. A root controller is added as a parent of the root node of the published animation (a simple curve), which stores needed meta-data and can be used to manipulate the item once imported into another scene. (Proxy) Geometry - GeoPipe and pGeoPipe Ramses will clean the scene before exporting, removing everything checked in the options and not included in the Ramses_Publish Maya set. It also removes all histories from the exported nodes. And it finally freezes the transformations of all objects by default, except for the ones which names contain the strings defined in the \u201c Don\u2019t freeze tranformations for \u201d field. By default it will also remove all curves and surfaces to publish only meshes, but you can change that in the options if needed. If a curve or a surface is part of the hierarchy (it has child meshes), only the shape node will be removed, but the transform node is kept (effectively transforming the node into a simple group ): this way everything stays as it is without any modification. A root controller is added as a parent of the root node of the published geometry (a simple curve), which stores needed meta-data and can be used to manipulate the item once imported into another scene. Proxy shaders - pShaPipe Ramses exports the items as an Arnold Scene Source (.ass) file. This pipe is usually used in conjunction with a Proxy Geometry pipe ( pGeoPipe ) which will export the geometry used as a proxy for the Arnold scene . Render and Viewport shaders - rdrShaPipe and vpShaPipe Everything except shaders is removed from the scene; the only option is to also remove shaders associated with hidden nodes. Ramses then saves a Maya scene containing only these shaders, and stores associated meta-data to be able to assign these shaders back to the corresponding geometry (see the Import section for more details). Rig - RigPipe As with other pipes, a few options are available to select what to remove to clean the scene, as well as choosing the default display for the joints. The rig is published in a simple Maya Scene, where everything else has been removed. Set - SetPipe Sets are published as a simple Maya Scene where everything else has been removed; all meta-data and links with external assets are kept, so that individual assets can be updated later, as well as the whole set, but individual root controllers of included assets are hidden. The options are the same as with Geometry. Standard - Standard and StandardA Standard publication is the default format, where everything not included with the items to be published is simply removed, and the Scene is then published as is, as a simple Maya Scene. Import When items are imported in a Scene, Ramses sorts them in groups at the root of the Scene, depending on their type, group, and where they\u2019re from. Root controllers are colored to make them easily recognizable. The name of the pipe where they came from is kept for future information. It is possible to select several input pipes at once, for example to import both the geometry and the shaders at once; Ramses will automatically handle the import and assign the right shaders to the right geometry in this example. Animation - AnimPipe When importing an animation, Ramses can try to remove corresponding existing rigs from the scene before, so that only the baked animation is kept. (Proxy) Geometry - GeoPipe and pGeoPipe Geometry is simply added to the scene, sorted in its corresponding group. Proxy shaders - pShaPipe There is no automatic import of Arnold Scene Sources . You have to manually handle them. Render and Viewport shaders - rdrShaPipe and vpShaPipe Shaders are imported to the current Scene, and Ramses will automatically assign them to any corresponding selected geometry before the import. Shaders are imported as reference, so there\u2019s no need to update them once imported in a scene; except for switching between viewport shaders and render shaders. Rig - RigPipe Rigs are imported as reference into the current Scene. You can safely import several times the same Rig, as Ramses will correctly handle namespaces so they\u2019re self-contained. Set - SetPipe Sets are imported the same way as geometry; the root controllers of the included assets are hidden, but they\u2019re still available and colored in the outliner. If you need to modify a set in a specific shot, you\u2019ll want the modified assets to not be updated when the set is updated. To prevent that, just move the corresponding assets outside the hierarchy of the set, or update the assets individually. Update When updating, by default Ramses will list only the items which needs to be updated; if for some reason you need to re-import/update another item, uncheck the box at the top of the window. Warning When updating an item, all the children of its root controller will be removed and replaced by the updated item. If you added an object to the hierarchy you want to keep, make sure to move it out before updating and parent it again after the update. It works the same way for assets included in sets: if you need to keep changes you\u2019ve made, move the corresponding assets out of the hierarchy of the set before updating. Configuration and settings The Add-on automatically publishes and imports items using predefined formats and configurations. These formats can be set to be used between any step in the production pipeline, configured using the Ramses Client Application pipeline editor. An example of a simple pipe as shown in the Ramses Client Application pipeline editor. As you can see in this example, each step can be connected using several formats. The Add-on gets the predefined name of the pipes to export the items in the corresponding formats. Pipe formats Here is the list of all the pies the Add-on can handle. Pipe ID Supported file formats Description AnimPipe Alembic (.abc) Character and VFX animation. GeoPipe Alembic (.abc) Maya ASCII (.ma) Maya Binary (.mb) Used to export meshes. pGeoPipe Alembic (.abc) Maya ASCII (.ma) Maya Binary (.mb) The proxy geometry to be replaced on rendering by an Arnold Scene Source or any other higher definition geometry. pShaPipe Arnold Scene Source (.ass) The Arnold scene to be used when rendering to replace proxy geometries by the high definition version. rdrShaPipe Maya Binary (.mb) Render shaders, the final version of the shaders. RigPipe Maya ASCII (.ma) Maya Binary (.mb) Rigged characters and props. SetPipe Maya ASCII (.ma) Maya Binary (.mb) Sets made of other assets. Standard Maya Binary (.mb) A Standard Maya file. StandardA Maya ASCII (.ma) A Standard Maya file. vpShaPipe Maya Binary (.mb) Viewport shaders, a lightweight version of the shaders used for draft display in the viewport. Warning The pipe IDs are case sensitive! GeoPipe will be handled, but not geoPipe . These pipes are described in more details in the sections below. An empty pipe. An unsupported pipe. When a pipe is not configured or uses unsupported formats, or if the Ramses Daemon is not available (because the add-on is not used with the Ramses Client Application ), Ramses will fall back on the Step names to try to export something anyway, using the following rules. Step ID Default output pipe IDs Description MOD (Modeling) GeoPipe pGeoPipe vpShaPipe Geometry Proxy Geometry Viewport Shaders SHADE (Shading) rdrShaPipe pShaPipe pGeoPipe Render Shaders Arnold Scene Proxy Geometry RIG (Rigging) RigPipe Rigging SET (Sets) SetPipe Sets of assets LAY (Layout) Standard A Standard file. LIGHT (Lighting) Standard A Standard file. ANIM (Animation) AnimPipe Baked animation. VFX (Visual Effects)) AnimPipe Baked animation. These default values are defined in the plug-ins/rubika/utils_constants.py source file of the add-on.","title":"Rubika Flavor"},{"location":"components/addons/maya-rubika/#rubika-flavor-of-the-ramses-maya-add-on","text":"The Rubika Flavor of the Ramses Maya Add-on is an extension of the add-on developed to be used at the Rubika Supinfocom school, automating the workflow and production pipeline of the graduation movie of the students during the last year of their studies. It is provided as an example extension of the Ramses Maya Add-on and can be used as-is in other productions too. It extends the default add-on with some automations when exporting and importing items, and adds an Update command, located in the Ramses shelf too. The shelf is almost the same as the default add-on, except for the extra Update button. The Rubika Flavor of the Maya Add-on automates the publication, import and update of the items according to how the pipeline is set up in the Ramses Client Application . When publishing or importing an item, the Add-on asks the Ramses Daemon which formats needs to be published or imported and then runs the corresponding automation scripts. This makes the add-on very versatile, as it adapts to the way the pipeline has been designed, using a simple set of predefined formats to be used through the pipes. Read the Configuration and settings section to learn how to configure the pipeline. As well as the default add-on, the Rubika Flavor can also be used without the Ramses Client Application , in which case it will fall back to predefined default values and formats explained in the Configuration and settings section below.","title":"Rubika Flavor of the Ramses Maya Add-on"},{"location":"components/addons/maya-rubika/#publication","text":"Before publishing an item from an asset or a shot scene, you have to tell Ramses exactly what you want to publish. Ramses doesn\u2019t publish all the content of the scene , but only what has been set to be exported. To set the items to be exported, you just have to include them in one of the following predefined Maya Sets . Set name Desciption Ramses_Publish The items to be published Ramses_Proxy The proxies to be published (either geometry, or shaders). For shaders, add the geometry associated to the shaders to be exported. Ramses_DelOnPublish This special set contains the nodes to be removed from the scene before publishing it. The easiest way to always have these sets available in the scenes is to create them in the template files used by each step. Warning The names of the sets are case sensitive! Ramses_Publish will be handled, but not ramses_publish . You just need to add the root node of the items to publish in the corresponding set; Do not add the whole hierearchy! Ramses will automatically publish all its children. This root node can be of any type, and not necessarily a group. In this example, \u201c Beautiful_asset \u201d and \u201c Another_item \u201d will be published in separate files: Ramses publishes altogether all the child nodes of the nodes found into the Ramses_Publish set. All exported files contains the name of the pipe and the name of the item if any, as defined in the pipeline editor of the Ramses Client Application . This is how the published files are listed in the Add-on (with the *Open and Import* command). This is how the published files are listed in the Ramses Client Application . Ramses will also copy an extra file in the _publish folder: a copy of the Scene as it is at the moment you publish it. According to the information the add-on gets from the Daemon , when publishing items from a specific steps, a few options may be shown.","title":"Publication"},{"location":"components/addons/maya-rubika/#animation-animpipe","text":"Ramses will clean the scene before exporting, removing everything not checked in the options and not included in the Ramses_Publish Maya set. A root controller is added as a parent of the root node of the published animation (a simple curve), which stores needed meta-data and can be used to manipulate the item once imported into another scene.","title":"Animation - AnimPipe"},{"location":"components/addons/maya-rubika/#proxy-geometry-geopipe-and-pgeopipe","text":"Ramses will clean the scene before exporting, removing everything checked in the options and not included in the Ramses_Publish Maya set. It also removes all histories from the exported nodes. And it finally freezes the transformations of all objects by default, except for the ones which names contain the strings defined in the \u201c Don\u2019t freeze tranformations for \u201d field. By default it will also remove all curves and surfaces to publish only meshes, but you can change that in the options if needed. If a curve or a surface is part of the hierarchy (it has child meshes), only the shape node will be removed, but the transform node is kept (effectively transforming the node into a simple group ): this way everything stays as it is without any modification. A root controller is added as a parent of the root node of the published geometry (a simple curve), which stores needed meta-data and can be used to manipulate the item once imported into another scene.","title":"(Proxy) Geometry - GeoPipe and pGeoPipe"},{"location":"components/addons/maya-rubika/#proxy-shaders-pshapipe","text":"Ramses exports the items as an Arnold Scene Source (.ass) file. This pipe is usually used in conjunction with a Proxy Geometry pipe ( pGeoPipe ) which will export the geometry used as a proxy for the Arnold scene .","title":"Proxy shaders  - pShaPipe"},{"location":"components/addons/maya-rubika/#render-and-viewport-shaders-rdrshapipe-and-vpshapipe","text":"Everything except shaders is removed from the scene; the only option is to also remove shaders associated with hidden nodes. Ramses then saves a Maya scene containing only these shaders, and stores associated meta-data to be able to assign these shaders back to the corresponding geometry (see the Import section for more details).","title":"Render and Viewport shaders  - rdrShaPipe and vpShaPipe"},{"location":"components/addons/maya-rubika/#rig-rigpipe","text":"As with other pipes, a few options are available to select what to remove to clean the scene, as well as choosing the default display for the joints. The rig is published in a simple Maya Scene, where everything else has been removed.","title":"Rig - RigPipe"},{"location":"components/addons/maya-rubika/#set-setpipe","text":"Sets are published as a simple Maya Scene where everything else has been removed; all meta-data and links with external assets are kept, so that individual assets can be updated later, as well as the whole set, but individual root controllers of included assets are hidden. The options are the same as with Geometry.","title":"Set - SetPipe"},{"location":"components/addons/maya-rubika/#standard-standard-and-standarda","text":"Standard publication is the default format, where everything not included with the items to be published is simply removed, and the Scene is then published as is, as a simple Maya Scene.","title":"Standard - Standard and StandardA"},{"location":"components/addons/maya-rubika/#import","text":"When items are imported in a Scene, Ramses sorts them in groups at the root of the Scene, depending on their type, group, and where they\u2019re from. Root controllers are colored to make them easily recognizable. The name of the pipe where they came from is kept for future information. It is possible to select several input pipes at once, for example to import both the geometry and the shaders at once; Ramses will automatically handle the import and assign the right shaders to the right geometry in this example.","title":"Import"},{"location":"components/addons/maya-rubika/#animation-animpipe_1","text":"When importing an animation, Ramses can try to remove corresponding existing rigs from the scene before, so that only the baked animation is kept.","title":"Animation - AnimPipe"},{"location":"components/addons/maya-rubika/#proxy-geometry-geopipe-and-pgeopipe_1","text":"Geometry is simply added to the scene, sorted in its corresponding group.","title":"(Proxy) Geometry - GeoPipe and pGeoPipe"},{"location":"components/addons/maya-rubika/#proxy-shaders-pshapipe_1","text":"There is no automatic import of Arnold Scene Sources . You have to manually handle them.","title":"Proxy shaders  - pShaPipe"},{"location":"components/addons/maya-rubika/#render-and-viewport-shaders-rdrshapipe-and-vpshapipe_1","text":"Shaders are imported to the current Scene, and Ramses will automatically assign them to any corresponding selected geometry before the import. Shaders are imported as reference, so there\u2019s no need to update them once imported in a scene; except for switching between viewport shaders and render shaders.","title":"Render and Viewport shaders  - rdrShaPipe and vpShaPipe"},{"location":"components/addons/maya-rubika/#rig-rigpipe_1","text":"Rigs are imported as reference into the current Scene. You can safely import several times the same Rig, as Ramses will correctly handle namespaces so they\u2019re self-contained.","title":"Rig - RigPipe"},{"location":"components/addons/maya-rubika/#set-setpipe_1","text":"Sets are imported the same way as geometry; the root controllers of the included assets are hidden, but they\u2019re still available and colored in the outliner. If you need to modify a set in a specific shot, you\u2019ll want the modified assets to not be updated when the set is updated. To prevent that, just move the corresponding assets outside the hierarchy of the set, or update the assets individually.","title":"Set - SetPipe"},{"location":"components/addons/maya-rubika/#update","text":"When updating, by default Ramses will list only the items which needs to be updated; if for some reason you need to re-import/update another item, uncheck the box at the top of the window. Warning When updating an item, all the children of its root controller will be removed and replaced by the updated item. If you added an object to the hierarchy you want to keep, make sure to move it out before updating and parent it again after the update. It works the same way for assets included in sets: if you need to keep changes you\u2019ve made, move the corresponding assets out of the hierarchy of the set before updating.","title":"Update"},{"location":"components/addons/maya-rubika/#configuration-and-settings","text":"The Add-on automatically publishes and imports items using predefined formats and configurations. These formats can be set to be used between any step in the production pipeline, configured using the Ramses Client Application pipeline editor. An example of a simple pipe as shown in the Ramses Client Application pipeline editor. As you can see in this example, each step can be connected using several formats. The Add-on gets the predefined name of the pipes to export the items in the corresponding formats.","title":"Configuration and settings"},{"location":"components/addons/maya-rubika/#pipe-formats","text":"Here is the list of all the pies the Add-on can handle. Pipe ID Supported file formats Description AnimPipe Alembic (.abc) Character and VFX animation. GeoPipe Alembic (.abc) Maya ASCII (.ma) Maya Binary (.mb) Used to export meshes. pGeoPipe Alembic (.abc) Maya ASCII (.ma) Maya Binary (.mb) The proxy geometry to be replaced on rendering by an Arnold Scene Source or any other higher definition geometry. pShaPipe Arnold Scene Source (.ass) The Arnold scene to be used when rendering to replace proxy geometries by the high definition version. rdrShaPipe Maya Binary (.mb) Render shaders, the final version of the shaders. RigPipe Maya ASCII (.ma) Maya Binary (.mb) Rigged characters and props. SetPipe Maya ASCII (.ma) Maya Binary (.mb) Sets made of other assets. Standard Maya Binary (.mb) A Standard Maya file. StandardA Maya ASCII (.ma) A Standard Maya file. vpShaPipe Maya Binary (.mb) Viewport shaders, a lightweight version of the shaders used for draft display in the viewport. Warning The pipe IDs are case sensitive! GeoPipe will be handled, but not geoPipe . These pipes are described in more details in the sections below. An empty pipe. An unsupported pipe. When a pipe is not configured or uses unsupported formats, or if the Ramses Daemon is not available (because the add-on is not used with the Ramses Client Application ), Ramses will fall back on the Step names to try to export something anyway, using the following rules. Step ID Default output pipe IDs Description MOD (Modeling) GeoPipe pGeoPipe vpShaPipe Geometry Proxy Geometry Viewport Shaders SHADE (Shading) rdrShaPipe pShaPipe pGeoPipe Render Shaders Arnold Scene Proxy Geometry RIG (Rigging) RigPipe Rigging SET (Sets) SetPipe Sets of assets LAY (Layout) Standard A Standard file. LIGHT (Lighting) Standard A Standard file. ANIM (Animation) AnimPipe Baked animation. VFX (Visual Effects)) AnimPipe Baked animation. These default values are defined in the plug-ins/rubika/utils_constants.py source file of the add-on.","title":"Pipe formats"},{"location":"components/addons/maya/","text":"Ramses Maya Add-on Ramses comes with an official add-on for Autodesk Maya , which actually consists in a Python plug-in and a custom shelf packaged in a simple single module. It is an example of an implementation of an add-on using the Ramses Python API but it is already well suited for use in production. As well as all other Ramses Add-ons , the Ramses Maya Add-on includes the main features like versionning, publishing and production tracking with Ramses , but it can be extended to automate your workflow . An example of such an extension is provided as the Ramses Maya Add-on Rubika Flavor . This Add-on can be used with or without being connected to the Ramses Daemon (and the Ramses Client Application ). If it is connected to the Daemon , it will automatically update the production tracking data. Installation Download and unzip the module. To quickly deploy the module on several workstations, choose a shared location; the module can then be shared with all workstations and updated at once. Edit Ramses.mod with a text editor, and replace the path in the first line with the absolute path where you\u2019ve unzipped the module. This is how the content of this file looks like: + Ramses 0.0.1-dev D:\\your\\path\\to\\the\\module PYTHONPATH+:=plug-ins MAYA_SHELF_PATH+:=shelves Do not change anything else in the file. In order to prevent unintended modifications to the Ramses shelf, you can set its read-only attribute: Right click on the shelves/shelf_Ramses.mel file and select Properties . Check the Read only box. Copy Ramses.mod in one of your modules paths e.g. C:\\Users\\User\\Documents\\Maya\\modules . You may need to create the modules folder if it does not exist yet. Repeat this operation on all workstations where you need the module. Restart Maya . Activate the Ramses plug-in from Maya \u2018s plug-in manager. You may need to restart Maya again so that the Ramses shelf is loaded. Features All features of the Ramses add-on are available through the new shelf. They are also registered as Mel and Python Maya commands. All these features are detailed in the next sections. To handle all file naming and sorting, Ramses includes commands to replace all the default Save , Save As and Open functions. Using (almost) only the Ramses commands ensures your files will always be correctly named and in the right location. It also helps Ramses track the production. Feature Maya Command Description Open the Ramses App ramOpenRamses Launches the Ramses Client Application (if its path is correctly set in the settings). Save ramSave Saves and backups the current scene; this save command is also used for production tracking. Comment ramSave Associates a comment wit the current version file. Incremental Save ramSaveVersion Saves and increments the version of the current scene. Update Status ramSaveVersion Saves and increments the version of the current scene, while updating its current production tracking status. Create Preview ramPreview Creates a preview (thumbnail or playblast) of the current scene. Save as ramSaveAs Saves the scene as a new Asset, Shot or General item. Template ramPublishTemplate Saves the current scene as a new template for the current scene. Open / Import ramOpen Opens or imports an Asset, Shot or Template. Retrieve Version ramRetrieveVersion Retrieves and restores a previous version of the current scene. Settings ramSettings Opens the settings dialog for the Ramses Add-on . Save The Ramses Save command starts by saving the current scene, and then runs a few checks before backuping the file into the _versions subfolder: Naming Scheme : checks if the file is correctly named and located. If not, Ramses will run the Save as command instead to ensure the name is correct. Version : checks if the version has to be incremented. That\u2019s the case if the current scene is a restored previous version, or if the latest increment occured before the timeout set in the settings. Depending on these checks, Ramses will automatically associate a comment with the corresponding version to warn of any changes. The Mel and Python corresponding command is: ramSave . It can take two parameters: -set_comment or -sc : boolean used to set a comment associated to the current version file. -comment or -c : string is the comment to be associated if -sc is True . # Python import maya.cmds as cmds # Save the current file cmds.ramSave() # Save the file with a comment (show the comment dialog) cmds.ramSave(set_comment = True) # Save the file with a custom comment cmds.ramSave(sc = True, comment = \"A new comment!\") Comment The Comment command saves the current scene the same way as the Save command, and adds a comment associated with the current version. This comment is displayed with the corresponding version in all version selection dialogs, both in the add-on itself and in the Ramses Client Application , as shown below. A list of versions with a few comments, as shown in the Ramses Maya Add-on . A list of versions with a few comments, as shown in the Ramses Client Application . The Mel and Python corresponding command is: ramSave with its two parameters -sc and c . Read the Save section for details. # Python import maya.cmds as cmds # Save the file with a custom comment cmds.ramSave(sc = True, comment = \"A new comment!\") Incremental Save The Incremental Save runs the save command and forces it to increment to a new version. The Mel and Python corresponding command is: ramSaveVersion with the parameter updateStatus set to False . Read the Update Status section for details. # Python import maya.cmds as cmds # Incremental save cmds.ramSaveVersion( updateStatus=False ) Update Status and Publish The Update Status runs the Incremental Save command and updates the current production status of the current Asset or Shot. A dialog is shown with a few options ot update the status, and to choose to also publish the scene, and create a preview for it. This dialog may differ depending on the use of the Ramses Client Application or not. This is the status dialog when connected to the Ramses Client Application . You can set the new State with the drop down list at the top right; the list of the states is retrieved from the Ramses Daemon . The slider and percentage is used to set a new Completion Ratio . The Comment field is used to update the comment displayed in the production tracking tools and tables of Ramses . All this information is automatically fed to the Ramses Daemon which updates the information for everyone. This is the status dialog when the Ramses Client Application isn't available. When not connected to the Daemon , there is still an option to set a State from a default limited list. Check the Publication button to publish the current scene. Check the Preview button to create a preview (thumbnail or playblast) for the current scene. Read the Preview section for more details. The Update Status and Save button updates the status, publishes the scene, and creates the preview, while the Skip and Just Save button just increments the version and saves. The Mel and Python corresponding command is: ramSaveVersion . It can take three parameters: -updateStatus or -us : boolean . When True (default), the status dialog is shown to let the user update the status. -publish or -p : boolean activates the publication of the scene. -preview or -pv : boolean activates the creation of a preview. # Python import maya.cmds as cmds # Shows the update status dialog cmds.ramSaveVersion() # Incremental save cmds.ramSaveVersion(updateStatus = False) # Publishes the file without showing the status dialog cmds.ramSaveVersion(publish = True, us = False) # Publishes and creates a preview without showing the status dialog cmds.ramSaveVersion(publish = True, preview = True, us = False) Publication The publication of the scene is done in two steps: The Scene is saved in the _published subfolder. This is the folder from which the scene can be imported or referenced into other Assets and Shots. Ramses then calls any potential publish function registered by the pipeline tools or an extension of the Add-On, like the Rubika Flavor . Preview The Preview command allows you to quickly create either an image (thumbnail) or a video (playblast) preview of the current scene, automatically saved in the _preview subfolder. There are a few options to adjust how the image or video are rendered. Ramses auto-selects the first renderable camera in the scene. To always automatically use the right camera, either add it in the render settings (and remove any other unneeded camera), or check the renderable option in the Ouput Settings section of its attributes. The size is a percentage of the resolution of the render settings of the scene. You can then adjust all the render options; checking both Only Polygons and Show Motion Trails allows to hide all animation controllers (if they\u2019re curves as usual) but keep the motion trails. By default, Ramses overwrites any previous image or video for the current scene, except if you set a new comment when making the preview. Note that the Ramses Client Application uses the preview with an empty comment as a thumbnail to display the asset or the shot in the user interface. Ramses also automatically burns useful meta-data in the image, like the frame number, the focal length, the comment, etc. The Mel and Python corresponding command is: ramPreview . # Python import maya.cmds as cmds # Shows the preview dialog cmds.ramPreview() Playblasts When rendering the playblasts, Ramses does not only renders them as usual Maya playblasts: you don\u2019t need to install Quicktime on windows anymore to export videos. Ramses automatically renders the playblasts in a very lightweight MP4 video, crafted especially for reviewing animations, with an intra-frame encoding setting which enables frame by frame playblack on every video player, with great performance. Ramses will also automatically play the video as soon as it\u2019s encoded using ffplay , a very efficient and lightweight video player. It may seem complicated at first as it does not have any User Interface, but it is easily controlled with a few shortcuts: To scroll in the video, [Right Click] anywhere on the video and drag the mouse horizontally. The left border of the frame represents the beginning of the video, while the right border represents the end. You can go forwards and backwards with the [\u2190] and [\u2192] keys of your keyboard by a few frames. Use [\u2191] and [\u2193] to go to the start or the end of the video. Use [Space] to play and pause the video. Use [S] for frame-by-frame playing. Hit [Q] to quickly quit the player. Save As The Save As command can be used to create a new Asset or Shot, or save any other new file, while automatically naming and locating it. Ramses automatically selects the current Project . Select the type of item to save; either an Asset , a Shot or another general item. The list of Steps , Asset Groups and Items is automatically built either by asking the Ramses Daemon if the add-on is used with the Ramses Client Application or by looking into the folder structure, but it is possible to create a new one by just entering a new name. The Resource is used to differenciate several files for the same Asset or Shot. An empty Resource is considered the main and default working file for the item, but you can add any other file by just adding a small resource name. When selecting Other as type, the file will be saved in the main folder of the corresponding step. Read the section about the Ramses Tree for more information. The Mel and Python corresponding command is: ramSaveAs . # Python import maya.cmds as cmds # Shows the save as dialog cmds.ramSaveAs() Template Use the Template command to create a new template file to be used with a specific step. Use the Name to have several templates for the same step. Hint This command just creates the new template, but does not publish it. You still have to publish it using the Update Status command afterwards. Templates can then be used to create new scenes for specific Shots or Assets from the Ramses Client Application . Templates are also available with the Open / Import command of the add-on. The Mel and Python corresponding command is: ramPublishTemplate . # Python import maya.cmds as cmds # Shows the publish template dialog cmds.ramPublishTemplate() Open and Import The Open and Import command automatically finds available scenes from your projects. It is not needed to go down all the hierarchy to select a file to open; if you just select an item and a step, Ramses will automatically open or import the corresponding latest version of the main resource. It works the same way when importing items: you don\u2019t need to go all the way down to select the files you want to import; by selecting just the main file, Ramses will import everything available, or, if you\u2019re using an extension of the Add-on such as the Rubika Flavor , it will pass all the files to the extension so it can automatically manage the import for you. When importing an item, Ramses will also trigger custom import scripts registered by the pipeline tools or an extension of the Maya Add-on , such as the Rubika Flavor . This is one way of automating your workflow, by just registering scripts to be called when publishing and importing items. The Mel and Python corresponding command is: ramOpen . # Python import maya.cmds as cmds # Shows the open/import dialog cmds.ramOpen() Retrieve Version The Retrieve version command can be used to check and restore a previous version of the current scene. The Mel and Python corresponding command is: ramRetrieveVersion . # Python import maya.cmds as cmds # Shows the retrieve version dialog cmds.ramRetrieveVersion() Settings Versionning The Auto-Increment option sets how many time can be spent before Ramses automatically increments the version of the file when saving. Use this option to be sure you can get back to an earlier version of your work even if you forget to increment the version. the Save hotkey option replaces the default \u201c Save Scene \u201d [Ctrl + S] hotkey from Maya by the Save command from Ramses . This is recommended to enable all production tracking features of Ramses and ensure an automatic backup of your work. Note that checking this box does not replace the File/Save menu entry so you can still use the default Maya Save command. the Save as hotkey option replaces the default \u201c Save Scene As \u201d [Ctrl + Shift + S] hotkey from Maya by the Save As command from Ramses . Note that checking this box does not replace the File/Save as... menu entry so you can still use the default Maya Save as command. the Open hotkey option replaces the default \u201c Open Scene\u2026 \u201d [Ctrl + O] hotkey from Maya by the Open command from Ramses*. Note that checking this box does not replace the File/Open Scene... menu entry so you can still use the default Maya Open command. Folders Set the main Ramses folder location . This is mandatory if you\u2019re using the add-on without the Ramses Client Application . Ramses Application Check the Connected box so that the Ramses Add-on will work with the Ramses Client Application for production tracking features. In order for this to work, you\u2019ll need to set the path to the Ramses.exe file inside the installation folder of the Ramses Client Application . The Ramses Daemon Port is the local networking port used by the Ramses Daemon to communicate with the add-ons. It must be the same value as the one set in the Ramses Client Application ; the default value is the birthdate of Karl Marx : 18185 (May, 5th 1818). Development Change the Log Level to adjust how many information is printed in the console to help you debug your scripts when you\u2019re developping using the Ramses Python API or if you\u2019re extending the add-on .","title":"Maya Add-on"},{"location":"components/addons/maya/#ramses-maya-add-on","text":"Ramses comes with an official add-on for Autodesk Maya , which actually consists in a Python plug-in and a custom shelf packaged in a simple single module. It is an example of an implementation of an add-on using the Ramses Python API but it is already well suited for use in production. As well as all other Ramses Add-ons , the Ramses Maya Add-on includes the main features like versionning, publishing and production tracking with Ramses , but it can be extended to automate your workflow . An example of such an extension is provided as the Ramses Maya Add-on Rubika Flavor . This Add-on can be used with or without being connected to the Ramses Daemon (and the Ramses Client Application ). If it is connected to the Daemon , it will automatically update the production tracking data.","title":"Ramses Maya Add-on"},{"location":"components/addons/maya/#installation","text":"Download and unzip the module. To quickly deploy the module on several workstations, choose a shared location; the module can then be shared with all workstations and updated at once. Edit Ramses.mod with a text editor, and replace the path in the first line with the absolute path where you\u2019ve unzipped the module. This is how the content of this file looks like: + Ramses 0.0.1-dev D:\\your\\path\\to\\the\\module PYTHONPATH+:=plug-ins MAYA_SHELF_PATH+:=shelves Do not change anything else in the file. In order to prevent unintended modifications to the Ramses shelf, you can set its read-only attribute: Right click on the shelves/shelf_Ramses.mel file and select Properties . Check the Read only box. Copy Ramses.mod in one of your modules paths e.g. C:\\Users\\User\\Documents\\Maya\\modules . You may need to create the modules folder if it does not exist yet. Repeat this operation on all workstations where you need the module. Restart Maya . Activate the Ramses plug-in from Maya \u2018s plug-in manager. You may need to restart Maya again so that the Ramses shelf is loaded.","title":"Installation"},{"location":"components/addons/maya/#features","text":"All features of the Ramses add-on are available through the new shelf. They are also registered as Mel and Python Maya commands. All these features are detailed in the next sections. To handle all file naming and sorting, Ramses includes commands to replace all the default Save , Save As and Open functions. Using (almost) only the Ramses commands ensures your files will always be correctly named and in the right location. It also helps Ramses track the production. Feature Maya Command Description Open the Ramses App ramOpenRamses Launches the Ramses Client Application (if its path is correctly set in the settings). Save ramSave Saves and backups the current scene; this save command is also used for production tracking. Comment ramSave Associates a comment wit the current version file. Incremental Save ramSaveVersion Saves and increments the version of the current scene. Update Status ramSaveVersion Saves and increments the version of the current scene, while updating its current production tracking status. Create Preview ramPreview Creates a preview (thumbnail or playblast) of the current scene. Save as ramSaveAs Saves the scene as a new Asset, Shot or General item. Template ramPublishTemplate Saves the current scene as a new template for the current scene. Open / Import ramOpen Opens or imports an Asset, Shot or Template. Retrieve Version ramRetrieveVersion Retrieves and restores a previous version of the current scene. Settings ramSettings Opens the settings dialog for the Ramses Add-on .","title":"Features"},{"location":"components/addons/maya/#save","text":"The Ramses Save command starts by saving the current scene, and then runs a few checks before backuping the file into the _versions subfolder: Naming Scheme : checks if the file is correctly named and located. If not, Ramses will run the Save as command instead to ensure the name is correct. Version : checks if the version has to be incremented. That\u2019s the case if the current scene is a restored previous version, or if the latest increment occured before the timeout set in the settings. Depending on these checks, Ramses will automatically associate a comment with the corresponding version to warn of any changes. The Mel and Python corresponding command is: ramSave . It can take two parameters: -set_comment or -sc : boolean used to set a comment associated to the current version file. -comment or -c : string is the comment to be associated if -sc is True . # Python import maya.cmds as cmds # Save the current file cmds.ramSave() # Save the file with a comment (show the comment dialog) cmds.ramSave(set_comment = True) # Save the file with a custom comment cmds.ramSave(sc = True, comment = \"A new comment!\")","title":"Save"},{"location":"components/addons/maya/#comment","text":"The Comment command saves the current scene the same way as the Save command, and adds a comment associated with the current version. This comment is displayed with the corresponding version in all version selection dialogs, both in the add-on itself and in the Ramses Client Application , as shown below. A list of versions with a few comments, as shown in the Ramses Maya Add-on . A list of versions with a few comments, as shown in the Ramses Client Application . The Mel and Python corresponding command is: ramSave with its two parameters -sc and c . Read the Save section for details. # Python import maya.cmds as cmds # Save the file with a custom comment cmds.ramSave(sc = True, comment = \"A new comment!\")","title":"Comment"},{"location":"components/addons/maya/#incremental-save","text":"The Incremental Save runs the save command and forces it to increment to a new version. The Mel and Python corresponding command is: ramSaveVersion with the parameter updateStatus set to False . Read the Update Status section for details. # Python import maya.cmds as cmds # Incremental save cmds.ramSaveVersion( updateStatus=False )","title":"Incremental Save"},{"location":"components/addons/maya/#update-status-and-publish","text":"The Update Status runs the Incremental Save command and updates the current production status of the current Asset or Shot. A dialog is shown with a few options ot update the status, and to choose to also publish the scene, and create a preview for it. This dialog may differ depending on the use of the Ramses Client Application or not. This is the status dialog when connected to the Ramses Client Application . You can set the new State with the drop down list at the top right; the list of the states is retrieved from the Ramses Daemon . The slider and percentage is used to set a new Completion Ratio . The Comment field is used to update the comment displayed in the production tracking tools and tables of Ramses . All this information is automatically fed to the Ramses Daemon which updates the information for everyone. This is the status dialog when the Ramses Client Application isn't available. When not connected to the Daemon , there is still an option to set a State from a default limited list. Check the Publication button to publish the current scene. Check the Preview button to create a preview (thumbnail or playblast) for the current scene. Read the Preview section for more details. The Update Status and Save button updates the status, publishes the scene, and creates the preview, while the Skip and Just Save button just increments the version and saves. The Mel and Python corresponding command is: ramSaveVersion . It can take three parameters: -updateStatus or -us : boolean . When True (default), the status dialog is shown to let the user update the status. -publish or -p : boolean activates the publication of the scene. -preview or -pv : boolean activates the creation of a preview. # Python import maya.cmds as cmds # Shows the update status dialog cmds.ramSaveVersion() # Incremental save cmds.ramSaveVersion(updateStatus = False) # Publishes the file without showing the status dialog cmds.ramSaveVersion(publish = True, us = False) # Publishes and creates a preview without showing the status dialog cmds.ramSaveVersion(publish = True, preview = True, us = False)","title":"Update Status and Publish"},{"location":"components/addons/maya/#publication","text":"The publication of the scene is done in two steps: The Scene is saved in the _published subfolder. This is the folder from which the scene can be imported or referenced into other Assets and Shots. Ramses then calls any potential publish function registered by the pipeline tools or an extension of the Add-On, like the Rubika Flavor .","title":"Publication"},{"location":"components/addons/maya/#preview","text":"The Preview command allows you to quickly create either an image (thumbnail) or a video (playblast) preview of the current scene, automatically saved in the _preview subfolder. There are a few options to adjust how the image or video are rendered. Ramses auto-selects the first renderable camera in the scene. To always automatically use the right camera, either add it in the render settings (and remove any other unneeded camera), or check the renderable option in the Ouput Settings section of its attributes. The size is a percentage of the resolution of the render settings of the scene. You can then adjust all the render options; checking both Only Polygons and Show Motion Trails allows to hide all animation controllers (if they\u2019re curves as usual) but keep the motion trails. By default, Ramses overwrites any previous image or video for the current scene, except if you set a new comment when making the preview. Note that the Ramses Client Application uses the preview with an empty comment as a thumbnail to display the asset or the shot in the user interface. Ramses also automatically burns useful meta-data in the image, like the frame number, the focal length, the comment, etc. The Mel and Python corresponding command is: ramPreview . # Python import maya.cmds as cmds # Shows the preview dialog cmds.ramPreview()","title":"Preview"},{"location":"components/addons/maya/#playblasts","text":"When rendering the playblasts, Ramses does not only renders them as usual Maya playblasts: you don\u2019t need to install Quicktime on windows anymore to export videos. Ramses automatically renders the playblasts in a very lightweight MP4 video, crafted especially for reviewing animations, with an intra-frame encoding setting which enables frame by frame playblack on every video player, with great performance. Ramses will also automatically play the video as soon as it\u2019s encoded using ffplay , a very efficient and lightweight video player. It may seem complicated at first as it does not have any User Interface, but it is easily controlled with a few shortcuts: To scroll in the video, [Right Click] anywhere on the video and drag the mouse horizontally. The left border of the frame represents the beginning of the video, while the right border represents the end. You can go forwards and backwards with the [\u2190] and [\u2192] keys of your keyboard by a few frames. Use [\u2191] and [\u2193] to go to the start or the end of the video. Use [Space] to play and pause the video. Use [S] for frame-by-frame playing. Hit [Q] to quickly quit the player.","title":"Playblasts"},{"location":"components/addons/maya/#save-as","text":"The Save As command can be used to create a new Asset or Shot, or save any other new file, while automatically naming and locating it. Ramses automatically selects the current Project . Select the type of item to save; either an Asset , a Shot or another general item. The list of Steps , Asset Groups and Items is automatically built either by asking the Ramses Daemon if the add-on is used with the Ramses Client Application or by looking into the folder structure, but it is possible to create a new one by just entering a new name. The Resource is used to differenciate several files for the same Asset or Shot. An empty Resource is considered the main and default working file for the item, but you can add any other file by just adding a small resource name. When selecting Other as type, the file will be saved in the main folder of the corresponding step. Read the section about the Ramses Tree for more information. The Mel and Python corresponding command is: ramSaveAs . # Python import maya.cmds as cmds # Shows the save as dialog cmds.ramSaveAs()","title":"Save As"},{"location":"components/addons/maya/#template","text":"Use the Template command to create a new template file to be used with a specific step. Use the Name to have several templates for the same step. Hint This command just creates the new template, but does not publish it. You still have to publish it using the Update Status command afterwards. Templates can then be used to create new scenes for specific Shots or Assets from the Ramses Client Application . Templates are also available with the Open / Import command of the add-on. The Mel and Python corresponding command is: ramPublishTemplate . # Python import maya.cmds as cmds # Shows the publish template dialog cmds.ramPublishTemplate()","title":"Template"},{"location":"components/addons/maya/#open-and-import","text":"The Open and Import command automatically finds available scenes from your projects. It is not needed to go down all the hierarchy to select a file to open; if you just select an item and a step, Ramses will automatically open or import the corresponding latest version of the main resource. It works the same way when importing items: you don\u2019t need to go all the way down to select the files you want to import; by selecting just the main file, Ramses will import everything available, or, if you\u2019re using an extension of the Add-on such as the Rubika Flavor , it will pass all the files to the extension so it can automatically manage the import for you. When importing an item, Ramses will also trigger custom import scripts registered by the pipeline tools or an extension of the Maya Add-on , such as the Rubika Flavor . This is one way of automating your workflow, by just registering scripts to be called when publishing and importing items. The Mel and Python corresponding command is: ramOpen . # Python import maya.cmds as cmds # Shows the open/import dialog cmds.ramOpen()","title":"Open and Import"},{"location":"components/addons/maya/#retrieve-version","text":"The Retrieve version command can be used to check and restore a previous version of the current scene. The Mel and Python corresponding command is: ramRetrieveVersion . # Python import maya.cmds as cmds # Shows the retrieve version dialog cmds.ramRetrieveVersion()","title":"Retrieve Version"},{"location":"components/addons/maya/#settings","text":"","title":"Settings"},{"location":"components/addons/maya/#versionning","text":"The Auto-Increment option sets how many time can be spent before Ramses automatically increments the version of the file when saving. Use this option to be sure you can get back to an earlier version of your work even if you forget to increment the version. the Save hotkey option replaces the default \u201c Save Scene \u201d [Ctrl + S] hotkey from Maya by the Save command from Ramses . This is recommended to enable all production tracking features of Ramses and ensure an automatic backup of your work. Note that checking this box does not replace the File/Save menu entry so you can still use the default Maya Save command. the Save as hotkey option replaces the default \u201c Save Scene As \u201d [Ctrl + Shift + S] hotkey from Maya by the Save As command from Ramses . Note that checking this box does not replace the File/Save as... menu entry so you can still use the default Maya Save as command. the Open hotkey option replaces the default \u201c Open Scene\u2026 \u201d [Ctrl + O] hotkey from Maya by the Open command from Ramses*. Note that checking this box does not replace the File/Open Scene... menu entry so you can still use the default Maya Open command.","title":"Versionning"},{"location":"components/addons/maya/#folders","text":"Set the main Ramses folder location . This is mandatory if you\u2019re using the add-on without the Ramses Client Application .","title":"Folders"},{"location":"components/addons/maya/#ramses-application","text":"Check the Connected box so that the Ramses Add-on will work with the Ramses Client Application for production tracking features. In order for this to work, you\u2019ll need to set the path to the Ramses.exe file inside the installation folder of the Ramses Client Application . The Ramses Daemon Port is the local networking port used by the Ramses Daemon to communicate with the add-ons. It must be the same value as the one set in the Ramses Client Application ; the default value is the birthdate of Karl Marx : 18185 (May, 5th 1818).","title":"Ramses Application"},{"location":"components/addons/maya/#development","text":"Change the Log Level to adjust how many information is printed in the console to help you debug your scripts when you\u2019re developping using the Ramses Python API or if you\u2019re extending the add-on .","title":"Development"},{"location":"components/client/","text":"Ramses Client Application The Ramses Client Application is the heart of the Ramses framework - which has actually many hearts, one per workstation. It is the application which gets and displays data from all other components , the Ramses Add-ons , the Ramses Server and the Ramses Tree It is especially in charge of global administration , project administration , pipeline creation , production tracking and planning . \u25b9 Installation . \u25b9 Settings and overview . \u25b9 Administration . \u25b9 Project administration . \u25b9 Pipeline creation . \u25b9 Production tracking . \u25b9 Planning and schedule .","title":"Introduction"},{"location":"components/client/#ramses-client-application","text":"The Ramses Client Application is the heart of the Ramses framework - which has actually many hearts, one per workstation. It is the application which gets and displays data from all other components , the Ramses Add-ons , the Ramses Server and the Ramses Tree It is especially in charge of global administration , project administration , pipeline creation , production tracking and planning . \u25b9 Installation . \u25b9 Settings and overview . \u25b9 Administration . \u25b9 Project administration . \u25b9 Pipeline creation . \u25b9 Production tracking . \u25b9 Planning and schedule .","title":"Ramses Client Application"},{"location":"components/client/admin/","text":"Administration panel The adminstration panel is accessible only to Administrator users . This is where the global settings of the Ramses framework can be adjusted, and where re-usable elements across all projects (templates, states, applications\u2026) can be managed. \u25b9 User management . \u25b9 Project management . \u25b9 Template step management . \u25b9 Template asset group management . \u25b9 State management . \u25b9 File type management . \u25b9 Application management .","title":"Introduction"},{"location":"components/client/admin/#administration-panel","text":"The adminstration panel is accessible only to Administrator users . This is where the global settings of the Ramses framework can be adjusted, and where re-usable elements across all projects (templates, states, applications\u2026) can be managed. \u25b9 User management . \u25b9 Project management . \u25b9 Template step management . \u25b9 Template asset group management . \u25b9 State management . \u25b9 File type management . \u25b9 Application management .","title":"Administration panel"},{"location":"components/client/applications/","text":"Application management This panel is used to list and manage all the applications Ramses needs to know for the pipeline management. Read the section about the Pipeline for more details about how applications are used. List The list on the left lists all the applications, and you can use the Search field to filter them by name or ID . Use the button to create a new application. The button removes the selected applications from Ramses 1 . You can also use the [DEL] key to remove selected applications. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Ramses comes with a predefined list of applications, but this list is completely customizable: you can remove and add as many applications as you need. Edition Name is the state\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the application, describing it. Executable file is the path to the executable binary used to launch the application. The blue button opens a file selector to change the file path. The Native , Import and Export buttons display three lists of file types to be associated with the application: Native file types are the ones which can be edited (read and written while keeping them editable) with the application. Import file types are files which can be read by the application. Export file types are files which can be written by the application, but losing the ability to edit it later. The button contains a list of available file types, and an entry to quickly create a new file type without having to switch to the file types tab. The button unassigns the selected file types from the application but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in a side docked panel. Read the file type management section for more details about file type edition. Tip The executable file field is optional. To open a specific file, if this field is left empty, Ramses will use the default application from the system instead, so it may be quicker and easier to set the file association at the system level. Using this field can be handy in case you\u2019re using different versions of the same software, or if you want to override default file association, in which case Ramses needs the actual executable file path. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Applications"},{"location":"components/client/applications/#application-management","text":"This panel is used to list and manage all the applications Ramses needs to know for the pipeline management. Read the section about the Pipeline for more details about how applications are used.","title":"Application management"},{"location":"components/client/applications/#list","text":"The list on the left lists all the applications, and you can use the Search field to filter them by name or ID . Use the button to create a new application. The button removes the selected applications from Ramses 1 . You can also use the [DEL] key to remove selected applications. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Ramses comes with a predefined list of applications, but this list is completely customizable: you can remove and add as many applications as you need.","title":"List"},{"location":"components/client/applications/#edition","text":"Name is the state\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the application, describing it. Executable file is the path to the executable binary used to launch the application. The blue button opens a file selector to change the file path. The Native , Import and Export buttons display three lists of file types to be associated with the application: Native file types are the ones which can be edited (read and written while keeping them editable) with the application. Import file types are files which can be read by the application. Export file types are files which can be written by the application, but losing the ability to edit it later. The button contains a list of available file types, and an entry to quickly create a new file type without having to switch to the file types tab. The button unassigns the selected file types from the application but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in a side docked panel. Read the file type management section for more details about file type edition. Tip The executable file field is optional. To open a specific file, if this field is left empty, Ramses will use the default application from the system instead, so it may be quicker and easier to set the file association at the system level. Using this field can be handy in case you\u2019re using different versions of the same software, or if you want to override default file association, in which case Ramses needs the actual executable file path. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/assetgroups/","text":"Asset group settings This panel is used to list and manage all the asset groups of the project. Asset groups are used to help you sort and filter the assets of the project . They\u2019re also used in the Ramses Tree . List The list on the left lists all the asset groups of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each asset group can be displayed. The folder button on the top right corner for each asset group in the list opens the asset group folder in your file explorer. Use the button to create a new asset group (either from scratch or using a template). The button removes the selected asset groups from the project 1 . You can also use the [DEL] key to remove the selected asset groups. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Name is the asset group\u2019s display name. It can\u2019t be changed after the asset group folder has been created . ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the asset group and describing it. The button opens the asset group folder in your file explorer. This folder contains the individual asset folders. Assets contained in the group are listed in the bottom section. The button instantly creates a new asset contained in the current group. The button removes the selected assets from the project 1 . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific asset folder, and the edit button to edit them in a side docked panel. Read the asset settings section for more details about asset edition. Tip To change the name of the asset group, you can temporarilly rename its corresponding folder, change the name in Ramses , and finally rename the folder after the new name. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9","title":"Asset Groups"},{"location":"components/client/assetgroups/#asset-group-settings","text":"This panel is used to list and manage all the asset groups of the project. Asset groups are used to help you sort and filter the assets of the project . They\u2019re also used in the Ramses Tree .","title":"Asset group settings"},{"location":"components/client/assetgroups/#list","text":"The list on the left lists all the asset groups of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each asset group can be displayed. The folder button on the top right corner for each asset group in the list opens the asset group folder in your file explorer. Use the button to create a new asset group (either from scratch or using a template). The button removes the selected asset groups from the project 1 . You can also use the [DEL] key to remove the selected asset groups. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/assetgroups/#edition","text":"Name is the asset group\u2019s display name. It can\u2019t be changed after the asset group folder has been created . ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the asset group and describing it. The button opens the asset group folder in your file explorer. This folder contains the individual asset folders. Assets contained in the group are listed in the bottom section. The button instantly creates a new asset contained in the current group. The button removes the selected assets from the project 1 . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific asset folder, and the edit button to edit them in a side docked panel. Read the asset settings section for more details about asset edition. Tip To change the name of the asset group, you can temporarilly rename its corresponding folder, change the name in Ramses , and finally rename the folder after the new name. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9","title":"Edition"},{"location":"components/client/assets/","text":"Asset settings This panel is used to list and manage all the assets of the project . There is no production tracking from this panel, as it is used only to edit asset settings. List The list on the left lists all the assets of the project, and you can use the Search field to filter them by name or ID . The top selector filters the assets according to their containing group . When changing the size of the rows in the list, more details about each asset can be displayed. The folder button on the top right corner for each asset in the list opens the asset folder in your file explorer. Use the button to create a new asset in the current group. The button removes the selected asset from the project 1 . You can also use the [DEL] key to remove the selected assets. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Name is the asset\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the asset folder has been created . Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the asset and describing it. Tags can be used later to search for specific assets. It is a comma separated list of any text. You can change the Asset group which contains this asset. The button opens the asset folder in your file explorer. This folder contains the individual working files, each in its step subfolder. For more details, read the Ramses Tree section. Hint In the current version of Ramses , when changing the asset group, the asset folder won\u2019t be automatically moved. This may change in a future version. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Assets"},{"location":"components/client/assets/#asset-settings","text":"This panel is used to list and manage all the assets of the project . There is no production tracking from this panel, as it is used only to edit asset settings.","title":"Asset settings"},{"location":"components/client/assets/#list","text":"The list on the left lists all the assets of the project, and you can use the Search field to filter them by name or ID . The top selector filters the assets according to their containing group . When changing the size of the rows in the list, more details about each asset can be displayed. The folder button on the top right corner for each asset in the list opens the asset folder in your file explorer. Use the button to create a new asset in the current group. The button removes the selected asset from the project 1 . You can also use the [DEL] key to remove the selected assets. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/assets/#edition","text":"Name is the asset\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the asset folder has been created . Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the asset and describing it. Tags can be used later to search for specific assets. It is a comma separated list of any text. You can change the Asset group which contains this asset. The button opens the asset folder in your file explorer. This folder contains the individual working files, each in its step subfolder. For more details, read the Ramses Tree section. Hint In the current version of Ramses , when changing the asset group, the asset folder won\u2019t be automatically moved. This may change in a future version. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/filetypes/","text":"File type management This panel is used to list and manage all the file types Ramses needs to know for the pipeline management. Read the section about the Pipeline for more details about how file types are used. List The list on the left lists all the file types, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each file type can be displayed. The file types are sorted by main extension. Use the button to create a new file type. The button removes the selected file types from Ramses 1 . You can also use the [DEL] key to remove selected file types. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Ramses comes with a predefined list of file types, but this list is completely customizable: you can remove and add as many types as you need. Edition Name is the file type\u2019s display name. Main extension is the extension used by default for the file type. You must not include the leading dot . . Comment can be any text associated to the file type, describing it. All extensions is a comma separated list of all the extensions this file can use. You don\u2019t need to include the leading dot. The main extension must be repeated in this field . Previewable can be checked to let Ramses know that the file can be used for previews (it is lightweight and can be displayed by standard players/image viewers). Note A file can have multiple extensions, like JPEG for example which can use jpg , jpeg , or jpe . When it has multiple extensions, this means a specific file can be renamed to change the extension and it will still work exactly the same way. On the contrary, even if two files can be opened with the same software they may not be the same type with different extensions; for example, both .ma and .mb files are Maya files, but they\u2019re two different types anyway; renaming an ma file to mb will break it. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"File Types"},{"location":"components/client/filetypes/#file-type-management","text":"This panel is used to list and manage all the file types Ramses needs to know for the pipeline management. Read the section about the Pipeline for more details about how file types are used.","title":"File type management"},{"location":"components/client/filetypes/#list","text":"The list on the left lists all the file types, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each file type can be displayed. The file types are sorted by main extension. Use the button to create a new file type. The button removes the selected file types from Ramses 1 . You can also use the [DEL] key to remove selected file types. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Ramses comes with a predefined list of file types, but this list is completely customizable: you can remove and add as many types as you need.","title":"List"},{"location":"components/client/filetypes/#edition","text":"Name is the file type\u2019s display name. Main extension is the extension used by default for the file type. You must not include the leading dot . . Comment can be any text associated to the file type, describing it. All extensions is a comma separated list of all the extensions this file can use. You don\u2019t need to include the leading dot. The main extension must be repeated in this field . Previewable can be checked to let Ramses know that the file can be used for previews (it is lightweight and can be displayed by standard players/image viewers). Note A file can have multiple extensions, like JPEG for example which can use jpg , jpeg , or jpe . When it has multiple extensions, this means a specific file can be renamed to change the extension and it will still work exactly the same way. On the contrary, even if two files can be opened with the same software they may not be the same type with different extensions; for example, both .ma and .mb files are Maya files, but they\u2019re two different types anyway; renaming an ma file to mb will break it. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/install/","text":"Application installation The method to install Ramses depends on your operating system; no matter what, it is installed as any other standard application. As soon as the application is installed and running, go to the settings to configure it. Linux On Debian -based distributions , like Ubuntu for example, the easiest way to install the Ramses Client Application is to download and install the .deb package, which will also install all dependencies, using your usual package manager / installer. There are two different version which depend on the version of openSSL (either 1.0 or 1.1 ) and the Qt library (either 5.9 or 5.12 ) available with your distribution; if you have any doubt, the openSSL-1.0_Qt-5.9 version should work on most systems including older ones. Tip In case you don\u2019t need a secure connexion to the server (for a local server for example), the version of openSSL does not really matter. For other distributions or if you have any issues with the .deb package, you can just download and run the .appImage package. There are two versions of the package depending on the version of openSSL (either 1.0 or 1.1 ) available with your distribution. Warning When using the .appImage package, openSSL will not be automatically installed; if you need a secure connexion to the server you will have to install it with your usual package manager. Windows There\u2019s no installer for Windows (yet). To install Ramses , you can just unzip the files in a folder of your choice. If you want Ramses to start with the system, you can just copy a shortcut to Ramses.exe in the startup folder. You can access this startup folder with the shortcut [Win + R] and typing shell:startup . Mac OS TODO","title":"Installation"},{"location":"components/client/install/#application-installation","text":"The method to install Ramses depends on your operating system; no matter what, it is installed as any other standard application. As soon as the application is installed and running, go to the settings to configure it.","title":"Application installation"},{"location":"components/client/install/#linux","text":"On Debian -based distributions , like Ubuntu for example, the easiest way to install the Ramses Client Application is to download and install the .deb package, which will also install all dependencies, using your usual package manager / installer. There are two different version which depend on the version of openSSL (either 1.0 or 1.1 ) and the Qt library (either 5.9 or 5.12 ) available with your distribution; if you have any doubt, the openSSL-1.0_Qt-5.9 version should work on most systems including older ones. Tip In case you don\u2019t need a secure connexion to the server (for a local server for example), the version of openSSL does not really matter. For other distributions or if you have any issues with the .deb package, you can just download and run the .appImage package. There are two versions of the package depending on the version of openSSL (either 1.0 or 1.1 ) available with your distribution. Warning When using the .appImage package, openSSL will not be automatically installed; if you need a secure connexion to the server you will have to install it with your usual package manager.","title":"Linux"},{"location":"components/client/install/#windows","text":"There\u2019s no installer for Windows (yet). To install Ramses , you can just unzip the files in a folder of your choice. If you want Ramses to start with the system, you can just copy a shortcut to Ramses.exe in the startup folder. You can access this startup folder with the shortcut [Win + R] and typing shell:startup .","title":"Windows"},{"location":"components/client/install/#mac-os","text":"TODO","title":"Mac OS"},{"location":"components/client/pipeline/","text":"Pipeline editor The pipeline panel is accessible only to Administrator and Project administrator users . This is where the project pipeline can be created and edited. \u25b9 More details about the pipeline . Overview The pipeline editor has three main areas: the toolbar on top contains a few useful menus and tools, the nodal view is where steps and pipes are connected, and the dock shows the editors (on the right side of the nocal view by default). All docked panels can be undocked (as shown on the picture below) or docked on the other side of the nodal view, by dragging their title bar at the top of the panel. Toolbar On its left side, the toolbar displays a few menus. View Center view resets the zoom of the nodal view to 100% and centers it. Shortcut: [Home] Center selection centers the selected nodes and zooms in on them. Shortcuts: [F] or [.] on the numpad. Select Select all steps selects all the steps in the nodal view. Shortcut: [A] Select children steps selects all the steps following the currently selected one(s). Repeat the command to expand the selection on the child side. Shortcut: [Ctrl + A] Select parent steps selects all the steps preceding the currently selected one(s). Repeat the command to expand the selection on the parent side. Shortcut: [Alt + A] Layout Layout all steps automatically arranges all the nodes using a smart (or not) algorithm to (try to) make the layout clearer. Shortcut: [Shift + L] Layout selected steps will use the same smart (or not) algorithm to (try to) make the layout clearer for the selected nodes. Shortcut: [Alt + L] Step Create new step creates a new step from scratch in the project, and opens a side docked editor to edit its details. Shortcut: [Shift + A] The list of Template steps can be used to quickly create a new step from an template. Remove selected steps removes the selected steps from the project 1 . Shortcut: [Shift + X] Delete selection removes everything selected (steps and pipes) from the project 1 . Shortcut: [Del] Pipe Remove selected pipes removes the selected pipes from the project 1 , disconnected corresponding steps. Shortcut: [Alt + X] On its right side, the toolbar has a few settings available. Center view , Shortcut: [Home] Center selection , Shortcuts: [F] or [.] on the numpad Zoom changes the zoom of the nodal view. Minimum zoom is 25%. The Grid size is used when snapping nodes and defines the snap precision. It is displayed as small crosses in the nodal view when it has focus. Snap to grid will snap the nodes to the grid when moving them, allowing you to perfectly align them, you maniac. Node view In the node view, you can move around all the nodes (steps) by just clicking and dragging them. To select multiple nodes, just click on the background and drag the mouse to use a box selection. You can select both nodes (steps) and connections (pipes); when a node or a pipe is selected, its corresponding editor is shown in the right dock area to let you edit its details. To manipulate the view, use the following shortcuts: [middle click] to pan . [Ctrl + middle click] to zoom . When opening a project from the first time, the nodes may be stacked all together, and you\u2019ll have to sort the spaghettis. To do this quickly, start by using the automatic layout! Select Layout \u25b8 Layout all steps or use the [Shift + L] shortcut. Pipeline edition To create and edit your pipeline, you just have to follow these simple steps: Create new steps , either from a template using the Step menu or from scratch ( [Shift + A] ). When a step is created, it is automatically selected and its editor panel is docked on the right area. Read the project step settings documentation for details about the settings in the step editor. You can also edit the applications (and their file types ) assigned to the steps with the edit button. Connect the steps together: click on the green dot on the right of a step and drag to the blue dot on the left of another step to connect them. The connections goes from left to right (the step on the right is the child). Select the connection (the pipe) to edit it. In the pipe editor, you can check the steps from and to which the connections goes. The Files list contains the file types this pipe can accept. The button contains a list of available types you can assign to the pipe, and an entry to quickly create a pipe type without having to switch to the project pipe types settings panel. The button unassigns the selected pipe types from the pipe but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in another side docked panel. Read the project pipe types settings section for more details about pipe types edition. This list is what is passed to the Ramses Add-Ons when they\u2019re exporting or importing items to and from the connected steps to let them know which kind of data and files they need to use. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9 \u21a9","title":"Pipeline editor"},{"location":"components/client/pipeline/#pipeline-editor","text":"The pipeline panel is accessible only to Administrator and Project administrator users . This is where the project pipeline can be created and edited. \u25b9 More details about the pipeline .","title":"Pipeline editor"},{"location":"components/client/pipeline/#overview","text":"The pipeline editor has three main areas: the toolbar on top contains a few useful menus and tools, the nodal view is where steps and pipes are connected, and the dock shows the editors (on the right side of the nocal view by default). All docked panels can be undocked (as shown on the picture below) or docked on the other side of the nodal view, by dragging their title bar at the top of the panel.","title":"Overview"},{"location":"components/client/pipeline/#toolbar","text":"On its left side, the toolbar displays a few menus. View Center view resets the zoom of the nodal view to 100% and centers it. Shortcut: [Home] Center selection centers the selected nodes and zooms in on them. Shortcuts: [F] or [.] on the numpad. Select Select all steps selects all the steps in the nodal view. Shortcut: [A] Select children steps selects all the steps following the currently selected one(s). Repeat the command to expand the selection on the child side. Shortcut: [Ctrl + A] Select parent steps selects all the steps preceding the currently selected one(s). Repeat the command to expand the selection on the parent side. Shortcut: [Alt + A] Layout Layout all steps automatically arranges all the nodes using a smart (or not) algorithm to (try to) make the layout clearer. Shortcut: [Shift + L] Layout selected steps will use the same smart (or not) algorithm to (try to) make the layout clearer for the selected nodes. Shortcut: [Alt + L] Step Create new step creates a new step from scratch in the project, and opens a side docked editor to edit its details. Shortcut: [Shift + A] The list of Template steps can be used to quickly create a new step from an template. Remove selected steps removes the selected steps from the project 1 . Shortcut: [Shift + X] Delete selection removes everything selected (steps and pipes) from the project 1 . Shortcut: [Del] Pipe Remove selected pipes removes the selected pipes from the project 1 , disconnected corresponding steps. Shortcut: [Alt + X] On its right side, the toolbar has a few settings available. Center view , Shortcut: [Home] Center selection , Shortcuts: [F] or [.] on the numpad Zoom changes the zoom of the nodal view. Minimum zoom is 25%. The Grid size is used when snapping nodes and defines the snap precision. It is displayed as small crosses in the nodal view when it has focus. Snap to grid will snap the nodes to the grid when moving them, allowing you to perfectly align them, you maniac.","title":"Toolbar"},{"location":"components/client/pipeline/#node-view","text":"In the node view, you can move around all the nodes (steps) by just clicking and dragging them. To select multiple nodes, just click on the background and drag the mouse to use a box selection. You can select both nodes (steps) and connections (pipes); when a node or a pipe is selected, its corresponding editor is shown in the right dock area to let you edit its details. To manipulate the view, use the following shortcuts: [middle click] to pan . [Ctrl + middle click] to zoom . When opening a project from the first time, the nodes may be stacked all together, and you\u2019ll have to sort the spaghettis. To do this quickly, start by using the automatic layout! Select Layout \u25b8 Layout all steps or use the [Shift + L] shortcut.","title":"Node view"},{"location":"components/client/pipeline/#pipeline-edition","text":"To create and edit your pipeline, you just have to follow these simple steps: Create new steps , either from a template using the Step menu or from scratch ( [Shift + A] ). When a step is created, it is automatically selected and its editor panel is docked on the right area. Read the project step settings documentation for details about the settings in the step editor. You can also edit the applications (and their file types ) assigned to the steps with the edit button. Connect the steps together: click on the green dot on the right of a step and drag to the blue dot on the left of another step to connect them. The connections goes from left to right (the step on the right is the child). Select the connection (the pipe) to edit it. In the pipe editor, you can check the steps from and to which the connections goes. The Files list contains the file types this pipe can accept. The button contains a list of available types you can assign to the pipe, and an entry to quickly create a pipe type without having to switch to the project pipe types settings panel. The button unassigns the selected pipe types from the pipe but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in another side docked panel. Read the project pipe types settings section for more details about pipe types edition. This list is what is passed to the Ramses Add-Ons when they\u2019re exporting or importing items to and from the connected steps to let them know which kind of data and files they need to use. \u25b9 More details about the pipeline . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9 \u21a9","title":"Pipeline edition"},{"location":"components/client/pipetypes/","text":"Pipe settings This panel is used to list and manage all the different types of pipes of the project which are used by the pipeline . Pipes can also be more easily created, edited and connected from the pipeline editor . Pipe types define the type of files and data which can be used through the pipes between steps . \u25b9 More details about the pipeline . List The list on the left lists all the pipe types of the project, and you can use the Search field to filter them by ID . When changing the size of the rows in the list, more details about each pipes can be displayed. Use the button to create a new pipe. The button removes the selected pipes from the project 1 . You can also use the [DEL] key to remove selected pipes. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It\u2019s this ID which is passed to the Ramses Add-ons to let them know what they need to export or import, along with the other information from the pipe. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the pipe and describing it. Use the Type list to set the type of the step. Read this for more information about step types. You can select one File type to be used through this pipe; if you need several different types, you can use multiple pipes between steps. Read the Pipeline Editor section for more information. You can select one Color space to be used through this pipe; if you need several different color spaces, you can use multiple pipes between steps. Read the Pipeline Editor section for more information. \u25b9 More details about the pipeline . Warning Color spaces are not implemented yet! The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Pipe Types"},{"location":"components/client/pipetypes/#pipe-settings","text":"This panel is used to list and manage all the different types of pipes of the project which are used by the pipeline . Pipes can also be more easily created, edited and connected from the pipeline editor . Pipe types define the type of files and data which can be used through the pipes between steps . \u25b9 More details about the pipeline .","title":"Pipe settings"},{"location":"components/client/pipetypes/#list","text":"The list on the left lists all the pipe types of the project, and you can use the Search field to filter them by ID . When changing the size of the rows in the list, more details about each pipes can be displayed. Use the button to create a new pipe. The button removes the selected pipes from the project 1 . You can also use the [DEL] key to remove selected pipes. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/pipetypes/#edition","text":"ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It\u2019s this ID which is passed to the Ramses Add-ons to let them know what they need to export or import, along with the other information from the pipe. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the pipe and describing it. Use the Type list to set the type of the step. Read this for more information about step types. You can select one File type to be used through this pipe; if you need several different types, you can use multiple pipes between steps. Read the Pipeline Editor section for more information. You can select one Color space to be used through this pipe; if you need several different color spaces, you can use multiple pipes between steps. Read the Pipeline Editor section for more information. \u25b9 More details about the pipeline . Warning Color spaces are not implemented yet! The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/production/","text":"Asset and shot production tracking There are two panels to track the production of the shots and of the assets . From these tables, you can manage the status of all the assets and all the shots of the project, check their completion ratio , how much time was spent for each of them, check the estimation , and finally how late (or not) you are \u2026 \u25b9 More details about production tracking . Overview The production tables have three main areas: the toolbar on top contains a few useful menus and tools, the main table is where shots or assets are listed, and the dock shows the editors (on the right side of the main table by default). Toolbar On its left side, the toolbar displays a few menus and tools. The first button is a selector to let you filter the displayed asset by asset group, or the shots by sequence. Use the Search field to filter the shots or assets according to their names or IDS . View Show time tracking : when checked, information about the time spent (and lateness) will be shown on the colored progress bars in the main table. Show completion : when checked, information about the completion will be shown on the colored progress bars in the main table. Steps Select all shows all the steps in the table. Select none hides all the steps from the table. Select my steps shows only the steps where the current user has some tasks assigned. Use the list of steps to select the ones you want to be shown in the main table. Status Assign User assigns a user to all selected tasks. Change state changes the state of all selected tasks. Changer difficulty changes the difficulty of all selected tasks. Set completion changes the completion ratio of all selected tasks. Tip The Status menu is also availabe as a context menu with the [right click] . Main table From the main table, you can have a look at all the status of all shots or assets, and a summary for steps on the column headers. The progress bar in the step headers goes from red to green when the completion ratio raises. If a second reddish part is shown to the right of the progress bar, it means the production of this step is late; the bigger and the redder it is, the later you are! The first column contains all the information about the shots or the assets (duration, tags, etc.). For all cells, you can open the corresponding folder with the folder button, and if you have enough rights you can edit the corresponding shot, asset or status with the edit button. When changing the size of the rows, more details can be shown for each task, including a preview image. The image is pulled from the _preview subfolder of the shot or the asset folder which you can open with the folder button on the top right corner of the cell. Ramses will get the first PNG or JPG correctly named image from the folder, or any other image if a correct one is not found. Each cell contains information about a task (the combination of an asset or shot and a step). The title of the cell shows the ID of the asset or shot, of the step, and of the current state. The current version of the working file is shown in parenthesis. The button shows the status history of the task. The progress bar can show multiple information. Its color corresponds to the current state color . It shows a combination of the completion ratio and the time spent on the task, depending on the options checked in the View menu. In the following example, the completion is a bit more than 50%, and the color is the default yellow of the Work in progress state. The darker part shows where we should be after the time spent: we're a bit in advance! The darker part shows where we should be after the time spent: we're a bit late. Lateness is shown in red, we're very late... If you uncheck the View \u25b8 Show time tracking option, you can view only the completion ratio: When unchecking the View \u25b8 Show completion option, you can view only the time spent: If it's red, it's not a good sign... Grey would mean we're not late, but red... Click the edit button to edit the current status. Warning Unlike other editors, changes made to status are not saved automatically. Don\u2019t forget to click the apply button. Use the colored state box on the top left to change the current state. Use the completion slider on the top right to change completion ratio. Just click the slider without dragging to precisely edit the value. You can add a comment just below the completion ratio. Changing the difficulty will change the automatic estimation, according to the settings of the corresponding step . Uncheck the Auto checkbox to manually estimate the time you need to finish the task. Once unchecked, the estimation will not be automatically changed anymore if you change the difficulty or if the step settings change. The time spent is automatically updated by Ramses when you edit the status, according to the information it gets from the Ramses Add-ons and the data it gathers from the files if they\u2019re correctly named and located. You can manually override this value. The current version should be automatically set by Ramses if you\u2019re using the Ramses Add-ons ; otherwise you can set it manually. If the task is published and ready to be used and imported in the next step, check the Published box. Again, Ramses should check it automatically if you\u2019ve published the task using the Ramses Add-ons . The bottom box is used to Assign a user to the task. Leave it to All Users to unassign the task. All these settings can be set precisely by the Ramses Add-ons thanks to pipeline automations, and the resulting data can be used for production tracking ) and planning \u25b9 More details about the pipeline . \u25b9 More details about production tracking . \u25b9 More details about planning . The bottom part of the status editor shows the available working , published and preview files. From these three lists, you can open any file by just double-clicking it. You can restore previous versions of working and published files, and the add button in the Work tab can create a new file from a step template (if any template has been published). Files must respect the Ramses naming scheme and folders to be detected and listed here, but you don\u2019t necessarily have to use the Ramses Add-ons , all files will be detected and handled by Ramses . Statistics The Statistics button on the title bar of the application opens a summary of the progress of all steps and the whole project. The top part shows the statistics for the whole project. Time remaining is the count of days before reaching the deadline of the project. Completion is the global completion of the project. Lateness is an estimation of the lateness for all steps; 0% means all is well, a negative lateness means there\u2019s some advance (no, this never happens), a positive value means the production is late. 100% means it took twice the time originally estimated to get to the current completion ratio! The estimation shows how many days are needed, according to all estimations, to finishe the project. The last line shows if you need to assign more days in the schedule (\u201cmissing\u201d) or if you have some extra days planned. The same information is available for all steps.","title":"Asset and shot production tracking"},{"location":"components/client/production/#asset-and-shot-production-tracking","text":"There are two panels to track the production of the shots and of the assets . From these tables, you can manage the status of all the assets and all the shots of the project, check their completion ratio , how much time was spent for each of them, check the estimation , and finally how late (or not) you are \u2026 \u25b9 More details about production tracking .","title":"Asset and shot production tracking"},{"location":"components/client/production/#overview","text":"The production tables have three main areas: the toolbar on top contains a few useful menus and tools, the main table is where shots or assets are listed, and the dock shows the editors (on the right side of the main table by default).","title":"Overview"},{"location":"components/client/production/#toolbar","text":"On its left side, the toolbar displays a few menus and tools. The first button is a selector to let you filter the displayed asset by asset group, or the shots by sequence. Use the Search field to filter the shots or assets according to their names or IDS . View Show time tracking : when checked, information about the time spent (and lateness) will be shown on the colored progress bars in the main table. Show completion : when checked, information about the completion will be shown on the colored progress bars in the main table. Steps Select all shows all the steps in the table. Select none hides all the steps from the table. Select my steps shows only the steps where the current user has some tasks assigned. Use the list of steps to select the ones you want to be shown in the main table. Status Assign User assigns a user to all selected tasks. Change state changes the state of all selected tasks. Changer difficulty changes the difficulty of all selected tasks. Set completion changes the completion ratio of all selected tasks. Tip The Status menu is also availabe as a context menu with the [right click] .","title":"Toolbar"},{"location":"components/client/production/#main-table","text":"From the main table, you can have a look at all the status of all shots or assets, and a summary for steps on the column headers. The progress bar in the step headers goes from red to green when the completion ratio raises. If a second reddish part is shown to the right of the progress bar, it means the production of this step is late; the bigger and the redder it is, the later you are! The first column contains all the information about the shots or the assets (duration, tags, etc.). For all cells, you can open the corresponding folder with the folder button, and if you have enough rights you can edit the corresponding shot, asset or status with the edit button. When changing the size of the rows, more details can be shown for each task, including a preview image. The image is pulled from the _preview subfolder of the shot or the asset folder which you can open with the folder button on the top right corner of the cell. Ramses will get the first PNG or JPG correctly named image from the folder, or any other image if a correct one is not found. Each cell contains information about a task (the combination of an asset or shot and a step). The title of the cell shows the ID of the asset or shot, of the step, and of the current state. The current version of the working file is shown in parenthesis. The button shows the status history of the task. The progress bar can show multiple information. Its color corresponds to the current state color . It shows a combination of the completion ratio and the time spent on the task, depending on the options checked in the View menu. In the following example, the completion is a bit more than 50%, and the color is the default yellow of the Work in progress state. The darker part shows where we should be after the time spent: we're a bit in advance! The darker part shows where we should be after the time spent: we're a bit late. Lateness is shown in red, we're very late... If you uncheck the View \u25b8 Show time tracking option, you can view only the completion ratio: When unchecking the View \u25b8 Show completion option, you can view only the time spent: If it's red, it's not a good sign... Grey would mean we're not late, but red... Click the edit button to edit the current status. Warning Unlike other editors, changes made to status are not saved automatically. Don\u2019t forget to click the apply button. Use the colored state box on the top left to change the current state. Use the completion slider on the top right to change completion ratio. Just click the slider without dragging to precisely edit the value. You can add a comment just below the completion ratio. Changing the difficulty will change the automatic estimation, according to the settings of the corresponding step . Uncheck the Auto checkbox to manually estimate the time you need to finish the task. Once unchecked, the estimation will not be automatically changed anymore if you change the difficulty or if the step settings change. The time spent is automatically updated by Ramses when you edit the status, according to the information it gets from the Ramses Add-ons and the data it gathers from the files if they\u2019re correctly named and located. You can manually override this value. The current version should be automatically set by Ramses if you\u2019re using the Ramses Add-ons ; otherwise you can set it manually. If the task is published and ready to be used and imported in the next step, check the Published box. Again, Ramses should check it automatically if you\u2019ve published the task using the Ramses Add-ons . The bottom box is used to Assign a user to the task. Leave it to All Users to unassign the task. All these settings can be set precisely by the Ramses Add-ons thanks to pipeline automations, and the resulting data can be used for production tracking ) and planning \u25b9 More details about the pipeline . \u25b9 More details about production tracking . \u25b9 More details about planning . The bottom part of the status editor shows the available working , published and preview files. From these three lists, you can open any file by just double-clicking it. You can restore previous versions of working and published files, and the add button in the Work tab can create a new file from a step template (if any template has been published). Files must respect the Ramses naming scheme and folders to be detected and listed here, but you don\u2019t necessarily have to use the Ramses Add-ons , all files will be detected and handled by Ramses .","title":"Main table"},{"location":"components/client/production/#statistics","text":"The Statistics button on the title bar of the application opens a summary of the progress of all steps and the whole project. The top part shows the statistics for the whole project. Time remaining is the count of days before reaching the deadline of the project. Completion is the global completion of the project. Lateness is an estimation of the lateness for all steps; 0% means all is well, a negative lateness means there\u2019s some advance (no, this never happens), a positive value means the production is late. 100% means it took twice the time originally estimated to get to the current completion ratio! The estimation shows how many days are needed, according to all estimations, to finishe the project. The last line shows if you need to assign more days in the schedule (\u201cmissing\u201d) or if you have some extra days planned. The same information is available for all steps.","title":"Statistics"},{"location":"components/client/project/","text":"Project settings panel The project panel is accessible only to Administrator and Project administrator users . This is where the global settings of the current project can be adjusted. The project configured there is the one set with the selector on the title bar . \u25b9 The first tab shows the project settings; the options are described in the Project management section. \u25b9 Steps . \u25b9 Pipe Types . \u25b9 Asset groups . \u25b9 Assets . \u25b9 Sequences . \u25b9 Shots .","title":"Introduction"},{"location":"components/client/project/#project-settings-panel","text":"The project panel is accessible only to Administrator and Project administrator users . This is where the global settings of the current project can be adjusted. The project configured there is the one set with the selector on the title bar . \u25b9 The first tab shows the project settings; the options are described in the Project management section. \u25b9 Steps . \u25b9 Pipe Types . \u25b9 Asset groups . \u25b9 Assets . \u25b9 Sequences . \u25b9 Shots .","title":"Project settings panel"},{"location":"components/client/projects/","text":"Project management This panel is used to list and manage all projects of Ramses . List The list on the left lists all the projects, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each project can be displayed. The folder button on the top right corner for each project in the list opens the project folder in your file explorer. Use the button to create a new project. The button removes the selected projects from Ramses 1 . You can also use the [DEL] key to remove selected projects. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Name is the project\u2019s display name and can be changed any time. ID is the unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed after the project folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the project. Resolution is the width and height of the final video, in pixels. The first button allows you to quickly select from a list of common resolutions. Framerate is the framerate of the final video, in frames per second. Use the first button to quickly select it from a list of common framerates. Deadline is the date at which the project must be finished and delivered. You can change the folder where the project files are stored. Leave the field empty to set back the default folder inside the Ramses Tree . The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Use the Users list to assign and unassign users to the project. The button contains a list of available users, and an entry to quickly create a new user without having to switch to the users tab. The button unassigns the selected users from the project but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific user folder, and the edit button to edit them in a side docked panel. Read the user management section for more details about user edition. \u25b9 More details about Projects and Ramses . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Projects"},{"location":"components/client/projects/#project-management","text":"This panel is used to list and manage all projects of Ramses .","title":"Project management"},{"location":"components/client/projects/#list","text":"The list on the left lists all the projects, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each project can be displayed. The folder button on the top right corner for each project in the list opens the project folder in your file explorer. Use the button to create a new project. The button removes the selected projects from Ramses 1 . You can also use the [DEL] key to remove selected projects. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/projects/#edition","text":"Name is the project\u2019s display name and can be changed any time. ID is the unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed after the project folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the project. Resolution is the width and height of the final video, in pixels. The first button allows you to quickly select from a list of common resolutions. Framerate is the framerate of the final video, in frames per second. Use the first button to quickly select it from a list of common framerates. Deadline is the date at which the project must be finished and delivered. You can change the folder where the project files are stored. Leave the field empty to set back the default folder inside the Ramses Tree . The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Use the Users list to assign and unassign users to the project. The button contains a list of available users, and an entry to quickly create a new user without having to switch to the users tab. The button unassigns the selected users from the project but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific user folder, and the edit button to edit them in a side docked panel. Read the user management section for more details about user edition. \u25b9 More details about Projects and Ramses . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/schedule/","text":"Schedule and planning You can use the schedule panel to plan the production, per user and per step. \u25b9 More details about production planning . Note A future version of the application will include a more general schedule, to let you quickly select time ranges for each step, defining a starting and ending date for each, without having to assign tasks to individual users. Overview The schedule table has two main areas: the toolbar on top contains a few useful menus and tools, and the main table is where you plan the production. It is useful to keep the statistics side panel at hand when planning the production. Toolbar On its left side, the toolbar displays a few menus and tools. Users Me : shows only the current user in the table. Select all : shows all the users assigned to this project in the table. Select none : hides all the users from the table. The User list can be used to select the users to show in the table. Days Select the days of the week to be shown in the table. This setting is kept across sessions, but it is a local setting, it is not shared with other workstations. Step Comment\u2026 adds a comment to the selected table cells (schedule entries). Assign (un)assigns a step to the selected celles (schedule entries). Go to date scrolls the table to a specific date. Today scrolls the table to the current date. Deadline scrolls the table to the deadline of the current project. \u25c0 Previous month scrolls the table to the previous month. Next month \u25b6 : I think you can guess what this button does. The right side of the toolbar shows the time remaining before reaching the deadline of the project and lets you define the time range of the table. Tip The Step menu, to assign steps and set comments, is also availabe as a context menu with the [right click] on the table cells. Main table Each column represents a day, lines represent users. There are two lines per user to allow you to assign tasks only to half of a day. Columns in the past are darker than columns in the future, the current day is shown in purple in the header; the project deadline is shown in red. To help you differenciate weeks, an alternate grey is used for to separate them. You can hide the days of the week which are not working days (a.k.a. Weekends) using the Days menu. Planning the project with the table is very quick and easy: Click on any cell to assign a step to the corresponding user and date. Use the context menu with [Right click] to assign steps to multiple users and multiple days at once. You can also add a comment to selected schedule entries; comments are shown when changing the size of the rows. There are a lot of different ways to select multiple cells in the table: [Left click + Drag] to quickly select contiguous cells. [Shift + Left click] to select the range between the active (last selected) cell and another cell. [Ctrl + Left click] to select individual cells. These three methods can be combined: for example, [Ctrl + Left click + Drag] to quickly select different groups of cells. To check how many days you have to assign (or how many extra days you have already assigned) according to the estimations, use the Statistics panel. Statistics The Statistics button on the title bar of the application opens a summary of the progress of all steps and the whole project. For the project and each step, you can read the total number of days you have to assign (the estimation ), and for each step, you can read how many days have been assigned and how many are missing or how many extra days are assigned.","title":"Schedule and planning"},{"location":"components/client/schedule/#schedule-and-planning","text":"You can use the schedule panel to plan the production, per user and per step. \u25b9 More details about production planning . Note A future version of the application will include a more general schedule, to let you quickly select time ranges for each step, defining a starting and ending date for each, without having to assign tasks to individual users.","title":"Schedule and planning"},{"location":"components/client/schedule/#overview","text":"The schedule table has two main areas: the toolbar on top contains a few useful menus and tools, and the main table is where you plan the production. It is useful to keep the statistics side panel at hand when planning the production.","title":"Overview"},{"location":"components/client/schedule/#toolbar","text":"On its left side, the toolbar displays a few menus and tools. Users Me : shows only the current user in the table. Select all : shows all the users assigned to this project in the table. Select none : hides all the users from the table. The User list can be used to select the users to show in the table. Days Select the days of the week to be shown in the table. This setting is kept across sessions, but it is a local setting, it is not shared with other workstations. Step Comment\u2026 adds a comment to the selected table cells (schedule entries). Assign (un)assigns a step to the selected celles (schedule entries). Go to date scrolls the table to a specific date. Today scrolls the table to the current date. Deadline scrolls the table to the deadline of the current project. \u25c0 Previous month scrolls the table to the previous month. Next month \u25b6 : I think you can guess what this button does. The right side of the toolbar shows the time remaining before reaching the deadline of the project and lets you define the time range of the table. Tip The Step menu, to assign steps and set comments, is also availabe as a context menu with the [right click] on the table cells.","title":"Toolbar"},{"location":"components/client/schedule/#main-table","text":"Each column represents a day, lines represent users. There are two lines per user to allow you to assign tasks only to half of a day. Columns in the past are darker than columns in the future, the current day is shown in purple in the header; the project deadline is shown in red. To help you differenciate weeks, an alternate grey is used for to separate them. You can hide the days of the week which are not working days (a.k.a. Weekends) using the Days menu. Planning the project with the table is very quick and easy: Click on any cell to assign a step to the corresponding user and date. Use the context menu with [Right click] to assign steps to multiple users and multiple days at once. You can also add a comment to selected schedule entries; comments are shown when changing the size of the rows. There are a lot of different ways to select multiple cells in the table: [Left click + Drag] to quickly select contiguous cells. [Shift + Left click] to select the range between the active (last selected) cell and another cell. [Ctrl + Left click] to select individual cells. These three methods can be combined: for example, [Ctrl + Left click + Drag] to quickly select different groups of cells. To check how many days you have to assign (or how many extra days you have already assigned) according to the estimations, use the Statistics panel.","title":"Main table"},{"location":"components/client/schedule/#statistics","text":"The Statistics button on the title bar of the application opens a summary of the progress of all steps and the whole project. For the project and each step, you can read the total number of days you have to assign (the estimation ), and for each step, you can read how many days have been assigned and how many are missing or how many extra days are assigned.","title":"Statistics"},{"location":"components/client/sequences/","text":"Sequence settings This panel is used to list and manage all the sequences of the project. Sequences are used to help you sort and filter the shots of the project . They\u2019re not used in the Ramses Tree . List The list on the left lists all the sequences of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each sequence can be displayed. Use the button to create a new sequence. The button removes the selected sequences from the project 1 . You can also use the [DEL] key to remove the selected sequences. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Name is the sequence\u2019s display name. ID is the unique identifier. It is usually just a number, possibily with a simple prefix. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated with the sequence and describing it. Shots contained in the sequence are listed in the bottom section. The button instantly creates a new shot contained in the current sequence. The button removes the selected shots from the project 1 . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific shot folder, and the edit button to edit them in a side docked panel. Read the shot settings section for more details about shot edition. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9","title":"Sequences"},{"location":"components/client/sequences/#sequence-settings","text":"This panel is used to list and manage all the sequences of the project. Sequences are used to help you sort and filter the shots of the project . They\u2019re not used in the Ramses Tree .","title":"Sequence settings"},{"location":"components/client/sequences/#list","text":"The list on the left lists all the sequences of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each sequence can be displayed. Use the button to create a new sequence. The button removes the selected sequences from the project 1 . You can also use the [DEL] key to remove the selected sequences. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/sequences/#edition","text":"Name is the sequence\u2019s display name. ID is the unique identifier. It is usually just a number, possibily with a simple prefix. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated with the sequence and describing it. Shots contained in the sequence are listed in the bottom section. The button instantly creates a new shot contained in the current sequence. The button removes the selected shots from the project 1 . You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific shot folder, and the edit button to edit them in a side docked panel. Read the shot settings section for more details about shot edition. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9 \u21a9","title":"Edition"},{"location":"components/client/settings/","text":"Application settings and overview The home screen, shown when starting the application. When running the application for the first time, you need to go to the settings first to configure it. Overview Title bar The title bar show the main buttons to switch the panels on the left, and the visibility buttons on the right. Click and drag an empty space of the title bar to move the whole window. In the middle of the title bar is the selector where you can select the project you\u2019re currently working on. The buttons on the right section change the size and visibility of the window. Minimize Maximize Hide. The application will not close but sit in the system tray. Quit Once logged in, the left section shows the buttons for the different panels. Which panels and buttons are available depends on the role of the current user , and there may be fewer buttons than on the picture above. Administration panel ( Administrators only). Project settings panel ( Project administrators and Administrators only). Pipeline editor panel ( Project administrators and Administrators only). Assets table panel. Shots table panel. Schedule panel. Statistics panel. Status bar The status bar at the bottom of the window displays temporary feedback, useful messages and help on its left section. On the right section, there are a few secondary buttons. The reload button updates all data from the server. You should not need to click this button too often as the data is automatically and regularly pulled from the server. The console button shows the console panel (see the next section) where Ramses logs useful information for debugging or for developpers. Errors and warnings are also logged there. | A warning or an error button may be shown next, when there are some issues. Click on the button to show the latest logs and learn what\u2019s wrong; a clear button is available on the popup to remove the warning. The online / offline button can be used to switch between online and offline mode. Going online may need to input your password again. The user button (which shows your user name, or Guest if you\u2019re not logged in yet) gives access to a few user options (see below). The settings button leads you to the settings of the application. The help button shows a small menu with useful shortcuts. The help menu Help leads you to this documentation. About shows a popup window with a few information about Ramses and other legal information. Bug Report is a shortcut to the bug report form , in case you have any feedback to share about the application. Chat is a shortcut to our chatroom , currently hosted by a Discord Server , where you can get support for Ramses and have a chat with other users. About Qt shows a popup window with a few information about Qt , the free and open source C++ framework used to develop the application. The user menu The User folder button opens your folder in your file explorer. The Profile button shows the user profile panel when you can update your information and password. The Log out button logs you out and sets the application to offline mode. Console The console panel is where Ramses logs useful information for debugging or for developpers. Errors and warnings are also logged there, respectively in red and yellow. As many other Ramses panel, the console is a docked panel which can be undocked or docked both on the right and left side of Ramses by just clicking its title and moving it. User Profile Use the user menu at the bottom right of the window (the button with your ID) to access your profile settings. Except for the password, there\u2019s no need to validate any change; changes are saved instantly. Name is your display name and can be changed any time (although it\u2019s not really advisable). ID is your unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed once your user folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to your user. It is public. The Current role can never be changed by the user itself, and has to be changed by an administrator. To update your password, input your Current password and repeat your New password twice. Don\u2019t forget to click the Change password button to validate! You can change the folder where your personnal files are stored. Leave the field empty to set back the default folder. The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Settings To open the settings panel, click on the settings button at the bottom right corner of the window. Note These settings are local settings, and will not be shared with other workstations. Each workstation, (actually, each session on the system) has its own settings. The purple button will restore all default settings. Use the blue close button to close the settings. They are automatically saved. Appearance The first tab shows the appearance settings; you can change these as you wish. Ramses Data The second tab defines how Ramses will store the data on the filesystem, and has a few display option for the data. Ramses main folder defines the location of the main Ramses root folder, the one which will contain the Config , Projects and Users subfolders, as defined by the Ramses Tree . By default, this folder is located in your user folder. The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Note Project folders and user folders can be individually changed later to be outside of this main Ramses root folder, for example if you need to locate specific projects in other arbitrary specific folders. But Ramses still needs this main folder to be defined, at least to store some configuration files. Date format defines how dates will be displayed in the user interface. It does not change anything about how the data is actually stored in the database and files. Time format defines how times will be displayed in the user interface. It does not change anything about how the data is actually stored in the database and files. Server The third tab configures how the application will connect to the server. Server address must be the complete URL to the server. Secure connexion must be checked in case you want to encrypt the data sent to and recieved from the server. Your server must be compatible with SSL and have a valid certificate. Update every X minutes defines how often the application will automatically update all its data from the server. In order to keep the application very lightweight and the server very light and easy to install on all kind of computers, the local data is not updated in realtime (there\u2019s no pushing from the server), but the application will regularly pull changes from the server. This value does not need to be too low, as Ramses does not really need to be perfectly up-to-date every second. The default value is 2 minutes . Server timeout defines how long the application will wait for the server response when getting or posting data. If this timeout expires, the server will be considered not working correctly and the application will switch to offline mode. You may raise a bit this value if your server or your connexion are particularly slow. The default value is 3 seconds . Daemon The Daemon is a background service, a small local server, which is started with the application and is in charge of communications with the Ramses Add-ons . Listenning on port defines the local port used by the Daemon to receive connections and requests from the Ramses Add-ons and other services. You may change this value if it conflicts with other applications; in this case, you\u2019ll have to change it in the settings of all the Ramses Add-ons too. The default value is 18185 1 . Click the Restart Daemon button when changing the listenning port to apply the change. This value has been chosen after the birth date of Karl Marx , 5 May 1818. \u21a9","title":"Settings"},{"location":"components/client/settings/#application-settings-and-overview","text":"The home screen, shown when starting the application. When running the application for the first time, you need to go to the settings first to configure it.","title":"Application settings and overview"},{"location":"components/client/settings/#overview","text":"","title":"Overview"},{"location":"components/client/settings/#title-bar","text":"The title bar show the main buttons to switch the panels on the left, and the visibility buttons on the right. Click and drag an empty space of the title bar to move the whole window. In the middle of the title bar is the selector where you can select the project you\u2019re currently working on. The buttons on the right section change the size and visibility of the window. Minimize Maximize Hide. The application will not close but sit in the system tray. Quit Once logged in, the left section shows the buttons for the different panels. Which panels and buttons are available depends on the role of the current user , and there may be fewer buttons than on the picture above. Administration panel ( Administrators only). Project settings panel ( Project administrators and Administrators only). Pipeline editor panel ( Project administrators and Administrators only). Assets table panel. Shots table panel. Schedule panel. Statistics panel.","title":"Title bar"},{"location":"components/client/settings/#status-bar","text":"The status bar at the bottom of the window displays temporary feedback, useful messages and help on its left section. On the right section, there are a few secondary buttons. The reload button updates all data from the server. You should not need to click this button too often as the data is automatically and regularly pulled from the server. The console button shows the console panel (see the next section) where Ramses logs useful information for debugging or for developpers. Errors and warnings are also logged there. | A warning or an error button may be shown next, when there are some issues. Click on the button to show the latest logs and learn what\u2019s wrong; a clear button is available on the popup to remove the warning. The online / offline button can be used to switch between online and offline mode. Going online may need to input your password again. The user button (which shows your user name, or Guest if you\u2019re not logged in yet) gives access to a few user options (see below). The settings button leads you to the settings of the application. The help button shows a small menu with useful shortcuts.","title":"Status bar"},{"location":"components/client/settings/#the-help-menu","text":"Help leads you to this documentation. About shows a popup window with a few information about Ramses and other legal information. Bug Report is a shortcut to the bug report form , in case you have any feedback to share about the application. Chat is a shortcut to our chatroom , currently hosted by a Discord Server , where you can get support for Ramses and have a chat with other users. About Qt shows a popup window with a few information about Qt , the free and open source C++ framework used to develop the application.","title":"The help menu"},{"location":"components/client/settings/#the-user-menu","text":"The User folder button opens your folder in your file explorer. The Profile button shows the user profile panel when you can update your information and password. The Log out button logs you out and sets the application to offline mode.","title":"The user menu"},{"location":"components/client/settings/#console","text":"The console panel is where Ramses logs useful information for debugging or for developpers. Errors and warnings are also logged there, respectively in red and yellow. As many other Ramses panel, the console is a docked panel which can be undocked or docked both on the right and left side of Ramses by just clicking its title and moving it.","title":"Console"},{"location":"components/client/settings/#user-profile","text":"Use the user menu at the bottom right of the window (the button with your ID) to access your profile settings. Except for the password, there\u2019s no need to validate any change; changes are saved instantly. Name is your display name and can be changed any time (although it\u2019s not really advisable). ID is your unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed once your user folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to your user. It is public. The Current role can never be changed by the user itself, and has to be changed by an administrator. To update your password, input your Current password and repeat your New password twice. Don\u2019t forget to click the Change password button to validate! You can change the folder where your personnal files are stored. Leave the field empty to set back the default folder. The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer.","title":"User Profile"},{"location":"components/client/settings/#settings","text":"To open the settings panel, click on the settings button at the bottom right corner of the window. Note These settings are local settings, and will not be shared with other workstations. Each workstation, (actually, each session on the system) has its own settings. The purple button will restore all default settings. Use the blue close button to close the settings. They are automatically saved.","title":"Settings"},{"location":"components/client/settings/#appearance","text":"The first tab shows the appearance settings; you can change these as you wish.","title":"Appearance"},{"location":"components/client/settings/#ramses-data","text":"The second tab defines how Ramses will store the data on the filesystem, and has a few display option for the data. Ramses main folder defines the location of the main Ramses root folder, the one which will contain the Config , Projects and Users subfolders, as defined by the Ramses Tree . By default, this folder is located in your user folder. The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Note Project folders and user folders can be individually changed later to be outside of this main Ramses root folder, for example if you need to locate specific projects in other arbitrary specific folders. But Ramses still needs this main folder to be defined, at least to store some configuration files. Date format defines how dates will be displayed in the user interface. It does not change anything about how the data is actually stored in the database and files. Time format defines how times will be displayed in the user interface. It does not change anything about how the data is actually stored in the database and files.","title":"Ramses Data"},{"location":"components/client/settings/#server","text":"The third tab configures how the application will connect to the server. Server address must be the complete URL to the server. Secure connexion must be checked in case you want to encrypt the data sent to and recieved from the server. Your server must be compatible with SSL and have a valid certificate. Update every X minutes defines how often the application will automatically update all its data from the server. In order to keep the application very lightweight and the server very light and easy to install on all kind of computers, the local data is not updated in realtime (there\u2019s no pushing from the server), but the application will regularly pull changes from the server. This value does not need to be too low, as Ramses does not really need to be perfectly up-to-date every second. The default value is 2 minutes . Server timeout defines how long the application will wait for the server response when getting or posting data. If this timeout expires, the server will be considered not working correctly and the application will switch to offline mode. You may raise a bit this value if your server or your connexion are particularly slow. The default value is 3 seconds .","title":"Server"},{"location":"components/client/settings/#daemon","text":"The Daemon is a background service, a small local server, which is started with the application and is in charge of communications with the Ramses Add-ons . Listenning on port defines the local port used by the Daemon to receive connections and requests from the Ramses Add-ons and other services. You may change this value if it conflicts with other applications; in this case, you\u2019ll have to change it in the settings of all the Ramses Add-ons too. The default value is 18185 1 . Click the Restart Daemon button when changing the listenning port to apply the change. This value has been chosen after the birth date of Karl Marx , 5 May 1818. \u21a9","title":"Daemon"},{"location":"components/client/shots/","text":"Shot settings This panel is used to list and manage all the shots of the project . There is no production tracking from this panel, as it is used only to edit shot settings. List The list on the left lists all the shots of the project, and you can use the Search field to filter them by name or ID . The top selector filters the shots according to their containing sequence . When changing the size of the rows in the list, more details about each shot can be displayed. The folder button on the top right corner for each shot in the list opens the shot folder in your file explorer. Use the button to create a new shot in the current sequence. The button removes the selected shots from the project 1 . You can also use the [DEL] key to remove the selected shots. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Name is the shot\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the shot folder has been created . It usually is just a number. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the shot and describing it. The Duration of the shot can be set either in seconds or frames. Ramses uses the project framerate to update the other value. You can change the Sequence which contains this shot. The button opens the shot folder in your file explorer. This folder contains the individual working files, each in its step subfolder. For more details, read the Ramses Tree section. Use the Asset list to assign assets to the shots. The top selector filters the assets according to their containing group . The button contains the list of available assets for the current group. There\u2019s also an entry to quickly create a new asset without having to switch to the asset management panel . The button unassigns the selected assets from the shot, but they\u2019re not removed from the project. You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific asset folder, and the edit button to edit them in a side docked panel. Read the asset settings section for more details about asset edition. The list of assets as long as the duration can be used to automatically multiply the estimation of the shot. Read the planning section for more information about estimations, and the step management section to learn how to configure steps and automatic default estimations. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Shots"},{"location":"components/client/shots/#shot-settings","text":"This panel is used to list and manage all the shots of the project . There is no production tracking from this panel, as it is used only to edit shot settings.","title":"Shot settings"},{"location":"components/client/shots/#list","text":"The list on the left lists all the shots of the project, and you can use the Search field to filter them by name or ID . The top selector filters the shots according to their containing sequence . When changing the size of the rows in the list, more details about each shot can be displayed. The folder button on the top right corner for each shot in the list opens the shot folder in your file explorer. Use the button to create a new shot in the current sequence. The button removes the selected shots from the project 1 . You can also use the [DEL] key to remove the selected shots. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/shots/#edition","text":"Name is the shot\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the shot folder has been created . It usually is just a number. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the shot and describing it. The Duration of the shot can be set either in seconds or frames. Ramses uses the project framerate to update the other value. You can change the Sequence which contains this shot. The button opens the shot folder in your file explorer. This folder contains the individual working files, each in its step subfolder. For more details, read the Ramses Tree section. Use the Asset list to assign assets to the shots. The top selector filters the assets according to their containing group . The button contains the list of available assets for the current group. There\u2019s also an entry to quickly create a new asset without having to switch to the asset management panel . The button unassigns the selected assets from the shot, but they\u2019re not removed from the project. You can also use the [DEL] key. From the list, you can use the folder button to quickly open a specific asset folder, and the edit button to edit them in a side docked panel. Read the asset settings section for more details about asset edition. The list of assets as long as the duration can be used to automatically multiply the estimation of the shot. Read the planning section for more information about estimations, and the step management section to learn how to configure steps and automatic default estimations. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/states/","text":"State management This panel is used to list and manage all the states used by Ramses for production tracking. The states are shared by all projects . The list of available states can be completely customized. Read the section about Production tracking for more details about states and status. List The list on the left lists all the states, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each state can be displayed. Use the button to create a new state. The button removes the selected states from Ramses 1 . You can also use the [DEL] key to remove selected states. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . A few states can\u2019t be removed as they are needed by Ramses automations (but they can still be customized, only their ID can\u2019t change): NO, STB, TODO, WIP, OK . Edition Name is the state\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). It is also used in the user interface when there is too little room to use the name. Comment can be any text associated to the state. You can use it to describe the state and explain what it means. This comment has nothing to do with the actual production status of shots and assets, it is linked to the state itself and just describes it. The color is used to display the states in the user interface and easily differenciate them in lists. Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. The completion ratio is used to automatically set a default value to the completion of the tasks when their state changes. This task completion ratio can then be adjusted by the user for each individual task. \u25b9 More details about Production tracking and the states . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"States"},{"location":"components/client/states/#state-management","text":"This panel is used to list and manage all the states used by Ramses for production tracking. The states are shared by all projects . The list of available states can be completely customized. Read the section about Production tracking for more details about states and status.","title":"State management"},{"location":"components/client/states/#list","text":"The list on the left lists all the states, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each state can be displayed. Use the button to create a new state. The button removes the selected states from Ramses 1 . You can also use the [DEL] key to remove selected states. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . A few states can\u2019t be removed as they are needed by Ramses automations (but they can still be customized, only their ID can\u2019t change): NO, STB, TODO, WIP, OK .","title":"List"},{"location":"components/client/states/#edition","text":"Name is the state\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). It is also used in the user interface when there is too little room to use the name. Comment can be any text associated to the state. You can use it to describe the state and explain what it means. This comment has nothing to do with the actual production status of shots and assets, it is linked to the state itself and just describes it. The color is used to display the states in the user interface and easily differenciate them in lists. Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. The completion ratio is used to automatically set a default value to the completion of the tasks when their state changes. This task completion ratio can then be adjusted by the user for each individual task. \u25b9 More details about Production tracking and the states . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/steps/","text":"Step settings This panel is used to list and manage all the steps of the project which are used by the pipeline , production tracking and planning . Steps can also be directly created, edited and removed from the pipeline editor . List The list on the left lists all the steps of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each step can be displayed. The folder button on the top right corner for each user in the list opens the user folder in your file explorer. Use the button to create a new step (either completely new or using a template). The button removes the selected steps from the project 1 . You can also use the [DEL] key to remove selected steps. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Steps can be re-order by dragging their ID in the column header of the list. Hint Ramses comes with a set of template steps, but they can be completely adjusted to any production needs; for example, if you consider Character Desgin to be a pre-production step instead of an asset production step, it\u2019s up to you to customize the templates. The list of template steps is available and can be managed in the administration panel by administrator users . Edition Name is the step\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the step has been created . Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the step and describing it. Use the Type list to set the type of the step. Read this for more information about step types. The color is used to display the steps in the user interface and easily differenciate them in lists and the schedule . Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. You can set the default estimation for the step. Read the section about Production Planning for more information. For Shot Production steps, you can select if the estimation has to be evaluated per shot (for a lighting step where the quantity of work does not depend on the duration of the shot for example) or on the duration, per second (better for the animation step for example). You can set a different default estimation for shots or assets depending on the difficulty . Estimation is made in days . For Shot Production steps, you can select an asset group to multiply the estimation by the number of corresponding assets in the shot. For example, you can multiply the estimation of the animation by the number of characters in the shot. The button opens the step folder in your file explorer. This folder contains the step common files , especially the templates, but not the working files which are stored within their assets and shots. Applications can be assigned to each step; this information is used by the pipeline tools for automations and to open files. The button contains a list of available applications, and an entry to quickly create a new application without having to switch to the applications tab. The button unassigns the selected appplications from the project but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in a side docked panel. Read the application management section for more details about application edition. Tip To change the ID of the step, you\u2019ll need to create a new one with the new ID and remove the old one; it may be safe to do so at the beginning of a project, but existing data (if any) can\u2019t be transfered to the new step, be careful! \u25b9 More details about Steps and Ramses . \u25b9 More details about estimations and planning . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Steps"},{"location":"components/client/steps/#step-settings","text":"This panel is used to list and manage all the steps of the project which are used by the pipeline , production tracking and planning . Steps can also be directly created, edited and removed from the pipeline editor .","title":"Step settings"},{"location":"components/client/steps/#list","text":"The list on the left lists all the steps of the project, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each step can be displayed. The folder button on the top right corner for each user in the list opens the user folder in your file explorer. Use the button to create a new step (either completely new or using a template). The button removes the selected steps from the project 1 . You can also use the [DEL] key to remove selected steps. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Steps can be re-order by dragging their ID in the column header of the list. Hint Ramses comes with a set of template steps, but they can be completely adjusted to any production needs; for example, if you consider Character Desgin to be a pre-production step instead of an asset production step, it\u2019s up to you to customize the templates. The list of template steps is available and can be managed in the administration panel by administrator users .","title":"List"},{"location":"components/client/steps/#edition","text":"Name is the step\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section). It can\u2019t be changed after the step has been created . Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the step and describing it. Use the Type list to set the type of the step. Read this for more information about step types. The color is used to display the steps in the user interface and easily differenciate them in lists and the schedule . Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. You can set the default estimation for the step. Read the section about Production Planning for more information. For Shot Production steps, you can select if the estimation has to be evaluated per shot (for a lighting step where the quantity of work does not depend on the duration of the shot for example) or on the duration, per second (better for the animation step for example). You can set a different default estimation for shots or assets depending on the difficulty . Estimation is made in days . For Shot Production steps, you can select an asset group to multiply the estimation by the number of corresponding assets in the shot. For example, you can multiply the estimation of the animation by the number of characters in the shot. The button opens the step folder in your file explorer. This folder contains the step common files , especially the templates, but not the working files which are stored within their assets and shots. Applications can be assigned to each step; this information is used by the pipeline tools for automations and to open files. The button contains a list of available applications, and an entry to quickly create a new application without having to switch to the applications tab. The button unassigns the selected appplications from the project but does not remove them from Ramses . You can also use the [DEL] key. From the list, you can use the edit button to edit them in a side docked panel. Read the application management section for more details about application edition. Tip To change the ID of the step, you\u2019ll need to create a new one with the new ID and remove the old one; it may be safe to do so at the beginning of a project, but existing data (if any) can\u2019t be transfered to the new step, be careful! \u25b9 More details about Steps and Ramses . \u25b9 More details about estimations and planning . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/templateassetgroups/","text":"Template Asset Group management This panel is used to list and manage all template asset groups of Ramses . Template assset groups can be used when configuring a project and its pipeline , to quickly create asset groups for the project. Read the section about Production tracking for more details about asset groups, and the section about the asset group management in the Ramses Client Application to learn how to create and manage asset groups inside projects. List The list on the left lists all the template asset groups, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each asset group can be displayed. Use the button to create a new template asset group. The button removes the selected template asset groups from Ramses 1 . You can also use the [DEL] key to remove selected template asset groups. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Hint All these settings can be safely changed at any time as this information is not actually used in Ramses but just read at the moment an asset group is created from a template. Name is the template asset group\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the template asset group. Note Asset groups are one of the only elements for which the name is used as a folder name as part of the Ramses Tree . \u25b9 More details about Assets and Ramses . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Template Asset Groups"},{"location":"components/client/templateassetgroups/#template-asset-group-management","text":"This panel is used to list and manage all template asset groups of Ramses . Template assset groups can be used when configuring a project and its pipeline , to quickly create asset groups for the project. Read the section about Production tracking for more details about asset groups, and the section about the asset group management in the Ramses Client Application to learn how to create and manage asset groups inside projects.","title":"Template Asset Group management"},{"location":"components/client/templateassetgroups/#list","text":"The list on the left lists all the template asset groups, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each asset group can be displayed. Use the button to create a new template asset group. The button removes the selected template asset groups from Ramses 1 . You can also use the [DEL] key to remove selected template asset groups. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/templateassetgroups/#edition","text":"Hint All these settings can be safely changed at any time as this information is not actually used in Ramses but just read at the moment an asset group is created from a template. Name is the template asset group\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the template asset group. Note Asset groups are one of the only elements for which the name is used as a folder name as part of the Ramses Tree . \u25b9 More details about Assets and Ramses . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/templatesteps/","text":"Template Step management This panel is used to list and manage all template steps of Ramses . Template steps can be used when configuring a project and its pipeline , to quickly create steps for the project. Read the section about Pipelines for more details about steps, and the section about the step management in the Ramses Client Application to learn how to create and manage steps inside projects. List The list on the left lists all the template steps, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each template step can be displayed. Use the button to create a new template step. The button removes the selected template steps from Ramses 1 . You can also use the [DEL] key to remove selected template steps. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Edition Hint All these settings can be safely changed at any time as this information is not actually used in Ramses but just read at the moment a step is created from a template. Name is the template step\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the template step. Use the Type list to set the type of the step. Read this for more information about step types. The color is used to display the steps in the user interface and easily differenciate them in lists and the schedule . Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. You can set the default estimation for the step. Read the section about Production Planning for more information. For Shot Production steps, you can select if the estimation has to be evaluated per shot or on the duration, per second . You can set a different default estimation for shots or assets depending on the difficulty . Estimation is made in days . \u25b9 More details about Steps and Ramses . \u25b9 More details about estimations and planning . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Template Steps"},{"location":"components/client/templatesteps/#template-step-management","text":"This panel is used to list and manage all template steps of Ramses . Template steps can be used when configuring a project and its pipeline , to quickly create steps for the project. Read the section about Pipelines for more details about steps, and the section about the step management in the Ramses Client Application to learn how to create and manage steps inside projects.","title":"Template Step management"},{"location":"components/client/templatesteps/#list","text":"The list on the left lists all the template steps, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each template step can be displayed. Use the button to create a new template step. The button removes the selected template steps from Ramses 1 . You can also use the [DEL] key to remove selected template steps. You can scroll all lists using [Middle click] as well as the [Mouse wheel] .","title":"List"},{"location":"components/client/templatesteps/#edition","text":"Hint All these settings can be safely changed at any time as this information is not actually used in Ramses but just read at the moment a step is created from a template. Name is the template step\u2019s display name. ID is the unique identifier which is used in the files and folders (see the Ramses Tree section and the Ramses naming convetions ). Comment can be any text associated to the template step. Use the Type list to set the type of the step. Read this for more information about step types. The color is used to display the steps in the user interface and easily differenciate them in lists and the schedule . Input a custom hexadecimal color code in the field. Click the button to use a nice color selector. You can set the default estimation for the step. Read the section about Production Planning for more information. For Shot Production steps, you can select if the estimation has to be evaluated per shot or on the duration, per second . You can set a different default estimation for shots or assets depending on the difficulty . Estimation is made in days . \u25b9 More details about Steps and Ramses . \u25b9 More details about estimations and planning . The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/client/users/","text":"User management This panel is used to list and manage all users of Ramses . List The list on the left lists all the users, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each user can be displayed. The folder button on the top right corner for each user in the list opens the user folder in your file explorer. Use the button to create a new user. The button removes the selected users from Ramses 1 . You can use the [DEL] key to remove selected users. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Note The Ramses Daemon can\u2019t be removed: it is a default user needed by Ramses automations, but you can rename it if you wish. Warning The default Administrator user should be renamed and its password changed as soon as Ramses has been installed! Note With the default installation of Ramses , there\u2019s also an additionnal user: Nicolas \u201cDuduf\u201d Dufresne , who\u2019s the main developper of Ramses . This user is just a quick reminder that Ramses is free and that Duduf and RxLab really need your support . You can safely keep or remove it. Just. Donate. First. Please! Ramses relies only on your donations to exist. Edition Except for the password, there\u2019s no need to validate any change; changes are saved instantly. Name is the user\u2019s display name and can be changed any time (although it\u2019s not really advisable). ID is the unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed after the user folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the user. It is public. The Current role can never be changed by the user itself, and has to be changed by an administrator ( read this for more information about roles). To update your own password, input your Current password and repeat your New password twice. Don\u2019t forget to click the Change password button to validate! You can change any other user password, just set the New password twice and ignore the Current password field. Don\u2019t forget to click the Change password button to validate! You can change the folder where the user files are stored. Leave the field empty to set back the default folder inside the Ramses Tree . The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Passwords are stored encrypted in the Ramses Server and there\u2019s no way to retrieve them in case a user forgets it. In this case, an administrator has to set a new password for the user. \u25b9 More details about Users and Ramses . Note You cannot change your own role. Tip To change a user ID , you need to remove its folder. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Users"},{"location":"components/client/users/#user-management","text":"This panel is used to list and manage all users of Ramses .","title":"User management"},{"location":"components/client/users/#list","text":"The list on the left lists all the users, and you can use the Search field to filter them by name or ID . When changing the size of the rows in the list, more details about each user can be displayed. The folder button on the top right corner for each user in the list opens the user folder in your file explorer. Use the button to create a new user. The button removes the selected users from Ramses 1 . You can use the [DEL] key to remove selected users. You can scroll all lists using [Middle click] as well as the [Mouse wheel] . Note The Ramses Daemon can\u2019t be removed: it is a default user needed by Ramses automations, but you can rename it if you wish. Warning The default Administrator user should be renamed and its password changed as soon as Ramses has been installed! Note With the default installation of Ramses , there\u2019s also an additionnal user: Nicolas \u201cDuduf\u201d Dufresne , who\u2019s the main developper of Ramses . This user is just a quick reminder that Ramses is free and that Duduf and RxLab really need your support . You can safely keep or remove it. Just. Donate. First. Please! Ramses relies only on your donations to exist.","title":"List"},{"location":"components/client/users/#edition","text":"Except for the password, there\u2019s no need to validate any change; changes are saved instantly. Name is the user\u2019s display name and can be changed any time (although it\u2019s not really advisable). ID is the unique identifier which is used in the files and folders (see Ramses Tree ). It can\u2019t be changed after the user folder has been created. Read the Ramses naming conventions to learn how IDs and names have to be formatted. Comment can be any text associated to the user. It is public. The Current role can never be changed by the user itself, and has to be changed by an administrator ( read this for more information about roles). To update your own password, input your Current password and repeat your New password twice. Don\u2019t forget to click the Change password button to validate! You can change any other user password, just set the New password twice and ignore the Current password field. Don\u2019t forget to click the Change password button to validate! You can change the folder where the user files are stored. Leave the field empty to set back the default folder inside the Ramses Tree . The blue button opens a folder selector to change the folder location. The green button opens the folder in your file explorer. Passwords are stored encrypted in the Ramses Server and there\u2019s no way to retrieve them in case a user forgets it. In this case, an administrator has to set a new password for the user. \u25b9 More details about Users and Ramses . Note You cannot change your own role. Tip To change a user ID , you need to remove its folder. The data is not actually deleted from the server nor the local data, but just flagged as removed. A server administrator can still restore the data at any time, but there is no way (yet) to do that from the user interface of the application. \u21a9","title":"Edition"},{"location":"components/files/","text":"The Ramses Tree Ramses is able to manage all the files associated with projects. To handle these, it uses a specific naming scheme which has been carefully crafted to be powerful (it contains all information Ramses needs to efficiently handle the files and folders), and easy to respect (it is simple to manually rename files and folders). Although one of the goal of Ramses is to enable you to work without ever having to use your system\u2019s file explorer but only Ramses tools, it is strongly advised to read this documentation about the naming conventions and folder structure to make sure all your files can be handled by Ramses . Every file and folder you create manually can be detected and managed by Ramses if it\u2019s correcly named and located. Read the Ramses naming conventions . Check out the Ramses Tree , the folder structure.","title":"Introduction"},{"location":"components/files/#the-ramses-tree","text":"Ramses is able to manage all the files associated with projects. To handle these, it uses a specific naming scheme which has been carefully crafted to be powerful (it contains all information Ramses needs to efficiently handle the files and folders), and easy to respect (it is simple to manually rename files and folders). Although one of the goal of Ramses is to enable you to work without ever having to use your system\u2019s file explorer but only Ramses tools, it is strongly advised to read this documentation about the naming conventions and folder structure to make sure all your files can be handled by Ramses . Every file and folder you create manually can be detected and managed by Ramses if it\u2019s correcly named and located. Read the Ramses naming conventions . Check out the Ramses Tree , the folder structure.","title":"The Ramses Tree"},{"location":"components/files/naming/","text":"File and folder naming scheme Ramses uses a strict and specific naming convention. This naming scheme is based on the ID s of the elements, which are defined by the administrator users in the Ramses Client . Extensibility We provide a set of regular expressions to help developpers manipulate this naming scheme. IDs (short names) In Ramses , all elements (users, assets, shots, projects\u2026) have two names: the actual name used in the user interface and displayed anywhere there is enough room, and an ID which is no longer than 10 characters (but which may be the same as the actual name). IDs are unique (while names may not be unique, although it\u2019s good practice to keep them unique too) and they are used as identifiers. While names can contain a lot of different characters, IDs can consist only of alphanumeric characters (without any special character or accent), and the minus - character. What How Where Name up to 256 characters in: [a-z] , [A-Z] , [0-9] , - , and space. Used in user interfaces where there is enough room. ID up to 10 characters in: [a-z] , [A-Z] , [0-9] , - . Used in file and folder names, and in user interfaces where there is limited room. Extensibility In the API , the IDs are called \u201cshort names\u201d. Naming scheme This is the complete naming scheme, for all files and folders: projectID_A|S|G(_assetID|shotID)_stepID(_resource name)(_stateVersion)(.extension) Explanations: The name is divided into blocks, separated by the underscore _ character. Optionnal blocks are shown in parenthesis () The vertical bar | characters means \u201cor\u201d and represents a choice in a list of possibilities. A file name must include at least 3 blocks : projectID , Type ( A , S or G ), and stepID and can include up to 6 blocks if adding the assetId or shotID , the resource name, and the version. Blocks projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. A|S|G tells if the file or folder refers to an Asset ( A ), a shot ( S ) or a general item ( G ). assetID is the ID of the asset, if the previous block is A . Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. shotID is the ID of the shot, if the previous block is S . Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. stepID is the ID of the production step. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. resource name describes the specific resource this file or folder refers to. Between 1 and 30 characters consisting only of a-z , 0-9 and - characters and may contain spaces. Resource names cannot start with a status ID followed by a number (e.g. v01 or wip2 ) nor a number alone. stateVersion contains the state and version number. The state is either the default v or the ID of the state (e.g. \u201cwip\u201d, \u201cok\u201d, etc.), and the version includes one or more numbers. No other character allowed. extension is the file extension. The extension may include multiple dots, for example: .tar.gz Examples TI_G_ADMIN_Budget estimation.xls TI_G_RIG_Template.blend TI_A_TRISTAN_RIG.blend TI_A_TRISTAN_RIG_WIP001.blend TI_A_TRISTAN_ANIM_walk cycle.blend TI_A_TRISTAN_ANIM_walk cycle_CHK011.blend Project media files Media files exported from the project have a specific naming scheme. projectID_codec(+colorspace)_widthxheight(p|i)_fps(_language)_(subtitlesst).ext Blocks projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. codec is the name of the codec. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. No dot allowed (e.g. h.264 must be named h264 ). colorspace represents the colorspace used if it\u2019s not the most common one for this codec. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. No dot allowed. Examples: YUV420 , sRGB , YUV444 , sRGBA , YUV420-REC709 \u2026 widthxheight is the resolution of the file. p|i tells if the video is interlaced or progressive. If omitted, the video is considered progressive. fps is the framerate. A number, which may contain a dot . character, and optionnaly the fps suffix. language is the spoken language. Omitted if there are no dialogs nor any written text. subtitlesst is the language code for the subtitles followed by the st suffix. Omitted if there are no subtitles. ext is the file extension. The extension may include multiple dots, for example: .tar.gz Examples TI_h264_1920x1080_24fps.mp4 TI_h264+YUV444-rec709_1920x1080p_24fps_fr_enst.mp4 TI_QtAnim+sRGB_1920x1080p_24fps_fr_enst.mp4","title":"Naming scheme"},{"location":"components/files/naming/#file-and-folder-naming-scheme","text":"Ramses uses a strict and specific naming convention. This naming scheme is based on the ID s of the elements, which are defined by the administrator users in the Ramses Client . Extensibility We provide a set of regular expressions to help developpers manipulate this naming scheme.","title":"File and folder naming scheme"},{"location":"components/files/naming/#ids-short-names","text":"In Ramses , all elements (users, assets, shots, projects\u2026) have two names: the actual name used in the user interface and displayed anywhere there is enough room, and an ID which is no longer than 10 characters (but which may be the same as the actual name). IDs are unique (while names may not be unique, although it\u2019s good practice to keep them unique too) and they are used as identifiers. While names can contain a lot of different characters, IDs can consist only of alphanumeric characters (without any special character or accent), and the minus - character. What How Where Name up to 256 characters in: [a-z] , [A-Z] , [0-9] , - , and space. Used in user interfaces where there is enough room. ID up to 10 characters in: [a-z] , [A-Z] , [0-9] , - . Used in file and folder names, and in user interfaces where there is limited room. Extensibility In the API , the IDs are called \u201cshort names\u201d.","title":"IDs (short names)"},{"location":"components/files/naming/#naming-scheme","text":"This is the complete naming scheme, for all files and folders: projectID_A|S|G(_assetID|shotID)_stepID(_resource name)(_stateVersion)(.extension) Explanations: The name is divided into blocks, separated by the underscore _ character. Optionnal blocks are shown in parenthesis () The vertical bar | characters means \u201cor\u201d and represents a choice in a list of possibilities. A file name must include at least 3 blocks : projectID , Type ( A , S or G ), and stepID and can include up to 6 blocks if adding the assetId or shotID , the resource name, and the version.","title":"Naming scheme"},{"location":"components/files/naming/#blocks","text":"projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. A|S|G tells if the file or folder refers to an Asset ( A ), a shot ( S ) or a general item ( G ). assetID is the ID of the asset, if the previous block is A . Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. shotID is the ID of the shot, if the previous block is S . Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. stepID is the ID of the production step. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. resource name describes the specific resource this file or folder refers to. Between 1 and 30 characters consisting only of a-z , 0-9 and - characters and may contain spaces. Resource names cannot start with a status ID followed by a number (e.g. v01 or wip2 ) nor a number alone. stateVersion contains the state and version number. The state is either the default v or the ID of the state (e.g. \u201cwip\u201d, \u201cok\u201d, etc.), and the version includes one or more numbers. No other character allowed. extension is the file extension. The extension may include multiple dots, for example: .tar.gz","title":"Blocks"},{"location":"components/files/naming/#examples","text":"TI_G_ADMIN_Budget estimation.xls TI_G_RIG_Template.blend TI_A_TRISTAN_RIG.blend TI_A_TRISTAN_RIG_WIP001.blend TI_A_TRISTAN_ANIM_walk cycle.blend TI_A_TRISTAN_ANIM_walk cycle_CHK011.blend","title":"Examples"},{"location":"components/files/naming/#project-media-files","text":"Media files exported from the project have a specific naming scheme. projectID_codec(+colorspace)_widthxheight(p|i)_fps(_language)_(subtitlesst).ext","title":"Project media files"},{"location":"components/files/naming/#blocks_1","text":"projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. codec is the name of the codec. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. No dot allowed (e.g. h.264 must be named h264 ). colorspace represents the colorspace used if it\u2019s not the most common one for this codec. Between 1 and 10 characters consisting only of a-z , 0-9 and - characters. No space allowed. No dot allowed. Examples: YUV420 , sRGB , YUV444 , sRGBA , YUV420-REC709 \u2026 widthxheight is the resolution of the file. p|i tells if the video is interlaced or progressive. If omitted, the video is considered progressive. fps is the framerate. A number, which may contain a dot . character, and optionnaly the fps suffix. language is the spoken language. Omitted if there are no dialogs nor any written text. subtitlesst is the language code for the subtitles followed by the st suffix. Omitted if there are no subtitles. ext is the file extension. The extension may include multiple dots, for example: .tar.gz","title":"Blocks"},{"location":"components/files/naming/#examples_1","text":"TI_h264_1920x1080_24fps.mp4 TI_h264+YUV444-rec709_1920x1080p_24fps_fr_enst.mp4 TI_QtAnim+sRGB_1920x1080p_24fps_fr_enst.mp4","title":"Examples"},{"location":"components/files/tree/","text":"Folder Structure: the Ramses Tree One of Ramses\u2019 goals is to manage all your files and folders; sometimes, you may still need to manually add, remove, or edit files and folders through your file explorer, in which case you should always try to respect the Ramses Tree described here. This document will also help you find your files should Ramses be unavailable for some reason. Introduction All folders inside the Ramses Tree follow the Ramses Naming Scheme . The folders used by Ramses can be located either locally or on remote computers and servers . The supported protocols ( SMB , FTP \u2026) may vary depending on the platform (read below for more information). Ramses includes a system of alternative trees , which means you can use different paths to folders used by Ramses, and that it is compatible with virtually all syncing applications (Dropbox, Syncthing, Synology\u2026), wether they are automatic or manual (like backup tools). If a specific file or folder is not found in the main tree , Ramses will automatically look for it in the alternative trees and try to sync (i.e. copy in the main tree ) them. Tip For best performance, it is advised to work with local files, and use remote locations only as alternative trees ; in conjunction with a syncing tool like Syncthing or the Synology Drive application for example, it is both easy, safe and powerful to keep a shared copy of the projects while working locally. Remote files on Windows Ramses should be able to access files located on remote locations using the Samba ( SMB ) protocol, using standard URL starting with \\\\server-name . Another way to access remote locations, which enables FTP and other protocols support, is to use Windows Network Drives to mount the remote locations. To make it easy to deploy Ramses on several devices, they should all use the same drive letter. Remote files on Unix-like Systems (Linux, Mac OS) The quickest and easiest way to use Ramses on remote folders on Unix-like systems is to automatically mount the remote locations in a specific folder. This can work for a lot of different protocols ( Samba , FTP(s) , SFTP , NFS \u2026) The Main Ramses Folder The easiest way to use Ramses to manage all your projects is to define a root folder for all Ramses projects, where Ramses will create a subfolder for each project. This Ramses folder is also used to store user specific files, some configuration files, etc. Nevertheless, you can always choose another folder to store a specific project, outside of the Ramses Folder. \u250c Ramses Folder \u2502 \u251c\u2500\u2500\u2500 Config # Configuration files \u2502 \u251c\u2500\u252c\u2500 Projects # All projects \u2502 \u251c\u2500\u2500\u2500 Project01 # First project \u2502 \u251c\u2500\u2500\u2500 Project02 # Second project \u2502 \u2514\u2500\u2500\u2500 ... \u2502 \u2514\u2500\u252c\u2500 Users # User files \u251c\u2500\u252c\u2500 User01 # Files for a single user \u2502 \u2514\u2500\u2500\u2500 Config # Configuration files for this user \u251c\u2500\u252c\u2500 User02 \u2502 \u2514\u2500\u2500\u2500 Config \u2514\u2500\u2500\u2500 ... Hint When using the Ramses Client , user and project folders can be located anywhere outside the Ramses Folder , it is not mandatory to keep them grouped together there. The Project Folder These are the contents of a Project folder: \u250c PROJECTID # Root \u251c\u2500\u2500\u2500 00-ADMIN # Project administration \u251c\u2500\u2500\u2500 01-PRE-PROD # Pre-production steps common files \u251c\u2500\u2500\u2500 02-PROD # Production steps common files \u251c\u2500\u2500\u2500 03-POST-PROD # Post-production steps common files \u251c\u2500\u2500\u2500 04-ASSETS # All the Assets \u251c\u2500\u2500\u2500 05-SHOTS # All the Shots \u2514\u2500\u2500\u2500 06-EXPORT # Media files The root folder of a project only contains other folders and no files. The subfolders in the root folder are numbered to help sorting them and quickly find them. Here is an example of a typical project tree, without showing the details in the working directories nor any file. \u250c PROJECTID # Root \u2502 \u251c\u2500\u2500\u2500 00-ADMIN \u2502 \u251c\u2500\u252c\u2500 01-PRE-PROD \u2502 \u251c\u2500\u2500\u2500 PROJECTID_G_SCRIPT # Pre production step \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_STORYBOARD \u2502 \u251c\u2500\u252c\u2500 02-PROD \u2502 \u251c\u2500\u252c\u2500 PROJECTID_G_MOD # Common files for the mod step \u2502 \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the mod step \u2502 \u2514\u2500\u252c\u2500 PROJECTID_G_RIG # Common files for the rig step \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the rig step \u2502 \u251c\u2500\u252c\u2500 03-POST-PROD \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_EDIT # Post production step \u2502 \u251c\u2500\u252c\u2500 04-ASSETS \u2502 \u251c\u2500\u252c\u2500 Characters # A Group of Assets \u2502 \u2502 \u251c\u2500\u252c\u2500 PROJECTID_A_TRISTAN # An Asset \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_DESIGN # An asset production step \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_RIG \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_TEX \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_ISOLDE # An Asset \u2502 \u251c\u2500\u2500\u2500 Props # A Group of Assets \u2502 \u2514\u2500\u2500\u2500 Sets # A Group of Assets \u2502 \u251c\u2500\u252c\u2500 05-SHOTS \u2502 \u251c\u2500\u252c\u2500 PROJECTID_S_01-001 # A Shot \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_ANIM # A shot production step \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_LIGHT \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_01-001_COMP \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-002 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-003 # A Shot \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_02-001 # A Shot \u2502 \u2514\u2500\u2500\u2500 06-EXPORT A working folder A folder containing working files is always organised the same way. Here is an example for the modelling step of the asset called Tristan . \u250c PROJECTID_A_TRISTAN_MOD # The working folder, subfolder of the asset folder. \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.blend # The main file for modelling Tristan (on Blender) \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt.blend # Another resource \u2502 \u251c\u2500\u252c\u2500 _versions # The versionning folder, handled by Ramses. \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_wip001.blend # A WIP version \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_wip002.blend \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_chk003.blend # The version which has to be reviewed \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_ok004.blend # The validated version \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_pub005.blend # The version which has been published \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt_v001.blend # The first version of a resource \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt_v002.blend # The second version of a resource \u2502 \u251c\u2500\u252c\u2500 _published \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.blend # The working file as it was when publishing \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.abc # The published export (an *Alembic* file) \u2502 \u2514\u2500\u252c\u2500 _preview \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.jpg # A file for previewing the modelling \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.mp4 # A file for previewing the modelling The _versions subfolder contains the versionning and history of the work. The _published subfolder contains the published and exported files to be used by other steps. The _preview subfolder contains the files for previewing the current work, like videos or images. These files may be used by Ramses to generate thumbnails. Ramses is also able to list, preview, and play these files (if their format is standard and supported). Warning The working file and published files do not include the version in their names, and the versionning and history are hidden in a _versions subfolder. This way, there can be no mistake about what file to open or import. Note Only Ramses should access the _versions subfolder and it should not be needed for the user to manipulate these files. Both the Ramses Client and Ramses Add-ons have a restore feature to retrieve previous versions. Tip When backuping a project, only the files in the published subfolder may be kept. Ramses special files and folders Ramses will also store some special files and folders it needs in the Ramses Tree . _trash Folder When Ramses needs to remove a file, it will automatically be moved in a _trash subfolder. If a file with the same name already exists in this _trash subfolder, it will be moved in the system trash so it\u2019s not overwritten. _ramses_data.json File Ramses may create a file named _ramses_data.json in any folder. This file is used to store some meta-data associated with the other files in the same folder. This file should stay small, and it should never be manually removed. *.ini Files Ramses stores its settings in files with the .ini extension. These are standard text files, and should remain only in folders named Config . If these files (or the Config folders) are removed, this re-initializes the corresponding settings in Ramses .","title":"Folder structure"},{"location":"components/files/tree/#folder-structure-the-ramses-tree","text":"One of Ramses\u2019 goals is to manage all your files and folders; sometimes, you may still need to manually add, remove, or edit files and folders through your file explorer, in which case you should always try to respect the Ramses Tree described here. This document will also help you find your files should Ramses be unavailable for some reason.","title":"Folder Structure: the Ramses Tree"},{"location":"components/files/tree/#introduction","text":"All folders inside the Ramses Tree follow the Ramses Naming Scheme . The folders used by Ramses can be located either locally or on remote computers and servers . The supported protocols ( SMB , FTP \u2026) may vary depending on the platform (read below for more information). Ramses includes a system of alternative trees , which means you can use different paths to folders used by Ramses, and that it is compatible with virtually all syncing applications (Dropbox, Syncthing, Synology\u2026), wether they are automatic or manual (like backup tools). If a specific file or folder is not found in the main tree , Ramses will automatically look for it in the alternative trees and try to sync (i.e. copy in the main tree ) them. Tip For best performance, it is advised to work with local files, and use remote locations only as alternative trees ; in conjunction with a syncing tool like Syncthing or the Synology Drive application for example, it is both easy, safe and powerful to keep a shared copy of the projects while working locally.","title":"Introduction"},{"location":"components/files/tree/#remote-files-on-windows","text":"Ramses should be able to access files located on remote locations using the Samba ( SMB ) protocol, using standard URL starting with \\\\server-name . Another way to access remote locations, which enables FTP and other protocols support, is to use Windows Network Drives to mount the remote locations. To make it easy to deploy Ramses on several devices, they should all use the same drive letter.","title":"Remote files on Windows"},{"location":"components/files/tree/#remote-files-on-unix-like-systems-linux-mac-os","text":"The quickest and easiest way to use Ramses on remote folders on Unix-like systems is to automatically mount the remote locations in a specific folder. This can work for a lot of different protocols ( Samba , FTP(s) , SFTP , NFS \u2026)","title":"Remote files on Unix-like Systems (Linux, Mac OS)"},{"location":"components/files/tree/#the-main-ramses-folder","text":"The easiest way to use Ramses to manage all your projects is to define a root folder for all Ramses projects, where Ramses will create a subfolder for each project. This Ramses folder is also used to store user specific files, some configuration files, etc. Nevertheless, you can always choose another folder to store a specific project, outside of the Ramses Folder. \u250c Ramses Folder \u2502 \u251c\u2500\u2500\u2500 Config # Configuration files \u2502 \u251c\u2500\u252c\u2500 Projects # All projects \u2502 \u251c\u2500\u2500\u2500 Project01 # First project \u2502 \u251c\u2500\u2500\u2500 Project02 # Second project \u2502 \u2514\u2500\u2500\u2500 ... \u2502 \u2514\u2500\u252c\u2500 Users # User files \u251c\u2500\u252c\u2500 User01 # Files for a single user \u2502 \u2514\u2500\u2500\u2500 Config # Configuration files for this user \u251c\u2500\u252c\u2500 User02 \u2502 \u2514\u2500\u2500\u2500 Config \u2514\u2500\u2500\u2500 ... Hint When using the Ramses Client , user and project folders can be located anywhere outside the Ramses Folder , it is not mandatory to keep them grouped together there.","title":"The Main Ramses Folder"},{"location":"components/files/tree/#the-project-folder","text":"These are the contents of a Project folder: \u250c PROJECTID # Root \u251c\u2500\u2500\u2500 00-ADMIN # Project administration \u251c\u2500\u2500\u2500 01-PRE-PROD # Pre-production steps common files \u251c\u2500\u2500\u2500 02-PROD # Production steps common files \u251c\u2500\u2500\u2500 03-POST-PROD # Post-production steps common files \u251c\u2500\u2500\u2500 04-ASSETS # All the Assets \u251c\u2500\u2500\u2500 05-SHOTS # All the Shots \u2514\u2500\u2500\u2500 06-EXPORT # Media files The root folder of a project only contains other folders and no files. The subfolders in the root folder are numbered to help sorting them and quickly find them. Here is an example of a typical project tree, without showing the details in the working directories nor any file. \u250c PROJECTID # Root \u2502 \u251c\u2500\u2500\u2500 00-ADMIN \u2502 \u251c\u2500\u252c\u2500 01-PRE-PROD \u2502 \u251c\u2500\u2500\u2500 PROJECTID_G_SCRIPT # Pre production step \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_STORYBOARD \u2502 \u251c\u2500\u252c\u2500 02-PROD \u2502 \u251c\u2500\u252c\u2500 PROJECTID_G_MOD # Common files for the mod step \u2502 \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the mod step \u2502 \u2514\u2500\u252c\u2500 PROJECTID_G_RIG # Common files for the rig step \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the rig step \u2502 \u251c\u2500\u252c\u2500 03-POST-PROD \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_EDIT # Post production step \u2502 \u251c\u2500\u252c\u2500 04-ASSETS \u2502 \u251c\u2500\u252c\u2500 Characters # A Group of Assets \u2502 \u2502 \u251c\u2500\u252c\u2500 PROJECTID_A_TRISTAN # An Asset \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_DESIGN # An asset production step \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_RIG \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_TEX \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_ISOLDE # An Asset \u2502 \u251c\u2500\u2500\u2500 Props # A Group of Assets \u2502 \u2514\u2500\u2500\u2500 Sets # A Group of Assets \u2502 \u251c\u2500\u252c\u2500 05-SHOTS \u2502 \u251c\u2500\u252c\u2500 PROJECTID_S_01-001 # A Shot \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_ANIM # A shot production step \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_LIGHT \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_01-001_COMP \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-002 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-003 # A Shot \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_02-001 # A Shot \u2502 \u2514\u2500\u2500\u2500 06-EXPORT","title":"The Project Folder"},{"location":"components/files/tree/#a-working-folder","text":"A folder containing working files is always organised the same way. Here is an example for the modelling step of the asset called Tristan . \u250c PROJECTID_A_TRISTAN_MOD # The working folder, subfolder of the asset folder. \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.blend # The main file for modelling Tristan (on Blender) \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt.blend # Another resource \u2502 \u251c\u2500\u252c\u2500 _versions # The versionning folder, handled by Ramses. \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_wip001.blend # A WIP version \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_wip002.blend \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_chk003.blend # The version which has to be reviewed \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_ok004.blend # The validated version \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_pub005.blend # The version which has been published \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt_v001.blend # The first version of a resource \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD_Sculpt_v002.blend # The second version of a resource \u2502 \u251c\u2500\u252c\u2500 _published \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.blend # The working file as it was when publishing \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.abc # The published export (an *Alembic* file) \u2502 \u2514\u2500\u252c\u2500 _preview \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.jpg # A file for previewing the modelling \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD.mp4 # A file for previewing the modelling The _versions subfolder contains the versionning and history of the work. The _published subfolder contains the published and exported files to be used by other steps. The _preview subfolder contains the files for previewing the current work, like videos or images. These files may be used by Ramses to generate thumbnails. Ramses is also able to list, preview, and play these files (if their format is standard and supported). Warning The working file and published files do not include the version in their names, and the versionning and history are hidden in a _versions subfolder. This way, there can be no mistake about what file to open or import. Note Only Ramses should access the _versions subfolder and it should not be needed for the user to manipulate these files. Both the Ramses Client and Ramses Add-ons have a restore feature to retrieve previous versions. Tip When backuping a project, only the files in the published subfolder may be kept.","title":"A working folder"},{"location":"components/files/tree/#ramses-special-files-and-folders","text":"Ramses will also store some special files and folders it needs in the Ramses Tree .","title":"Ramses special files and folders"},{"location":"components/files/tree/#_trash-folder","text":"When Ramses needs to remove a file, it will automatically be moved in a _trash subfolder. If a file with the same name already exists in this _trash subfolder, it will be moved in the system trash so it\u2019s not overwritten.","title":"_trash Folder"},{"location":"components/files/tree/#_ramses_datajson-file","text":"Ramses may create a file named _ramses_data.json in any folder. This file is used to store some meta-data associated with the other files in the same folder. This file should stay small, and it should never be manually removed.","title":"_ramses_data.json File"},{"location":"components/files/tree/#ini-files","text":"Ramses stores its settings in files with the .ini extension. These are standard text files, and should remain only in folders named Config . If these files (or the Config folders) are removed, this re-initializes the corresponding settings in Ramses .","title":"*.ini Files"},{"location":"components/server/","text":"The Ramses Server The server stores and serves all shared data to the Ramses Client between all workstations in the studio. The Ramses Clients installed on these workstations connect to it to retrieve tha data they need. It is just a small software meant to be installable on small hardware and with very low requirements. You can install it on any computer in the studio (even just a simple Raspberry ) and make it available on your Local Area Network , or make it available from the internet. You can also easily install it on a shared or private hosting, even a low-cost one. Tip Although the currently available Beta Version of the Ramses Client cannot be used as a stand-alone, offline application yet and needs a connection to a Ramses Server , you can install a local server on any computer to test and use Ramses without needing a full scale online server. We\u2019re explaining in this documentation how to install such a standard webserver on your computer, read below. Requirements The Ramses Server must be installed on a computer with: An http web server like Apache PHP 7 An acces to a mySQL server and a dedicated database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 2GB of RAM if the SQL server is on the same computer than the Apache server. The needed space for the Ramses Server files ( PHP ) is only 300 KB ! 50 MB should be more than enough for the vast majority of users for the mySQL database. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future, including SQLite so the Ramses Server could be used without an actual SQL database. We provide a detailed, step-by-step guide to help you install your own web server satisfying these requirements on Windows , Linux or Mac OS if you need to, before installing the Ramses Server : install your own webserver . As soon as you have a working web server, you can install the Ramses server . Technical description The Ramses Server is a pretty standard REST API written in PHP which just serves as an interface to an SQL database. It receives requests from the Ramses Client and responds with the needed data. For developers who may want to extend or modify Ramses , or develop their own client, the complete reference of this API is available here .","title":"Introduction"},{"location":"components/server/#the-ramses-server","text":"The server stores and serves all shared data to the Ramses Client between all workstations in the studio. The Ramses Clients installed on these workstations connect to it to retrieve tha data they need. It is just a small software meant to be installable on small hardware and with very low requirements. You can install it on any computer in the studio (even just a simple Raspberry ) and make it available on your Local Area Network , or make it available from the internet. You can also easily install it on a shared or private hosting, even a low-cost one. Tip Although the currently available Beta Version of the Ramses Client cannot be used as a stand-alone, offline application yet and needs a connection to a Ramses Server , you can install a local server on any computer to test and use Ramses without needing a full scale online server. We\u2019re explaining in this documentation how to install such a standard webserver on your computer, read below.","title":"The Ramses Server"},{"location":"components/server/#requirements","text":"The Ramses Server must be installed on a computer with: An http web server like Apache PHP 7 An acces to a mySQL server and a dedicated database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 2GB of RAM if the SQL server is on the same computer than the Apache server. The needed space for the Ramses Server files ( PHP ) is only 300 KB ! 50 MB should be more than enough for the vast majority of users for the mySQL database. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future, including SQLite so the Ramses Server could be used without an actual SQL database. We provide a detailed, step-by-step guide to help you install your own web server satisfying these requirements on Windows , Linux or Mac OS if you need to, before installing the Ramses Server : install your own webserver . As soon as you have a working web server, you can install the Ramses server .","title":"Requirements"},{"location":"components/server/#technical-description","text":"The Ramses Server is a pretty standard REST API written in PHP which just serves as an interface to an SQL database. It receives requests from the Ramses Client and responds with the needed data. For developers who may want to extend or modify Ramses , or develop their own client, the complete reference of this API is available here .","title":"Technical description"},{"location":"components/server/admin/","text":"Warning Ramses is still under active development , and this documentation is still being written. This specific page of the documentation still has to be written, sorry!","title":"Administration"},{"location":"components/server/install/","text":"Ramses Server installation Ramses Server runs on very standard web servers, with the usual Web Server / PHP / mySQL stack. That means you can install it on almost any desktop or server computers, private server, shared hosting, workstation, Raspberry\u2026 It does not need much resources. Prerequisites Ramses Server must be installed on a computer with: An http web server like Apache PHP 7 An acces to a mySQL server and a dedicated database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 2GB of RAM if the SQL server is on the same computer than the Apache server. The needed space for the Ramses Server files ( PHP ) is only 300 KB ! 50 MB should be more than enough for the vast majority of users for the mySQL database. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future, include SQLite so the Ramses Server could be use without an actual SQL database. We provide a detailed, step-by-step guide to help you install your own web server satisfying these requirements on Windows , Linux or Mac OS if you need to, before installing the Ramses Server : install your own webserver . Standard Installation Create a new base on the SQL server, along with its user and password. Un-Zip the Ramses Server you\u2019ve downloaded. Edit config.php with needed info. Copy the Ramses Server files to the web server (you can just copy the ramses folder from the ZIP archive). Go to http://your.server/ramses/install (if you\u2019re running your own local server, this is probably something like http://localhost/ramses/install ) Delete the install folder from the server. The default user for Ramses is Admin with the password password . You should start by changing this name and password using the Ramses Client Application . config.php The config.php file you have to edit looks like that: // ==== SQL SETTINGS ==== // Host URL $sqlHost = \"localhost\"; $sqlPort = 3306; // Database name $sqlDBName = \"ramses\"; // User $sqlUser = \"ramses\"; // Password $sqlpassword = \"ramsesdbpassword\"; // Table prefix // DO NOT CHANGE THIS, not working yet $tablePrefix = \"ram\"; // ==== SESSION SETTINGS ==== // Session timeout (seconds) // The client will be disconnected after being idle for this time // 30 minutes by default (1800) are more than enough: // The official client makes a call at least every 2 minutes by default. $sessionTimeout = 1800; // Max Session timeout (seconds) // The client will be disconnected no matter what after this time // 5 hours by default( 18000 ) $cookieTimeout = 18000; Hint You will need your database information to configure the Ramses Server to use it. If you don\u2019t know how to do that or if you\u2019ve just installed your own web server following our instructions , read the next section first. $sqlHost is the url or IP of your MySQL server. If you\u2019ve installed your own server locally, you can leave it to \"localhost\" . Don\u2019t forget the quotes! $sqlPort is the port used by the MySQL server. 3306 is the default for most installations, if you need something different, your hosting provider should tell you. $sqlDBName is the name of the specific database you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $sqlUser is the name of the specific MySQL user you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $sqlpassword is the password of the specific MySQL user you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $tablePrefix is a prefix which will be used for the name of the database tables used by Ramses . As soon as this will be implemented, it will allow you to share a database with other instances of Ramses and even any other application (for example if your provider doesn\u2019t allow you to create more databases on your server). Tip If you know what you\u2019re doing, you can actually already change the table prefix, but Ramses will be installed using the default prefix anyway. That means you have to install Ramses with this default ram prefix, then rename all the tables with a new prefix, and finally change the prefix in config.php . Preparing the database Whether you\u2019ve installed your own web server (maybe by following our procedure in order to test the Beta Version of Ramses without using an online server) or you\u2019ve order a shared or private hosting, you will need to create a database to be used by Ramses on the MySQL server. Most of the time, you can do this with phpMyAdmin , although the procedure can be different depending on your web hosting provider. Here are some explanations about how to do that with phpMyAdmin . First, go to the phpMyAdmin web interface. If you\u2019ve installed your own web server locally, this is probably http://localhost/phpmyadmin . Create a new database: on the left panel, click on New . Choose a name, for example ramses and click on Create . This is the name of the database which will be used later in the Ramses Server configuration. The new database should be automatically selected; if not, click on its name on the left panel. Now let\u2019s create a new user for Ramses : click on the Privileges tab. Click on Add user account under the New section. Set the basic login information. The user name can just be ramses ; the user name and password will be used in the Ramses Server configuration later. If your using your own local server, it is better to set the Host name to be Local / localhost . Leave all other options to their defaults, and click on Go at the bottom of the page. Leave all these options to their defaults, and click again on Go . That\u2019s all! you\u2019re ready to finish the installation of the Ramses Server .","title":"Installation"},{"location":"components/server/install/#ramses-server-installation","text":"Ramses Server runs on very standard web servers, with the usual Web Server / PHP / mySQL stack. That means you can install it on almost any desktop or server computers, private server, shared hosting, workstation, Raspberry\u2026 It does not need much resources.","title":"Ramses Server installation"},{"location":"components/server/install/#prerequisites","text":"Ramses Server must be installed on a computer with: An http web server like Apache PHP 7 An acces to a mySQL server and a dedicated database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 2GB of RAM if the SQL server is on the same computer than the Apache server. The needed space for the Ramses Server files ( PHP ) is only 300 KB ! 50 MB should be more than enough for the vast majority of users for the mySQL database. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future, include SQLite so the Ramses Server could be use without an actual SQL database. We provide a detailed, step-by-step guide to help you install your own web server satisfying these requirements on Windows , Linux or Mac OS if you need to, before installing the Ramses Server : install your own webserver .","title":"Prerequisites"},{"location":"components/server/install/#standard-installation","text":"Create a new base on the SQL server, along with its user and password. Un-Zip the Ramses Server you\u2019ve downloaded. Edit config.php with needed info. Copy the Ramses Server files to the web server (you can just copy the ramses folder from the ZIP archive). Go to http://your.server/ramses/install (if you\u2019re running your own local server, this is probably something like http://localhost/ramses/install ) Delete the install folder from the server. The default user for Ramses is Admin with the password password . You should start by changing this name and password using the Ramses Client Application .","title":"Standard Installation"},{"location":"components/server/install/#configphp","text":"The config.php file you have to edit looks like that: // ==== SQL SETTINGS ==== // Host URL $sqlHost = \"localhost\"; $sqlPort = 3306; // Database name $sqlDBName = \"ramses\"; // User $sqlUser = \"ramses\"; // Password $sqlpassword = \"ramsesdbpassword\"; // Table prefix // DO NOT CHANGE THIS, not working yet $tablePrefix = \"ram\"; // ==== SESSION SETTINGS ==== // Session timeout (seconds) // The client will be disconnected after being idle for this time // 30 minutes by default (1800) are more than enough: // The official client makes a call at least every 2 minutes by default. $sessionTimeout = 1800; // Max Session timeout (seconds) // The client will be disconnected no matter what after this time // 5 hours by default( 18000 ) $cookieTimeout = 18000; Hint You will need your database information to configure the Ramses Server to use it. If you don\u2019t know how to do that or if you\u2019ve just installed your own web server following our instructions , read the next section first. $sqlHost is the url or IP of your MySQL server. If you\u2019ve installed your own server locally, you can leave it to \"localhost\" . Don\u2019t forget the quotes! $sqlPort is the port used by the MySQL server. 3306 is the default for most installations, if you need something different, your hosting provider should tell you. $sqlDBName is the name of the specific database you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $sqlUser is the name of the specific MySQL user you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $sqlpassword is the password of the specific MySQL user you have to create for Ramses . Read below to learn how to create it with phpMyAdmin ; the procedure can be different according to your hosting provider. $tablePrefix is a prefix which will be used for the name of the database tables used by Ramses . As soon as this will be implemented, it will allow you to share a database with other instances of Ramses and even any other application (for example if your provider doesn\u2019t allow you to create more databases on your server). Tip If you know what you\u2019re doing, you can actually already change the table prefix, but Ramses will be installed using the default prefix anyway. That means you have to install Ramses with this default ram prefix, then rename all the tables with a new prefix, and finally change the prefix in config.php .","title":"config.php"},{"location":"components/server/install/#preparing-the-database","text":"Whether you\u2019ve installed your own web server (maybe by following our procedure in order to test the Beta Version of Ramses without using an online server) or you\u2019ve order a shared or private hosting, you will need to create a database to be used by Ramses on the MySQL server. Most of the time, you can do this with phpMyAdmin , although the procedure can be different depending on your web hosting provider. Here are some explanations about how to do that with phpMyAdmin . First, go to the phpMyAdmin web interface. If you\u2019ve installed your own web server locally, this is probably http://localhost/phpmyadmin . Create a new database: on the left panel, click on New . Choose a name, for example ramses and click on Create . This is the name of the database which will be used later in the Ramses Server configuration. The new database should be automatically selected; if not, click on its name on the left panel. Now let\u2019s create a new user for Ramses : click on the Privileges tab. Click on Add user account under the New section. Set the basic login information. The user name can just be ramses ; the user name and password will be used in the Ramses Server configuration later. If your using your own local server, it is better to set the Host name to be Local / localhost . Leave all other options to their defaults, and click on Go at the bottom of the page. Leave all these options to their defaults, and click again on Go . That\u2019s all! you\u2019re ready to finish the installation of the Ramses Server .","title":"Preparing the database"},{"location":"components/server/web-server/","text":"Install your own webserver Windows, with XAMPP Install XAMPP XAMPP is a completely free, easy to install Apache distribution containing MariaDB , PHP , and Perl . The XAMPP open source package has been set up to be easy to install and to use. First, download the 64-bit PHP 7.4 version of XAMPP for Windows , and launch the installation. If you see this warning, don\u2019t choose to install XAMPP in C:\\Program Files in the next steps! You don\u2019t necessarily need all these packages to run the Ramses Server , but it\u2019s your choice. What you absolutely need is: Apache , MySQL , PHP and phpMyAdmin . The next steps are pretty obvious (selec the destination folder and the language\u2026). The installation takes just a couple of minutes. Choose to start the control panel at the end of the installer. Configure XAMPP To start using your brand new server, you can just click on the Start button for Apache and MySQL in the XAMPP control panel. The Admin button next to MySQL will send you directly to http://localhost/phpmyadmin where you can manage your MySQL database. Don\u2019t worry, what you\u2019ll need to do with that when installing the Ramses Server is explained in the Ramses Server installation guide . You may like your Apache and MySQL servers to start automatically with windows when using Ramses , let\u2019s do that! Just click on Config . Now check the Autostart of modules boxes for Apache and MySQL , and Save . If you have an alert saying Cannot create file \"\". Forbidden acess , close the XAMPP control panel , and restart it as administrator (right-click the start menu entry and select \u201crun as administrator\u201d). Now the server will start automatically with XAMPP . Let\u2019s just make XAMPP start with windows. Open a file explorer and locate the folder where you\u2019ve installed XAMP , and copy the file named xampp-control.exe . Open the startup folder of Windows : hit [Ctrl + R] and type shell:startup . Then, right click inside this folder and select Paste a shortcut , and voil\u00e0! Now you can safely install the Ramses Server . You will have to install it in the htdocs subfolder of the installation folder of XAMPP ( C:\\xampp\\htdocs in our example). Warning XAMPP is not meant to serve your data to the internet! You can safely use it to test and use Ramses locally, but if you want to give it access to the internet, you\u2019ll have to secure it first (set a password for the root user of MySQL and phpMyAdmin , and secure the FTP and other servers if you\u2019ve installed them). Read the FAQ of XAMPP to learn more (this link is available only if your Apache server is running). Debian, Ubuntu and other debian-based Linux This step by step procedure should work on any Linux distribution provided with aptitude like Ubuntu and Debian to install packages. Note that installing a standard web server on Linux is not difficult and there are a lot of resources about it online. Hint If you have enough trust in us, you can just copy the bash script we provide at the end of the procedure and run that. Before installing any new software on your system, it\u2019s a good idea to update already installed packages: sudo apt update sudo apt upgrade Install Apache, the web server sudo apt install apache2 Test Apache by going to http://localhost or http://127.0.0.1 Server files are located in /var/www/ and configurations files are in /etc/apache2/ (he main file is apache2.conf ) It suppresses some warning info to add a server name in the configuration file. Edit /etc/apache2/sites-available/000-default.conf as root ) to uncomment/add the line ServerName localhost . Starting and stopping Apache (it automatically starts during system boot by default) # stop sudo apachectl stop # start sudo apachectl start Install PHP sudo apt install php php-mysql -libapache2-mod-php php-dev Check if PHP is working php -version You may need to enable the Apache php module sudo a2dismod mpm_event && sudo a2enmod mpm_prefork && sudo a2enmod php7.4 # change the php version if not 7.4 Test PHP by creating a /var/www/html/phptest.php file containing <?php phpinfo(); ?> , and navigate to http://localhost/phptest.php . You can create this file quickly with the command line too: echo \"<?php phpinfo() ?>\" | sudo tee -a /var/www/html/phptest.php > /dev/null Install MySQL sudo apt install mysql-server You will need to set the root password; first, connect to MySQL : sudo mysql -u root -p # blank password Set password: ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'P@ssw0rd'; Keep this password somewhere, it\u2019s the one you will need to manage the database. Exit MySQL with exit . Install phpMyAdmin phpMyAdmin is a nice tool to manage your MySQL databases that will help you prepare the Ramses Server . sudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl You have a few options to choose when prompted by the installer. For the server selection, choose apache2 Warning Warning: When the prompt appears, \u201capache2\u201d is highlighted, but not selected. If you do not hit SPACE to select Apache , the installer will not move the necessary files during installation. Hit SPACE , TAB , and then ENTER to select Apache . If you missed this step, the easiest way to fix it is just to purge the installation of phpMyAdmin before starting it again: bash sudo apt purge phpmyadmin sudo apt install phpmyadmin Select Yes when asked whether to use dbconfig-common to set up the database. You will then be asked to choose and confirm a MySQL application password for phpMyAdmin . Enable the needed PHP extension: sudo phpenmod mbstring Restart Apache : sudo systemctl restart apache2 phpMyAdmin is available at http://localhost/phpmyadmin Installation script Here is a bash script to automate all of these. Copy it into a text file with the .sh extension, make it executable then run it from a terminal with ./theScipt.sh . Be careful as the included installation of phpMyAdmin will prompt a few questions, read just above to be sure what you need to answer. #!/bin/bash sudo apt update sudo apt upgrade # Apache sudo apt install apache2 # PHP sudo apt install php php-mysql -libapache2-mod-php php-dev # NOTE: you may need to change the version of PHP here: sudo a2dismod mpm_event && sudo a2enmod mpm_prefork && sudo a2enmod php7.4 echo \"<?php phpinfo() ?>\" | sudo tee -a /var/www/html/phptest.php > /dev/null # MySQL sudo apt install mysql-server # The the password to the root user to be 'admin' sudo mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'admin';\" # Add a non-root user sudo mysql -u root -padmin -e \"CREATE USER 'admin'@'localhost' IDENTIFIED BY 'admin';\" sudo mysql -u root -padmin -e \"GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;\" # phpMyAdmin sudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl sudo phpenmod mbstring # Restart apache sudo systemctl restart apache2 echo \" === FINISHED ! === \" echo \"Test Apache at http://localhost\" echo \"Test php at http://localhost/phptest.php\" echo \"MySQL installed. User 'root' has password 'admin'.\" echo \"Sometimes you need a non-root user. Created MySQL user 'admin' with password 'admin'\" echo \"You may change these passwords and manage the MySQL databases with phpMyAdmin: http://localhost/phpmyadmin","title":"A web server"},{"location":"components/server/web-server/#install-your-own-webserver","text":"","title":"Install your own webserver"},{"location":"components/server/web-server/#windows-with-xampp","text":"","title":"Windows, with XAMPP"},{"location":"components/server/web-server/#install-xampp","text":"XAMPP is a completely free, easy to install Apache distribution containing MariaDB , PHP , and Perl . The XAMPP open source package has been set up to be easy to install and to use. First, download the 64-bit PHP 7.4 version of XAMPP for Windows , and launch the installation. If you see this warning, don\u2019t choose to install XAMPP in C:\\Program Files in the next steps! You don\u2019t necessarily need all these packages to run the Ramses Server , but it\u2019s your choice. What you absolutely need is: Apache , MySQL , PHP and phpMyAdmin . The next steps are pretty obvious (selec the destination folder and the language\u2026). The installation takes just a couple of minutes. Choose to start the control panel at the end of the installer.","title":"Install XAMPP"},{"location":"components/server/web-server/#configure-xampp","text":"To start using your brand new server, you can just click on the Start button for Apache and MySQL in the XAMPP control panel. The Admin button next to MySQL will send you directly to http://localhost/phpmyadmin where you can manage your MySQL database. Don\u2019t worry, what you\u2019ll need to do with that when installing the Ramses Server is explained in the Ramses Server installation guide . You may like your Apache and MySQL servers to start automatically with windows when using Ramses , let\u2019s do that! Just click on Config . Now check the Autostart of modules boxes for Apache and MySQL , and Save . If you have an alert saying Cannot create file \"\". Forbidden acess , close the XAMPP control panel , and restart it as administrator (right-click the start menu entry and select \u201crun as administrator\u201d). Now the server will start automatically with XAMPP . Let\u2019s just make XAMPP start with windows. Open a file explorer and locate the folder where you\u2019ve installed XAMP , and copy the file named xampp-control.exe . Open the startup folder of Windows : hit [Ctrl + R] and type shell:startup . Then, right click inside this folder and select Paste a shortcut , and voil\u00e0! Now you can safely install the Ramses Server . You will have to install it in the htdocs subfolder of the installation folder of XAMPP ( C:\\xampp\\htdocs in our example). Warning XAMPP is not meant to serve your data to the internet! You can safely use it to test and use Ramses locally, but if you want to give it access to the internet, you\u2019ll have to secure it first (set a password for the root user of MySQL and phpMyAdmin , and secure the FTP and other servers if you\u2019ve installed them). Read the FAQ of XAMPP to learn more (this link is available only if your Apache server is running).","title":"Configure XAMPP"},{"location":"components/server/web-server/#debian-ubuntu-and-other-debian-based-linux","text":"This step by step procedure should work on any Linux distribution provided with aptitude like Ubuntu and Debian to install packages. Note that installing a standard web server on Linux is not difficult and there are a lot of resources about it online. Hint If you have enough trust in us, you can just copy the bash script we provide at the end of the procedure and run that. Before installing any new software on your system, it\u2019s a good idea to update already installed packages: sudo apt update sudo apt upgrade","title":"Debian, Ubuntu and other debian-based Linux"},{"location":"components/server/web-server/#install-apache-the-web-server","text":"sudo apt install apache2 Test Apache by going to http://localhost or http://127.0.0.1 Server files are located in /var/www/ and configurations files are in /etc/apache2/ (he main file is apache2.conf ) It suppresses some warning info to add a server name in the configuration file. Edit /etc/apache2/sites-available/000-default.conf as root ) to uncomment/add the line ServerName localhost . Starting and stopping Apache (it automatically starts during system boot by default) # stop sudo apachectl stop # start sudo apachectl start","title":"Install Apache, the web server"},{"location":"components/server/web-server/#install-php","text":"sudo apt install php php-mysql -libapache2-mod-php php-dev Check if PHP is working php -version You may need to enable the Apache php module sudo a2dismod mpm_event && sudo a2enmod mpm_prefork && sudo a2enmod php7.4 # change the php version if not 7.4 Test PHP by creating a /var/www/html/phptest.php file containing <?php phpinfo(); ?> , and navigate to http://localhost/phptest.php . You can create this file quickly with the command line too: echo \"<?php phpinfo() ?>\" | sudo tee -a /var/www/html/phptest.php > /dev/null","title":"Install PHP"},{"location":"components/server/web-server/#install-mysql","text":"sudo apt install mysql-server You will need to set the root password; first, connect to MySQL : sudo mysql -u root -p # blank password Set password: ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'P@ssw0rd'; Keep this password somewhere, it\u2019s the one you will need to manage the database. Exit MySQL with exit .","title":"Install MySQL"},{"location":"components/server/web-server/#install-phpmyadmin","text":"phpMyAdmin is a nice tool to manage your MySQL databases that will help you prepare the Ramses Server . sudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl You have a few options to choose when prompted by the installer. For the server selection, choose apache2 Warning Warning: When the prompt appears, \u201capache2\u201d is highlighted, but not selected. If you do not hit SPACE to select Apache , the installer will not move the necessary files during installation. Hit SPACE , TAB , and then ENTER to select Apache . If you missed this step, the easiest way to fix it is just to purge the installation of phpMyAdmin before starting it again: bash sudo apt purge phpmyadmin sudo apt install phpmyadmin Select Yes when asked whether to use dbconfig-common to set up the database. You will then be asked to choose and confirm a MySQL application password for phpMyAdmin . Enable the needed PHP extension: sudo phpenmod mbstring Restart Apache : sudo systemctl restart apache2 phpMyAdmin is available at http://localhost/phpmyadmin","title":"Install phpMyAdmin"},{"location":"components/server/web-server/#installation-script","text":"Here is a bash script to automate all of these. Copy it into a text file with the .sh extension, make it executable then run it from a terminal with ./theScipt.sh . Be careful as the included installation of phpMyAdmin will prompt a few questions, read just above to be sure what you need to answer. #!/bin/bash sudo apt update sudo apt upgrade # Apache sudo apt install apache2 # PHP sudo apt install php php-mysql -libapache2-mod-php php-dev # NOTE: you may need to change the version of PHP here: sudo a2dismod mpm_event && sudo a2enmod mpm_prefork && sudo a2enmod php7.4 echo \"<?php phpinfo() ?>\" | sudo tee -a /var/www/html/phptest.php > /dev/null # MySQL sudo apt install mysql-server # The the password to the root user to be 'admin' sudo mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'admin';\" # Add a non-root user sudo mysql -u root -padmin -e \"CREATE USER 'admin'@'localhost' IDENTIFIED BY 'admin';\" sudo mysql -u root -padmin -e \"GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;\" # phpMyAdmin sudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl sudo phpenmod mbstring # Restart apache sudo systemctl restart apache2 echo \" === FINISHED ! === \" echo \"Test Apache at http://localhost\" echo \"Test php at http://localhost/phptest.php\" echo \"MySQL installed. User 'root' has password 'admin'.\" echo \"Sometimes you need a non-root user. Created MySQL user 'admin' with password 'admin'\" echo \"You may change these passwords and manage the MySQL databases with phpMyAdmin: http://localhost/phpmyadmin","title":"Installation script"},{"location":"dev/","text":"Developping and extending Ramses Warning Ramses is still under active development , and this documentation is still being written. This specific page of the documentation is just a draft, sorry! Ramses already includes a few different APIs to allow for different levels of extensibility, and don\u2019t forget, Ramses is free and open source, you can modify it according to your needs, and you can also contribute ;) Extending Ramses Several levels: Add-Ons extensibility Using: The Ramses Scripting API The Daemon API Client extensibility Using the Server API Add-ons Extending a provided Add-On Adobe After Effects Autodesk Maya Blender Inkscape Krita Developping a new Add-On using the Ramses Scripting API Python Adobe ExtendScript Other languages: building a new API using the Daemon API Client Application Using Triggers and scripts with the provided client Windows 64 bits MacOS Linux amd64 Compiling the existing client for a new platform Building a new client using the Server API Contributing and developping Ramses WIP","title":"Introduction"},{"location":"dev/#developping-and-extending-ramses","text":"Warning Ramses is still under active development , and this documentation is still being written. This specific page of the documentation is just a draft, sorry! Ramses already includes a few different APIs to allow for different levels of extensibility, and don\u2019t forget, Ramses is free and open source, you can modify it according to your needs, and you can also contribute ;)","title":"Developping and extending Ramses"},{"location":"dev/#extending-ramses","text":"Several levels: Add-Ons extensibility Using: The Ramses Scripting API The Daemon API Client extensibility Using the Server API","title":"Extending Ramses"},{"location":"dev/#add-ons","text":"Extending a provided Add-On Adobe After Effects Autodesk Maya Blender Inkscape Krita Developping a new Add-On using the Ramses Scripting API Python Adobe ExtendScript Other languages: building a new API using the Daemon API","title":"Add-ons"},{"location":"dev/#client-application","text":"Using Triggers and scripts with the provided client Windows 64 bits MacOS Linux amd64 Compiling the existing client for a new platform Building a new client using the Server API","title":"Client Application"},{"location":"dev/#contributing-and-developping-ramses","text":"WIP","title":"Contributing and developping Ramses"},{"location":"dev/add-ons-reference/","text":"Scripting API reference Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. As this document is referring to different scripting languages, it uses general terms which may be different than what is actually used in specific languages. (TODO: ADD THE LINK TO THE GITHUB REPOS OF THE APIs / LINK TO GET THEM ON RXLAB.ORG) Hint Some of the elements described in this documentation have to be interpreted differently depending on the language used in the implementations of the Ramses Add-ons API and may vary a bit. Read the examples below to see the differences between a few scripting languages. Classes This is the comprehensive list of available classes. In the Ramses Add-ons API , everything is contained in these classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamAsset RamItem An asset. RamDaemonInterface The Class used to communicate with the Ramses Daemon RamFileManager Generic tools to handle files and the Ramses Naming Scheme RamFileType A File type (name and possible extensions) RamItem RamObject The base class for Shots and Assets. RamMetaDataManager A Class to get/set metadata from files. RamObject The base class for most of Ramses objects. RamPipe A pipe which connects two steps together in the production pipeline RamPipeFile The description of a file type going through a pipe RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamSettings Gets and saves settings used by Ramses. RamShot RamItem A shot. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject A step in the production of the shots or assets of the project. RamUser RamObject The class representing users. Global Methods Method Arguments Description log string : message , LogLevel : level = LogLevel.Info Logs a message to the console. The level must be one of LogLevel.DataReceived , LogLevel.DataSent , LogLevel.Debug , LogLevel.Info , LogLevel.Critical , LogLevel.Fatal Examples Here are a few examples showing how this API can be used. Include / Import the API # Python # Use your usual preferred way to import the module. from ramses import * # The unique `Ramses` instance is available as `Ramses.instance()`. myRamses = Ramses.instance() theSettings = myRamses.settings myShot = RamShot.getFromPath(\"path/to/the/shot\") aNewStatus = RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ) myShot.setStatus(aNewStatus, myRamses.currentStep()) # or (this is the recommended way) import ramses as ram myRamses = ram.Ramses.instance() theSettings = myRamses.settings() myShot = ram.RamShot.getFromPath(\"path/to/the/shot\") aNewStatus = ram.RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ) myShot.setStatus(aNewStatus, myRamses.currentStep()) // ExtendScript // Just include the file the usual way. #include ramses.jsxinc // The unique `Ramses` instance is available as `Ramses.instance()`. var myRamses = Ramses.instance(); var theSettings = myRamses.settings(); var myShot = RamShot.getFromPath(\"path/to/the/shot\"); var aNewStatus = new RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ); myShot.setStatus(aNewStatus, myRamses.currentStep()); Enumerated values (constants) Enumerated values (a.k.a. Constants) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple Color.RED, or Shape.RECTANGLE). The value itself can be of any type (array, string, number\u2026). In this documentation they\u2019re written like this: ValueType.VALUE , i.e. ItemType.SHOT or ItemType.ASSET , and they\u2019re used the same way in the actual code. # Python from ramses import RamItem, ItemType # Get an item from a specific file path anItem = RamItem.getFromPath( somePath ) if anItem is not None: # We want it only if it's a shot, # We can use the enum ItemType to compare the value. if anItem.itemType() == ItemType.SHOT: doSomething() // ExtendScript #include ramses.jsxinc // Get an item from a specific file path var anItem = RamItem.getFromPath( somePath ); if (anItem != null) { // We want it only if it's a shot, // We can use the enum ItemType to compare the value. if ( anItem.itemType() == ItemType.SHOT ) doSomething(); } Save command for Maya (Python) This example shows how to use the RamFileManager class to implement a save command in Maya with automatic backup in the _versions subfolder. import maya.cmds as cmds import ramses as ram ramses = ram.Ramses.instance() settings = ram.RamSettings.instance() def ramSave(): # The current maya file currentFilePath = cmds.file( q=True, sn=True ) ram.log(\"Saving file: \" + currentFilePath) # Check if the Daemon is available, if Ramses is set to be used \"online\" if settings.online: if not ramses.connect(): cmds.confirmDialog( title=\"No User\", message=\"You must log in Ramses first!\", button=[\"OK\"], icon=\"warning\" ) ramses.showClient() cmds.error( \"User not available: You must log in Ramses first!\" ) return # Get the save path (Ramses will check if the current file has to be renamed to respect the Ramses Tree and Naming Scheme) saveFilePath = ram.RamFileManager.getSaveFilePath( currentFilePath ) if not saveFilePath: # Ramses may return None if the current file name does not respeect the Ramses Naming Scheme cmds.warning( ram.Log.MalformedName ) # Set file to be renamed cmds.file( renameToSave = True ) cmds.inViewMessage( msg='Malformed Ramses file name! <hl>Please save with a correct name first</hl>.', pos='midCenter', fade=True ) return # If the current Maya file is inside a preview/publish/version subfolder, we're going to increment # to be sure not to lose the previous working file. increment = False if ram.RamFileManager.inReservedFolder( currentFilePath ): increment = True cmds.warning( \"Incremented and Saved as \" + saveFilePath ) # Set the save name and save cmds.file( rename = saveFilePath ) cmds.file( save=True, options=\"v=1;\" ) # Backup / Increment backupFilePath = ram.RamFileManager.copyToVersion( saveFilePath, increment=increment ) backupFileName = os.path.basename( backupFilePath ) decomposedFileName = ram.RamFileManager.decomposeRamsesFileName( backupFileName ) newVersion = str( decomposedFileName['version'] ) ram.log( \"Scene saved! Current version is: \" + newVersion ) cmds.inViewMessage( msg='Scene saved! <hl>v' + newVersion + '</hl>', pos='midCenter', fade=True ) ramSave()","title":"Reference"},{"location":"dev/add-ons-reference/#scripting-api-reference","text":"Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. As this document is referring to different scripting languages, it uses general terms which may be different than what is actually used in specific languages. (TODO: ADD THE LINK TO THE GITHUB REPOS OF THE APIs / LINK TO GET THEM ON RXLAB.ORG) Hint Some of the elements described in this documentation have to be interpreted differently depending on the language used in the implementations of the Ramses Add-ons API and may vary a bit. Read the examples below to see the differences between a few scripting languages.","title":"Scripting API reference"},{"location":"dev/add-ons-reference/#classes","text":"This is the comprehensive list of available classes. In the Ramses Add-ons API , everything is contained in these classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamAsset RamItem An asset. RamDaemonInterface The Class used to communicate with the Ramses Daemon RamFileManager Generic tools to handle files and the Ramses Naming Scheme RamFileType A File type (name and possible extensions) RamItem RamObject The base class for Shots and Assets. RamMetaDataManager A Class to get/set metadata from files. RamObject The base class for most of Ramses objects. RamPipe A pipe which connects two steps together in the production pipeline RamPipeFile The description of a file type going through a pipe RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamSettings Gets and saves settings used by Ramses. RamShot RamItem A shot. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject A step in the production of the shots or assets of the project. RamUser RamObject The class representing users.","title":"Classes"},{"location":"dev/add-ons-reference/#global-methods","text":"Method Arguments Description log string : message , LogLevel : level = LogLevel.Info Logs a message to the console. The level must be one of LogLevel.DataReceived , LogLevel.DataSent , LogLevel.Debug , LogLevel.Info , LogLevel.Critical , LogLevel.Fatal","title":"Global Methods"},{"location":"dev/add-ons-reference/#examples","text":"Here are a few examples showing how this API can be used.","title":"Examples"},{"location":"dev/add-ons-reference/#include-import-the-api","text":"# Python # Use your usual preferred way to import the module. from ramses import * # The unique `Ramses` instance is available as `Ramses.instance()`. myRamses = Ramses.instance() theSettings = myRamses.settings myShot = RamShot.getFromPath(\"path/to/the/shot\") aNewStatus = RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ) myShot.setStatus(aNewStatus, myRamses.currentStep()) # or (this is the recommended way) import ramses as ram myRamses = ram.Ramses.instance() theSettings = myRamses.settings() myShot = ram.RamShot.getFromPath(\"path/to/the/shot\") aNewStatus = ram.RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ) myShot.setStatus(aNewStatus, myRamses.currentStep()) // ExtendScript // Just include the file the usual way. #include ramses.jsxinc // The unique `Ramses` instance is available as `Ramses.instance()`. var myRamses = Ramses.instance(); var theSettings = myRamses.settings(); var myShot = RamShot.getFromPath(\"path/to/the/shot\"); var aNewStatus = new RamStatus( myRamses.state(\"WIP\"), myRamses.currentUser(), \"A comment\" ); myShot.setStatus(aNewStatus, myRamses.currentStep());","title":"Include / Import the API"},{"location":"dev/add-ons-reference/#enumerated-values-constants","text":"Enumerated values (a.k.a. Constants) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple Color.RED, or Shape.RECTANGLE). The value itself can be of any type (array, string, number\u2026). In this documentation they\u2019re written like this: ValueType.VALUE , i.e. ItemType.SHOT or ItemType.ASSET , and they\u2019re used the same way in the actual code. # Python from ramses import RamItem, ItemType # Get an item from a specific file path anItem = RamItem.getFromPath( somePath ) if anItem is not None: # We want it only if it's a shot, # We can use the enum ItemType to compare the value. if anItem.itemType() == ItemType.SHOT: doSomething() // ExtendScript #include ramses.jsxinc // Get an item from a specific file path var anItem = RamItem.getFromPath( somePath ); if (anItem != null) { // We want it only if it's a shot, // We can use the enum ItemType to compare the value. if ( anItem.itemType() == ItemType.SHOT ) doSomething(); }","title":"Enumerated values (constants)"},{"location":"dev/add-ons-reference/#save-command-for-maya-python","text":"This example shows how to use the RamFileManager class to implement a save command in Maya with automatic backup in the _versions subfolder. import maya.cmds as cmds import ramses as ram ramses = ram.Ramses.instance() settings = ram.RamSettings.instance() def ramSave(): # The current maya file currentFilePath = cmds.file( q=True, sn=True ) ram.log(\"Saving file: \" + currentFilePath) # Check if the Daemon is available, if Ramses is set to be used \"online\" if settings.online: if not ramses.connect(): cmds.confirmDialog( title=\"No User\", message=\"You must log in Ramses first!\", button=[\"OK\"], icon=\"warning\" ) ramses.showClient() cmds.error( \"User not available: You must log in Ramses first!\" ) return # Get the save path (Ramses will check if the current file has to be renamed to respect the Ramses Tree and Naming Scheme) saveFilePath = ram.RamFileManager.getSaveFilePath( currentFilePath ) if not saveFilePath: # Ramses may return None if the current file name does not respeect the Ramses Naming Scheme cmds.warning( ram.Log.MalformedName ) # Set file to be renamed cmds.file( renameToSave = True ) cmds.inViewMessage( msg='Malformed Ramses file name! <hl>Please save with a correct name first</hl>.', pos='midCenter', fade=True ) return # If the current Maya file is inside a preview/publish/version subfolder, we're going to increment # to be sure not to lose the previous working file. increment = False if ram.RamFileManager.inReservedFolder( currentFilePath ): increment = True cmds.warning( \"Incremented and Saved as \" + saveFilePath ) # Set the save name and save cmds.file( rename = saveFilePath ) cmds.file( save=True, options=\"v=1;\" ) # Backup / Increment backupFilePath = ram.RamFileManager.copyToVersion( saveFilePath, increment=increment ) backupFileName = os.path.basename( backupFilePath ) decomposedFileName = ram.RamFileManager.decomposeRamsesFileName( backupFileName ) newVersion = str( decomposedFileName['version'] ) ram.log( \"Scene saved! Current version is: \" + newVersion ) cmds.inViewMessage( msg='Scene saved! <hl>v' + newVersion + '</hl>', pos='midCenter', fade=True ) ramSave()","title":"Save command for Maya (Python)"},{"location":"dev/add-ons-reference/enum/","text":"Enumerated values (constants) Enumerated values (a.k.a. Constants) are predefined sets of values to be used in specific methods. Their name should be in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple Color.RED , or Shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). In this documentation they\u2019re written like this: ValueType.VALUE , i.e. ItemType.SHOT or ItemType.ASSET , and they\u2019re used the same way in the actual code. Warning For the current 0.x versions of the framework, not all enumerated values respect the naming CAPITAL_SNAKE_CASE convention. This will change before the release of 1.0; when using the API during the 0.x development phase, be careful when updating as you may need to rename these values in your code. This reference will be kept up-to-date in real time. FileNames The names of some files reserved by Ramses . Name Actual value Description FileNames. META_DATA \"_ramses_data.json\" FolderNames The names of the folders used by the Ramses Tree . Name Actual value Description FolderNames. admin \"00-ADMIN\" FolderNames. assets \"04-ASSETS FolderNames. export \"06-EXPORT FolderNames. postProd 03-POST-PROD\" FolderNames. preProd \"01-PRE-PROD\" FolderNames. preview \"_preview\" FolderNames. prod \"02-PROD\" FolderNames. projects \"Projects\" FolderNames. publish \"_published\" FolderNames. shots \"05-SHOTS\" FolderNames. userConfig \"Config\" FolderNames. users \"Users\" FolderNames. versions \"_versions\" ItemType Used to differenciate between Shots, Assets, and General items. Name Actual value Description ItemType. ASSET 'A' ItemType. GENERAL 'G' ItemType. SHOT 'S' Log A list of messages to be logged / shown to the user. Name Actual value Description Log. MalformedName \"Cannot work on this file as it does not respect the Ramses' naming scheme, sorry.\" Log. NoProject \"There's no current project. Select a project first.\" Log. NotAnItem \"This file does not seem to be a valid Ramses Item, sorry.\" Log. NoUser \"There's no current user. You may need to log in.\" Log. PathNotFound \"The file or folder path could not be found.\" Log. StateNotFound \"State not found.\" LogLevel Importance of the log messages. The API itself should not log any LogLevel.Info , this level is reserved for the add-ons developped using the API. Name Actual value Description LogLevel. DataReceived -2 The raw data received from the Daemon LogLevel. DataSent -1 The queries sent to the Daemon LogLevel. Debug 0 General debug information LogLevel. Info 1 General information to be shown to the user LogLevel. Critical 2 An non-blocking error LogLevel. Fatal 3 A fatal error MetaDataKeys The available predefined keys to store file metadata. Name Actual value Description MetaDataKeys. COMMENT \"comment\" A comment associated to the file MetaDataKeys. PIPE_TYPE \"pipeFileShortName\" The type of the pipe associated to the file MetaDataKeys. VERSION \"version\" A version associated to the file MetaDataKeys. VERSION_FILE \"versionFilePath\" A version file associated to the file StepType The type of a step. Usually used to filter available steps. Name Value Description StepType. PRE_PRODUCTION 'PRE_PRODUCTION' StepType. ASSET_PRODUCTION 'ASSET_PRODUCTION' StepType. SHOT_PRODUCTION 'SHOT_PRODUCTION' StepType. POST_PRODUCTION 'POST_PRODUCTION' StepType. PRODUCTION 'PRODUCTION' Use for ASSET and SHOT production together. StepType. ALL 'ALL' Use for all steps. UserRole The role of the user (i.e. its administration rights). Name Value Description UserRole. ADMIN 3 UserRole. PROJECT_ADMIN 2 UserRole. LEAD 1 UserRole. STANDARD 0 Examples # Python from ramses import RamItem, ItemType # Get an item from a specific file path anItem = RamItem.getFromPath( somePath ) if anItem is not None: # We want it only if it's a shot, # We can use the enum ItemType to compare the value. if anItem.itemType() == ItemType.SHOT: doSomething() // ExtendScript #include ramses.jsxinc // Get an item from a specific file path var anItem = RamItem.getFromPath( somePath ); if (anItem != null) { // We want it only if it's a shot, // We can use the enum ItemType to compare the value. if ( anItem.itemType() == ItemType.SHOT ) doSomething(); }","title":"Constants"},{"location":"dev/add-ons-reference/enum/#enumerated-values-constants","text":"Enumerated values (a.k.a. Constants) are predefined sets of values to be used in specific methods. Their name should be in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple Color.RED , or Shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). In this documentation they\u2019re written like this: ValueType.VALUE , i.e. ItemType.SHOT or ItemType.ASSET , and they\u2019re used the same way in the actual code. Warning For the current 0.x versions of the framework, not all enumerated values respect the naming CAPITAL_SNAKE_CASE convention. This will change before the release of 1.0; when using the API during the 0.x development phase, be careful when updating as you may need to rename these values in your code. This reference will be kept up-to-date in real time.","title":"Enumerated values (constants)"},{"location":"dev/add-ons-reference/enum/#filenames","text":"The names of some files reserved by Ramses . Name Actual value Description FileNames. META_DATA \"_ramses_data.json\"","title":"FileNames"},{"location":"dev/add-ons-reference/enum/#foldernames","text":"The names of the folders used by the Ramses Tree . Name Actual value Description FolderNames. admin \"00-ADMIN\" FolderNames. assets \"04-ASSETS FolderNames. export \"06-EXPORT FolderNames. postProd 03-POST-PROD\" FolderNames. preProd \"01-PRE-PROD\" FolderNames. preview \"_preview\" FolderNames. prod \"02-PROD\" FolderNames. projects \"Projects\" FolderNames. publish \"_published\" FolderNames. shots \"05-SHOTS\" FolderNames. userConfig \"Config\" FolderNames. users \"Users\" FolderNames. versions \"_versions\"","title":"FolderNames"},{"location":"dev/add-ons-reference/enum/#itemtype","text":"Used to differenciate between Shots, Assets, and General items. Name Actual value Description ItemType. ASSET 'A' ItemType. GENERAL 'G' ItemType. SHOT 'S'","title":"ItemType"},{"location":"dev/add-ons-reference/enum/#log","text":"A list of messages to be logged / shown to the user. Name Actual value Description Log. MalformedName \"Cannot work on this file as it does not respect the Ramses' naming scheme, sorry.\" Log. NoProject \"There's no current project. Select a project first.\" Log. NotAnItem \"This file does not seem to be a valid Ramses Item, sorry.\" Log. NoUser \"There's no current user. You may need to log in.\" Log. PathNotFound \"The file or folder path could not be found.\" Log. StateNotFound \"State not found.\"","title":"Log"},{"location":"dev/add-ons-reference/enum/#loglevel","text":"Importance of the log messages. The API itself should not log any LogLevel.Info , this level is reserved for the add-ons developped using the API. Name Actual value Description LogLevel. DataReceived -2 The raw data received from the Daemon LogLevel. DataSent -1 The queries sent to the Daemon LogLevel. Debug 0 General debug information LogLevel. Info 1 General information to be shown to the user LogLevel. Critical 2 An non-blocking error LogLevel. Fatal 3 A fatal error","title":"LogLevel"},{"location":"dev/add-ons-reference/enum/#metadatakeys","text":"The available predefined keys to store file metadata. Name Actual value Description MetaDataKeys. COMMENT \"comment\" A comment associated to the file MetaDataKeys. PIPE_TYPE \"pipeFileShortName\" The type of the pipe associated to the file MetaDataKeys. VERSION \"version\" A version associated to the file MetaDataKeys. VERSION_FILE \"versionFilePath\" A version file associated to the file","title":"MetaDataKeys"},{"location":"dev/add-ons-reference/enum/#steptype","text":"The type of a step. Usually used to filter available steps. Name Value Description StepType. PRE_PRODUCTION 'PRE_PRODUCTION' StepType. ASSET_PRODUCTION 'ASSET_PRODUCTION' StepType. SHOT_PRODUCTION 'SHOT_PRODUCTION' StepType. POST_PRODUCTION 'POST_PRODUCTION' StepType. PRODUCTION 'PRODUCTION' Use for ASSET and SHOT production together. StepType. ALL 'ALL' Use for all steps.","title":"StepType"},{"location":"dev/add-ons-reference/enum/#userrole","text":"The role of the user (i.e. its administration rights). Name Value Description UserRole. ADMIN 3 UserRole. PROJECT_ADMIN 2 UserRole. LEAD 1 UserRole. STANDARD 0","title":"UserRole"},{"location":"dev/add-ons-reference/enum/#examples","text":"# Python from ramses import RamItem, ItemType # Get an item from a specific file path anItem = RamItem.getFromPath( somePath ) if anItem is not None: # We want it only if it's a shot, # We can use the enum ItemType to compare the value. if anItem.itemType() == ItemType.SHOT: doSomething() // ExtendScript #include ramses.jsxinc // Get an item from a specific file path var anItem = RamItem.getFromPath( somePath ); if (anItem != null) { // We want it only if it's a shot, // We can use the enum ItemType to compare the value. if ( anItem.itemType() == ItemType.SHOT ) doSomething(); }","title":"Examples"},{"location":"dev/add-ons-reference/implementation/","text":"Implementation / API Dev notes Note This section is for the development of the low-level API only; you should not need these notes when developping your own add-on using the API. Hint Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API and may vary a bit. Enumerated Values Enumerated values (a.k.a. Constants ) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple color.RED , or shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). # Python # Enumerated values are public static attributes of a containing class. They're declared like this: class Group(): VALUE_1 = 0 VALUE_2 = 1 VALUE_3 = 2 # Example: class Color(): RED = [255,0,0] GREEN = [0,255,0] BLUE = [0,0,255] // ExtendScript // Enumerated values are attributes in simple objects. They're declared like this: var Group = { VALUE_1: 0, VALUE_2: 1, VALUE_3: 2 }; // Example: var Color = { RED: [255,0,0], GREEN: [0,255,0], BLUE: [0,0,255] }; Accessing the data In All \u201c RamClasses \u201d, most of the data is retrieved with methods (instead of accessing it directly from an attribute). This allows the API to get the data from three different locations: already stored in a private attribute of the class instance (set by a previous call to the method or by the constructor). from the Daemon , if and only if Ramses.instance().online is true . from reading the Ramses Tree , the file structure, by retrieving available information from the file names (or eventually file meta-data). The priority for each method of retrieval changes according to the type of data, which can be either mutable or immutable . Mutable data are data which may change regularly and which can\u2019t be stored (like the current status). In this case, they\u2019re retrieved by following these priorities: Got from the Daemon if available: set the private attribute before returning the data. Got from the Ramses Tree : set the private attribute before returning the data. If nothing was found, return the stored data from the corresponding private attribute. Immutable data are data which should not change during a single session (like paths). In this case, Ramses can store and return them without having to check again each time the method is called. If the private attribute contains the data, it is returned. Got from the Daemon if available: set the private attribute before returning the data. Got from the Ramses Tree if available: set the private attribute before returning the data. Here are example concepts in Python and ExtendScript, like what\u2019s done in the provided implementations of the Ramses Add-ons API. # Python class RamClass( object ): # The data can be passed to the constructor. # It may or may not have default values. def __init__(self, someImmutableData='', someMutableData=''): self.__someImmutableData = someImmutableData self.__someMutableData = someMutableData def someMutableData( self ): if Ramses.instance().online(): # If the Daemon is available, try to get the data there theData = Ramses.instance().getData() # Only if we've got the data, store and return it if theData is not None: self.__someMutableData = theData return self.__someMutableData # Try to get from the Ramses Tree theData = AnotherClass.getDataFromPath( somePath ) # If we've got the data, store it if theData is not None: self.__someMutableData = theData # Last resort return return self.__someMutableData def someImmutableData( self ): # We start by checking if we already have some data if self.__someImmutableData != '': # Stop here. This improves performance with immutable data. return self.__someImmutableData # Now we can get the Data from the Daemon or the Ramses Tree if Ramses.instance().online(): theData = Ramses.instance().getData() if theData is not None: self.__someMutableData = theData return self.__someMutableData theData = AnotherClass.getDataFromPath( somePath ) if theData is not None: self.__someMutableData = theData return self.__someMutableData // ExtendScript function RamClass( someImmutableData='', someMutableData='' ) { // The data can be passed to the constructor. // It may or may not have default values. this.__someImmutableData = someImmutableData; this.__someMutableData = someMutableData; } RamClass.prototype.someMutableData = function () { if ( Ramses.instance().online() ) { // If the Daemon is available, try to get the data there var theData = Ramses.instance().getData(); // Only if we've got the data, store and return it if ( theData != null ) { this.__someMutableData = theData; return this.__someMutableData; } } // Try to get from the Ramses Tree var theData = AnotherClass.getDataFromPath( somePath ); // If we've got the data, store it if ( theData != null ) this.__someMutableData = theData; // Last resort return return this.__someMutableData; } RamClass.prototype.someImmutableData = function () { // We start by checking if we already have some data if (self.__someImmutableData != '') { // Stop here. This improves performance with immutable data. return self.__someImmutableData; } // Now we can get the Data from the Daemon or the Ramses Tree if ( Ramses.instance().online() ) { var theData = Ramses.instance().getData(); if ( theData != null ) { this.__someMutableData = theData; return this.__someMutableData; } } var theData = AnotherClass.getDataFromPath( somePath ); if ( theData != null ) this.__someMutableData = theData; return this.__someMutableData; }","title":"Dev Notes"},{"location":"dev/add-ons-reference/implementation/#implementation-api-dev-notes","text":"Note This section is for the development of the low-level API only; you should not need these notes when developping your own add-on using the API. Hint Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API and may vary a bit.","title":"Implementation / API Dev notes"},{"location":"dev/add-ons-reference/implementation/#enumerated-values","text":"Enumerated values (a.k.a. Constants ) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple color.RED , or shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). # Python # Enumerated values are public static attributes of a containing class. They're declared like this: class Group(): VALUE_1 = 0 VALUE_2 = 1 VALUE_3 = 2 # Example: class Color(): RED = [255,0,0] GREEN = [0,255,0] BLUE = [0,0,255] // ExtendScript // Enumerated values are attributes in simple objects. They're declared like this: var Group = { VALUE_1: 0, VALUE_2: 1, VALUE_3: 2 }; // Example: var Color = { RED: [255,0,0], GREEN: [0,255,0], BLUE: [0,0,255] };","title":"Enumerated Values"},{"location":"dev/add-ons-reference/implementation/#accessing-the-data","text":"In All \u201c RamClasses \u201d, most of the data is retrieved with methods (instead of accessing it directly from an attribute). This allows the API to get the data from three different locations: already stored in a private attribute of the class instance (set by a previous call to the method or by the constructor). from the Daemon , if and only if Ramses.instance().online is true . from reading the Ramses Tree , the file structure, by retrieving available information from the file names (or eventually file meta-data). The priority for each method of retrieval changes according to the type of data, which can be either mutable or immutable . Mutable data are data which may change regularly and which can\u2019t be stored (like the current status). In this case, they\u2019re retrieved by following these priorities: Got from the Daemon if available: set the private attribute before returning the data. Got from the Ramses Tree : set the private attribute before returning the data. If nothing was found, return the stored data from the corresponding private attribute. Immutable data are data which should not change during a single session (like paths). In this case, Ramses can store and return them without having to check again each time the method is called. If the private attribute contains the data, it is returned. Got from the Daemon if available: set the private attribute before returning the data. Got from the Ramses Tree if available: set the private attribute before returning the data. Here are example concepts in Python and ExtendScript, like what\u2019s done in the provided implementations of the Ramses Add-ons API. # Python class RamClass( object ): # The data can be passed to the constructor. # It may or may not have default values. def __init__(self, someImmutableData='', someMutableData=''): self.__someImmutableData = someImmutableData self.__someMutableData = someMutableData def someMutableData( self ): if Ramses.instance().online(): # If the Daemon is available, try to get the data there theData = Ramses.instance().getData() # Only if we've got the data, store and return it if theData is not None: self.__someMutableData = theData return self.__someMutableData # Try to get from the Ramses Tree theData = AnotherClass.getDataFromPath( somePath ) # If we've got the data, store it if theData is not None: self.__someMutableData = theData # Last resort return return self.__someMutableData def someImmutableData( self ): # We start by checking if we already have some data if self.__someImmutableData != '': # Stop here. This improves performance with immutable data. return self.__someImmutableData # Now we can get the Data from the Daemon or the Ramses Tree if Ramses.instance().online(): theData = Ramses.instance().getData() if theData is not None: self.__someMutableData = theData return self.__someMutableData theData = AnotherClass.getDataFromPath( somePath ) if theData is not None: self.__someMutableData = theData return self.__someMutableData // ExtendScript function RamClass( someImmutableData='', someMutableData='' ) { // The data can be passed to the constructor. // It may or may not have default values. this.__someImmutableData = someImmutableData; this.__someMutableData = someMutableData; } RamClass.prototype.someMutableData = function () { if ( Ramses.instance().online() ) { // If the Daemon is available, try to get the data there var theData = Ramses.instance().getData(); // Only if we've got the data, store and return it if ( theData != null ) { this.__someMutableData = theData; return this.__someMutableData; } } // Try to get from the Ramses Tree var theData = AnotherClass.getDataFromPath( somePath ); // If we've got the data, store it if ( theData != null ) this.__someMutableData = theData; // Last resort return return this.__someMutableData; } RamClass.prototype.someImmutableData = function () { // We start by checking if we already have some data if (self.__someImmutableData != '') { // Stop here. This improves performance with immutable data. return self.__someImmutableData; } // Now we can get the Data from the Daemon or the Ramses Tree if ( Ramses.instance().online() ) { var theData = Ramses.instance().getData(); if ( theData != null ) { this.__someMutableData = theData; return this.__someMutableData; } } var theData = AnotherClass.getDataFromPath( somePath ); if ( theData != null ) this.__someMutableData = theData; return this.__someMutableData; }","title":"Accessing the data"},{"location":"dev/add-ons-reference/ram_asset/","text":"RamAsset A class representing an asset. Inherits: RamItem Static Methods Method Arguments Description fromDict \u25b9 RamAsset dict or object : assetDict Builds a RamAsset from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given path. The path can be any file or folder path from the asset (a version file, a preview file, etc) Methods Method Arguments Description constructor string : assetName , string : assetShortName , string : assetFolder , string : assetGroup = \"\" , string : tags = [] tags \u25b9 list of string Some tags describing the asset. An empty string if the Daemon is not available. group \u25b9 string The name of the group containing this asset. API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data Notes group Immutable This method is actually implemented in RamItem instead of RamAsset tags Mutable","title":"RamAsset"},{"location":"dev/add-ons-reference/ram_asset/#ramasset","text":"A class representing an asset. Inherits: RamItem","title":"RamAsset"},{"location":"dev/add-ons-reference/ram_asset/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamAsset dict or object : assetDict Builds a RamAsset from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given path. The path can be any file or folder path from the asset (a version file, a preview file, etc)","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_asset/#methods","text":"Method Arguments Description constructor string : assetName , string : assetShortName , string : assetFolder , string : assetGroup = \"\" , string : tags = [] tags \u25b9 list of string Some tags describing the asset. An empty string if the Daemon is not available. group \u25b9 string The name of the group containing this asset.","title":"Methods"},{"location":"dev/add-ons-reference/ram_asset/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_asset/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data Notes group Immutable This method is actually implemented in RamItem instead of RamAsset tags Mutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_daemon_interface/","text":"RamDaemonInterface The low-level Class used to communicate with the Ramses Daemon. This is a simple wrapper for the Daemon API . One (and only one) instance globally available (RamDaemonInterface is a singleton ), by calling RamDaemonInterface.instance() or Ramses.instance().daemonInterface() . Note You should not need this class as all communications are automatically handled by the other classes. Static Methods Method Arguments Description Dev Notes instance \u25b9 RamDaemonInterface Returns the RamDaemonInterface unique instance. checkReply \u25b9 boolean dict : reply Checks if the reply returned by a RamDaemonInterface instance is accepted, successful and has some content. Methods Please refer to the Daemon API reference for more information about these methods. These methods return the reply of the Daemon converted from JSON to an object, dict, structure, or whatever best suits the language in which the add-on is implemented. This returned object can be converted to a RamObject instance using the corresponding RamObject.fromDict() static method. Method Arguments Description Dev Notes constructor integer : port = 18185 daemonVersion \u25b9 string The current version of the Daemon TODO: change the ping method to store the version in a private attribute getAssets \u25b9 Object / Dict Gets the list of the assets for the current project getAsset \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific asset. The name is optional, as short names should be unique. getAssetGroups \u25b9 Object / Dict* Gets the list of the asset groups for the current project getCurrentProject \u25b9 Object / Dict Gets the current project getCurrentStatus \u25b9 Object / Dict string : itemShortName , string : itemName , string : step , ItemType : itemType = ItemType.SHOT Gets the status for the specific step for the item. itemType must be one of: ItemType.SHOT or ItemType.ASSET getCurrentStatuses \u25b9 Object / Dict string : itemShortName , string : itemName , string : step , ItemType : itemType = ItemType.SHOT Gets the list of status (one per step) for the item. itemType must be one of: ItemType.SHOT or ItemType.ASSET getCurrentUser \u25b9 Object / Dict Gets the current user getProjects \u25b9 Object / Dict Gets the list of available projects getProject \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific project. The name is optional, as short names should be unique. getRamsesFolderPath \u25b9 Object / Dict Gets the main Ramses folder containing projects, config files, user files\u2026 getPipes \u25b9 Object / Dict Gets the list of pipes for the current project TODO getShots \u25b9 Object / Dict string : filter = \"\" Gets the list of the shots for the current project. Filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard \"*\" getShot \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific shot. The name is optional, as short names should be unique. getStates \u25b9 Object / Dict Gets the list of available states getState \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific state. The name is optional, as short names should be unique. getSteps \u25b9 Object / Dict Gets the list of the steps for the current project getStep \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific step. The name is optional, as short names should be unique. online \u25b9 boolean True if the Daemon is available ping \u25b9 Object / Dict Gets the version and current user of the Ramses Daemon publishAsset \u25b9 Object / Dict TODO publishShot \u25b9 Object / Dict TODO raiseWindow Raises the Ramses Client application main window setCurrentProject \u25b9 Object / Dict string : shortName Sets the current project setAssetStatus \u25b9 Object / Dict TODO setShotStatus \u25b9 Object / Dict TODO Examples # Python daemon = RamDaemonInterface.instance() reply = daemon.getProjects() # Call from the instance if RamDaemonInterface.checkReply(reply): # Call from the class, it's a static method doSomething(reply['content']) else: print (reply['message']) // JavaScript var daemon = RamDaemonInterface.instance(); var reply = daemon.getProjects(); // Call from the instance if ( RamDaemonInterface.checkReply(reply) ) { // Call from the class, it's a static method doSomething(reply['content']); } else { alert (reply['message']); } Implementation Python In Python, the methods from this class return a dict as constructed from the JSON reply of the Daemon using the standard json.loads( str ) method. JavaScript / ExtendScript In JS, the methods from this class return a standard JS object as constructed from the JSON reply of the Daemon using the standard json2 library.","title":"RamDaemonInterface"},{"location":"dev/add-ons-reference/ram_daemon_interface/#ramdaemoninterface","text":"The low-level Class used to communicate with the Ramses Daemon. This is a simple wrapper for the Daemon API . One (and only one) instance globally available (RamDaemonInterface is a singleton ), by calling RamDaemonInterface.instance() or Ramses.instance().daemonInterface() . Note You should not need this class as all communications are automatically handled by the other classes.","title":"RamDaemonInterface"},{"location":"dev/add-ons-reference/ram_daemon_interface/#static-methods","text":"Method Arguments Description Dev Notes instance \u25b9 RamDaemonInterface Returns the RamDaemonInterface unique instance. checkReply \u25b9 boolean dict : reply Checks if the reply returned by a RamDaemonInterface instance is accepted, successful and has some content.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_daemon_interface/#methods","text":"Please refer to the Daemon API reference for more information about these methods. These methods return the reply of the Daemon converted from JSON to an object, dict, structure, or whatever best suits the language in which the add-on is implemented. This returned object can be converted to a RamObject instance using the corresponding RamObject.fromDict() static method. Method Arguments Description Dev Notes constructor integer : port = 18185 daemonVersion \u25b9 string The current version of the Daemon TODO: change the ping method to store the version in a private attribute getAssets \u25b9 Object / Dict Gets the list of the assets for the current project getAsset \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific asset. The name is optional, as short names should be unique. getAssetGroups \u25b9 Object / Dict* Gets the list of the asset groups for the current project getCurrentProject \u25b9 Object / Dict Gets the current project getCurrentStatus \u25b9 Object / Dict string : itemShortName , string : itemName , string : step , ItemType : itemType = ItemType.SHOT Gets the status for the specific step for the item. itemType must be one of: ItemType.SHOT or ItemType.ASSET getCurrentStatuses \u25b9 Object / Dict string : itemShortName , string : itemName , string : step , ItemType : itemType = ItemType.SHOT Gets the list of status (one per step) for the item. itemType must be one of: ItemType.SHOT or ItemType.ASSET getCurrentUser \u25b9 Object / Dict Gets the current user getProjects \u25b9 Object / Dict Gets the list of available projects getProject \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific project. The name is optional, as short names should be unique. getRamsesFolderPath \u25b9 Object / Dict Gets the main Ramses folder containing projects, config files, user files\u2026 getPipes \u25b9 Object / Dict Gets the list of pipes for the current project TODO getShots \u25b9 Object / Dict string : filter = \"\" Gets the list of the shots for the current project. Filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard \"*\" getShot \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific shot. The name is optional, as short names should be unique. getStates \u25b9 Object / Dict Gets the list of available states getState \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific state. The name is optional, as short names should be unique. getSteps \u25b9 Object / Dict Gets the list of the steps for the current project getStep \u25b9 Object / Dict string : shortName , string : name = \"\" Gets a specific step. The name is optional, as short names should be unique. online \u25b9 boolean True if the Daemon is available ping \u25b9 Object / Dict Gets the version and current user of the Ramses Daemon publishAsset \u25b9 Object / Dict TODO publishShot \u25b9 Object / Dict TODO raiseWindow Raises the Ramses Client application main window setCurrentProject \u25b9 Object / Dict string : shortName Sets the current project setAssetStatus \u25b9 Object / Dict TODO setShotStatus \u25b9 Object / Dict TODO","title":"Methods"},{"location":"dev/add-ons-reference/ram_daemon_interface/#examples","text":"# Python daemon = RamDaemonInterface.instance() reply = daemon.getProjects() # Call from the instance if RamDaemonInterface.checkReply(reply): # Call from the class, it's a static method doSomething(reply['content']) else: print (reply['message']) // JavaScript var daemon = RamDaemonInterface.instance(); var reply = daemon.getProjects(); // Call from the instance if ( RamDaemonInterface.checkReply(reply) ) { // Call from the class, it's a static method doSomething(reply['content']); } else { alert (reply['message']); }","title":"Examples"},{"location":"dev/add-ons-reference/ram_daemon_interface/#implementation","text":"","title":"Implementation"},{"location":"dev/add-ons-reference/ram_daemon_interface/#python","text":"In Python, the methods from this class return a dict as constructed from the JSON reply of the Daemon using the standard json.loads( str ) method.","title":"Python"},{"location":"dev/add-ons-reference/ram_daemon_interface/#javascript-extendscript","text":"In JS, the methods from this class return a standard JS object as constructed from the JSON reply of the Daemon using the standard json2 library.","title":"JavaScript / ExtendScript"},{"location":"dev/add-ons-reference/ram_file_manager/","text":"RamFileManager Generic tools to handle files and the Ramses Naming Scheme Read the sections about the Ramses Tree and Naming Scheme for more details about names and folders used by Ramses . Static Methods Method Arguments Description buildPath \u25b9 boolean list of string : folders Builds a path with a list of folder names or subpaths, adding the \"/\" only if needed. Paths never include any trailing \"/\" buildRamsesFileName \u25b9 string string : project , string : step , string : ext , string : ramType = \"G\" , string : objectShortName = \"\" , string : resourceStr = \"\" , int : version, = -1 , string : version_prefix = \"\" Builds a filename respecting Ramses\u2019 naming conventions. composeRamsesFileName \u25b9 string object or dict : ramsesFileNameDict , boolean : increment = false Builds a filename from a dict or object similar as the one returned by decomposeRamsesFileName() . copyToPublish \u25b9 string string : filePath Copies the given file inside the corresponding _published subfolder. Returns the path to the new file. copyToVersion \u25b9 string string : filePath , boolean : increment = false , string : dafaultStateShortName = \"v\" Copies the given file inside the corresponding _versions subfolder, optionnaly incrementing the version number. Use defaultStateShortName to change the state to be used if not found in the current or previous version. Returns the path to the new file. decomposeRamsesFileName \u25b9 dict or None string : ramsesFileName Used on files that respect Ramses\u2019 naming convention: it separates the name into blocks (one block for the project\u2019s shortname, one for the step, one for the extension\u2026). decomposeRamsesFilePath \u25b9 dict or None string : path Tries to get the maximum information from a path, traversing up the directory tree to read information. Returns a dict similar to decomposeRamsesFileName() . getLatestVersion \u25b9 list of int and string string : filePath , string : dafaultStateShortName = \"v\" , boolean : previous = false Gets the latest version number and state for the given file, which can be located either in the main folder or one of the _versions , _preview or _published subfolder. Use defaultStateShortName to change the state to be used if not found in the current or previous version. If previous is true, will return the version immediately before the latest one. Returns a list with the version number as first item, the state as second item, and the date as the third item. getLatestVersionFilePath \u25b9 string string : filePath , boolean : previous = false Gets the latest version file path for the given file, which can be located either in the main folder or one of the _versions , _preview or _published subfolder. If previous is true, will return the version immediately before the latest one. getProjectFolder \u25b9 string string : path Gets the root folder of the project this path belongs to. getPublishFolder \u25b9 string string : filePath Gets the published folder path for any given file. getRamsesFiles \u25b9 list of string string : folderPath , string : resource = None Gets all the files respecting the Ramses naming scheme inside the folder, optionally corresponding to the given resource only. getSaveFilePath \u25b9 string string : filePath Gets and returns the path to be used to save the file given as argument, with a name respecting the Ramses Naming Scheme . If the file is in a _versions , _preview or _published folder, the save file is located in the parent folder. getVersionFilePaths \u25b9 string string : filePath Gets the corresponding version files from the _versions folder path for any given file. getVersionFolder \u25b9 string string : filePath Gets the _versions folder path for any given file. inPreviewFolder \u25b9 boolean string : filePath Checks if a given file is located in a _preview folder. inPublishFolder \u25b9 boolean string : filePath Checks if a given file is located in a _published folder. inReservedFolder \u25b9 boolean string : filePath Checks if a given file is located in a _published or _versions or _preview folder. inVersionsFolder \u25b9 boolean string : filePath Checks if a given file is located in a _versions folder. isAssetStep \u25b9 boolean string : stepShortName , string : assetsPath Checks using the information found in assetsPath (which should be the assets folder of a given project) if the given short name corresponds to an asset production step. isProjectFolder \u25b9 boolean string : folderPath Checks if a given folder is the project root folder. isRamsesName \u25b9 boolean string : fileName Checks if the given name respects the Ramses naming scheme. isRestoredFilePath \u25b9 boolean string : filePAth Checks if the file is a working file which has been restored from a previous version (contains \"+restored-vXX+\" in its resource name). isShotStep \u25b9 boolean string : shotShortName , string : shotsPath Checks using the information found in shotsPath (which should be the shots folder of a given project) if the given short name corresponds to a shot production step. restoreVersionFile string : filePath Restores an older version. validateName \u25b9 boolean string : name Checks if this name respects the Ramses naming scheme. validateShortName \u25b9 boolean string : shortName Checks if this short name respects the Ramses naming scheme. decomposeRamsesFileName( ) Used on files that respect Ramses\u2019 naming convention: it separates the name into blocks (one block for the project\u2019s shortname, one for the step, one for the extension\u2026) A Ramses filename can have all of these blocks: project_type_object_step_resource_versionBlock.extension type can be one of the following letters: A (asset), S (shot), G (general). there is an object for assets and shots but it may be empty for general items the step may be empty for assets and shots if the method is used on a folder name instead of a file resource is optional. It only serves to differentiate the main working file and its resources, that serve as secondary working files. versionBlock is optional. It\u2019s made of two blocks: an optional version prefix, also named state, followed by a version number. Version prefixes consist of all the available states\u2019 shortnames ( see Ramses.getStates() ) and some additional prefixes. E.g. \"wip\" , \"v\" , \u2026 If the file does not match Ramses\u2019 naming convention, returns None. Else, returns a dictionary made of all the blocks: { \"project\", \"type\", \"object\", \"step\", \"resource\", \"state\", \"version\", \"extension\" } API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Private methods Method Arguments Description _isRamsesItemFoldername \u25b9 boolean string : n Checks if a given folder respects Ramses\u2019 naming convention for items\u2019 root folders. The root folder should look like this: \"projectID_itemType_objectID\"","title":"RamFileManager"},{"location":"dev/add-ons-reference/ram_file_manager/#ramfilemanager","text":"Generic tools to handle files and the Ramses Naming Scheme Read the sections about the Ramses Tree and Naming Scheme for more details about names and folders used by Ramses .","title":"RamFileManager"},{"location":"dev/add-ons-reference/ram_file_manager/#static-methods","text":"Method Arguments Description buildPath \u25b9 boolean list of string : folders Builds a path with a list of folder names or subpaths, adding the \"/\" only if needed. Paths never include any trailing \"/\" buildRamsesFileName \u25b9 string string : project , string : step , string : ext , string : ramType = \"G\" , string : objectShortName = \"\" , string : resourceStr = \"\" , int : version, = -1 , string : version_prefix = \"\" Builds a filename respecting Ramses\u2019 naming conventions. composeRamsesFileName \u25b9 string object or dict : ramsesFileNameDict , boolean : increment = false Builds a filename from a dict or object similar as the one returned by decomposeRamsesFileName() . copyToPublish \u25b9 string string : filePath Copies the given file inside the corresponding _published subfolder. Returns the path to the new file. copyToVersion \u25b9 string string : filePath , boolean : increment = false , string : dafaultStateShortName = \"v\" Copies the given file inside the corresponding _versions subfolder, optionnaly incrementing the version number. Use defaultStateShortName to change the state to be used if not found in the current or previous version. Returns the path to the new file. decomposeRamsesFileName \u25b9 dict or None string : ramsesFileName Used on files that respect Ramses\u2019 naming convention: it separates the name into blocks (one block for the project\u2019s shortname, one for the step, one for the extension\u2026). decomposeRamsesFilePath \u25b9 dict or None string : path Tries to get the maximum information from a path, traversing up the directory tree to read information. Returns a dict similar to decomposeRamsesFileName() . getLatestVersion \u25b9 list of int and string string : filePath , string : dafaultStateShortName = \"v\" , boolean : previous = false Gets the latest version number and state for the given file, which can be located either in the main folder or one of the _versions , _preview or _published subfolder. Use defaultStateShortName to change the state to be used if not found in the current or previous version. If previous is true, will return the version immediately before the latest one. Returns a list with the version number as first item, the state as second item, and the date as the third item. getLatestVersionFilePath \u25b9 string string : filePath , boolean : previous = false Gets the latest version file path for the given file, which can be located either in the main folder or one of the _versions , _preview or _published subfolder. If previous is true, will return the version immediately before the latest one. getProjectFolder \u25b9 string string : path Gets the root folder of the project this path belongs to. getPublishFolder \u25b9 string string : filePath Gets the published folder path for any given file. getRamsesFiles \u25b9 list of string string : folderPath , string : resource = None Gets all the files respecting the Ramses naming scheme inside the folder, optionally corresponding to the given resource only. getSaveFilePath \u25b9 string string : filePath Gets and returns the path to be used to save the file given as argument, with a name respecting the Ramses Naming Scheme . If the file is in a _versions , _preview or _published folder, the save file is located in the parent folder. getVersionFilePaths \u25b9 string string : filePath Gets the corresponding version files from the _versions folder path for any given file. getVersionFolder \u25b9 string string : filePath Gets the _versions folder path for any given file. inPreviewFolder \u25b9 boolean string : filePath Checks if a given file is located in a _preview folder. inPublishFolder \u25b9 boolean string : filePath Checks if a given file is located in a _published folder. inReservedFolder \u25b9 boolean string : filePath Checks if a given file is located in a _published or _versions or _preview folder. inVersionsFolder \u25b9 boolean string : filePath Checks if a given file is located in a _versions folder. isAssetStep \u25b9 boolean string : stepShortName , string : assetsPath Checks using the information found in assetsPath (which should be the assets folder of a given project) if the given short name corresponds to an asset production step. isProjectFolder \u25b9 boolean string : folderPath Checks if a given folder is the project root folder. isRamsesName \u25b9 boolean string : fileName Checks if the given name respects the Ramses naming scheme. isRestoredFilePath \u25b9 boolean string : filePAth Checks if the file is a working file which has been restored from a previous version (contains \"+restored-vXX+\" in its resource name). isShotStep \u25b9 boolean string : shotShortName , string : shotsPath Checks using the information found in shotsPath (which should be the shots folder of a given project) if the given short name corresponds to a shot production step. restoreVersionFile string : filePath Restores an older version. validateName \u25b9 boolean string : name Checks if this name respects the Ramses naming scheme. validateShortName \u25b9 boolean string : shortName Checks if this short name respects the Ramses naming scheme.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_file_manager/#decomposeramsesfilename","text":"Used on files that respect Ramses\u2019 naming convention: it separates the name into blocks (one block for the project\u2019s shortname, one for the step, one for the extension\u2026) A Ramses filename can have all of these blocks: project_type_object_step_resource_versionBlock.extension type can be one of the following letters: A (asset), S (shot), G (general). there is an object for assets and shots but it may be empty for general items the step may be empty for assets and shots if the method is used on a folder name instead of a file resource is optional. It only serves to differentiate the main working file and its resources, that serve as secondary working files. versionBlock is optional. It\u2019s made of two blocks: an optional version prefix, also named state, followed by a version number. Version prefixes consist of all the available states\u2019 shortnames ( see Ramses.getStates() ) and some additional prefixes. E.g. \"wip\" , \"v\" , \u2026 If the file does not match Ramses\u2019 naming convention, returns None. Else, returns a dictionary made of all the blocks: { \"project\", \"type\", \"object\", \"step\", \"resource\", \"state\", \"version\", \"extension\" }","title":"decomposeRamsesFileName( )"},{"location":"dev/add-ons-reference/ram_file_manager/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_file_manager/#private-methods","text":"Method Arguments Description _isRamsesItemFoldername \u25b9 boolean string : n Checks if a given folder respects Ramses\u2019 naming convention for items\u2019 root folders. The root folder should look like this: \"projectID_itemType_objectID\"","title":"Private methods"},{"location":"dev/add-ons-reference/ram_filetype/","text":"RamFileType A File type. File types are typically used with RamPipe . Inherits: RamObject Static Methods Method Arguments Description fromDict \u25b9 RamFileType dict or object : fileTypeDict Builds a RamFileType from a dict or object like the one returned by the RamDaemonInterface Methods Method Arguments Description constructor string : name , string : shortName , list of strings : extensions check \u25b9 boolean string : filePath Checks if the given file is of this type. extensions \u25b9 list of string The extensions which can be used for this file type, including the \u201c.\u201d API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data extensions Immutable","title":"RamFileType"},{"location":"dev/add-ons-reference/ram_filetype/#ramfiletype","text":"A File type. File types are typically used with RamPipe . Inherits: RamObject","title":"RamFileType"},{"location":"dev/add-ons-reference/ram_filetype/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamFileType dict or object : fileTypeDict Builds a RamFileType from a dict or object like the one returned by the RamDaemonInterface","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_filetype/#methods","text":"Method Arguments Description constructor string : name , string : shortName , list of strings : extensions check \u25b9 boolean string : filePath Checks if the given file is of this type. extensions \u25b9 list of string The extensions which can be used for this file type, including the \u201c.\u201d","title":"Methods"},{"location":"dev/add-ons-reference/ram_filetype/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_filetype/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data extensions Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_item/","text":"RamItem Base class for RamAsset and RamShot . An item of the project, either an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset Static Methods Method Arguments Description fromPath \u25b9 RamShot or RamAsset or RamItem or None string : fileOrFolderPath Returns either a RamShot , RamAsset or RamItem instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc). The type (shot, asset or general item) can be checked with RamItem.itemType() Methods Method Arguments Description constructor string : itemName , string : itemShortName , string : itemFolder = \"\" , ItemType : itemType = ItemType.GENERAL currentStatus \u25b9 RamStatus RamStep or string : step = \"\" , string : resource = \"\" The current status for the given step folderPath \u25b9 string The absolute path to the folder containing the item isPublished \u25b9 bool string : resource = \"\" , RamStep or string : step = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.publishFilePaths(step, resource)) > 0 itemType \u25b9 ItemType The type of this item. One of ItemType.SHOT , ItemType.ASSET , ItemType.GENERAL latestVersion \u25b9 integer string : resource = \"\" , string : state = \"\" , RamStep or string : step *= \"\" Returns the highest version number for the given state (wip, pub\u2026). latestVersionFilePath \u25b9 string string : resource = \"\" , string : state = \"\" , RamStep or string : step = \"\" Latest version file path previewFolderPath \u25b9 string RamStep or string : step = \"\" Gets the path to the preview folder. Paths are relative to the root of the item folder. previewFilePaths \u25b9 list of string string : resource = \"\" , RamStep or string : step = \"\" Gets the list of file paths in the preview folder. Paths are relative to the root of the item folder. project \u25b9 RamProject Gets the project this item belongs too. To improve performance, if only the shortName is needed, prefer using projectShortName() projectShortName \u25b9 string Gets the short name of the project this item belongs too. publishFolderPath \u25b9 string RamStep or string : step = \"\" Gets the path to the publish folder. Paths are relative to the root of the item folder. publishFilePaths \u25b9 list of string string : resource = \"\" , RamStep or string : step = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. setStatus RamStatus : status , RamStep or string : step Sets the current status for the given step status \u25b9 RamStatus RamStep : step Gets the current status for the given step stepFilePath \u25b9 string string : resource = \"\" , string : extension = \"\" , RamStep or string : step *= \"\" Gets the file used for this step with the given file extension. stepFilePaths \u25b9 list of string RamStep or string : step *= \"\" Gets the files used for this step (there may be several files, one per resource) stepFolderPath \u25b9 string RamStep or string : step *= \"\" The subfolder for the given step steps \u25b9 list of RamStep Gets the list of steps concerning this item. versionFilePaths \u25b9 string string : resource = \"\" , RamStep or string : step = \"\" Gets all version files for the given resource. versionFolderPath \u25b9 string RamStep or string : step = \"\" Path to the version folder relative to the item root folder API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data currentStatus Immutable folderPath Immutable isPublished Mutable latestVersion Mutable previewFolderPath Immutable previewFilePaths Mutable publishedFolderPath Immutable publishedFilePaths Mutable status Mutable versionFolderPath Immutable versionFilePath Mutable wipFolderPath Immutable wipFilePath Mutable","title":"RamItem"},{"location":"dev/add-ons-reference/ram_item/#ramitem","text":"Base class for RamAsset and RamShot . An item of the project, either an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset","title":"RamItem"},{"location":"dev/add-ons-reference/ram_item/#static-methods","text":"Method Arguments Description fromPath \u25b9 RamShot or RamAsset or RamItem or None string : fileOrFolderPath Returns either a RamShot , RamAsset or RamItem instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc). The type (shot, asset or general item) can be checked with RamItem.itemType()","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_item/#methods","text":"Method Arguments Description constructor string : itemName , string : itemShortName , string : itemFolder = \"\" , ItemType : itemType = ItemType.GENERAL currentStatus \u25b9 RamStatus RamStep or string : step = \"\" , string : resource = \"\" The current status for the given step folderPath \u25b9 string The absolute path to the folder containing the item isPublished \u25b9 bool string : resource = \"\" , RamStep or string : step = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.publishFilePaths(step, resource)) > 0 itemType \u25b9 ItemType The type of this item. One of ItemType.SHOT , ItemType.ASSET , ItemType.GENERAL latestVersion \u25b9 integer string : resource = \"\" , string : state = \"\" , RamStep or string : step *= \"\" Returns the highest version number for the given state (wip, pub\u2026). latestVersionFilePath \u25b9 string string : resource = \"\" , string : state = \"\" , RamStep or string : step = \"\" Latest version file path previewFolderPath \u25b9 string RamStep or string : step = \"\" Gets the path to the preview folder. Paths are relative to the root of the item folder. previewFilePaths \u25b9 list of string string : resource = \"\" , RamStep or string : step = \"\" Gets the list of file paths in the preview folder. Paths are relative to the root of the item folder. project \u25b9 RamProject Gets the project this item belongs too. To improve performance, if only the shortName is needed, prefer using projectShortName() projectShortName \u25b9 string Gets the short name of the project this item belongs too. publishFolderPath \u25b9 string RamStep or string : step = \"\" Gets the path to the publish folder. Paths are relative to the root of the item folder. publishFilePaths \u25b9 list of string string : resource = \"\" , RamStep or string : step = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. setStatus RamStatus : status , RamStep or string : step Sets the current status for the given step status \u25b9 RamStatus RamStep : step Gets the current status for the given step stepFilePath \u25b9 string string : resource = \"\" , string : extension = \"\" , RamStep or string : step *= \"\" Gets the file used for this step with the given file extension. stepFilePaths \u25b9 list of string RamStep or string : step *= \"\" Gets the files used for this step (there may be several files, one per resource) stepFolderPath \u25b9 string RamStep or string : step *= \"\" The subfolder for the given step steps \u25b9 list of RamStep Gets the list of steps concerning this item. versionFilePaths \u25b9 string string : resource = \"\" , RamStep or string : step = \"\" Gets all version files for the given resource. versionFolderPath \u25b9 string RamStep or string : step = \"\" Path to the version folder relative to the item root folder","title":"Methods"},{"location":"dev/add-ons-reference/ram_item/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_item/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data currentStatus Immutable folderPath Immutable isPublished Mutable latestVersion Mutable previewFolderPath Immutable previewFilePaths Mutable publishedFolderPath Immutable publishedFilePaths Mutable status Mutable versionFolderPath Immutable versionFilePath Mutable wipFolderPath Immutable wipFilePath Mutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_metadata_manager/","text":"RamMetaDataManager A Class to get/set metadata from files. Ramses will use a single sidecar file named _ramses_data.json (storing data in json ) for all files located in a given folder; thus the metadata used by Ramses is set on a per-folder basis, and is not copied when a file is copied/moved: it does not make sense for Ramses to have the same metadata when a file is moved. The Meta-Data structure The Meta-Data used by Ramses contains at least these attributes. Key Name Type Default Value Description MetaDataKeys.COMMENT string \"\" A comment associated to the file MetaDataKeys.PIPE_TYPE int \"\" The type of the pipe associated to the file MetaDataKeys.VERSION int -1 A version associated to the file MetaDataKeys.VERSION_FILE string \"\" A version file associated to the file Static Methods Method Arguments Description getComment \u25b9 string string : filePath Gets the comment associated to the file. getFileMetaData \u25b9 object or dict string : filePath Gets the meta-data of the given file. getMetaData \u25b9 object or dict string : folderPath Gets the meta-data of all the files for the given folder. Each file name is used as a key in the returned object. getMetaDataFile \u25b9 string string : path Gets the path of the file containing the metadata for the given file or folder. getPipeType \u25b9 string string : filePath Gets the type of the pipe which created this file (if it has previously been set by the addon using setPipeType() ). getValue \u25b9 any string : filePath , string : key Gets the value of a specific key for the file. getVersion \u25b9 int string : filePath Gets the version associated to the file. getVersionFilePath \u25b9 string string : filePath Gets the version file associated to the file. setComment \u25b9 string string : filePath , string : comment Sets the comment associated to a file. setFileMetaData string : filePath , object or dict : fileData Writes the given meta-data to the meta-data file associated to this file. setMetaData string : path , object or dict : data Writes the given meta-data to the meta-data file associated to this folder. setPipeType string : filePath , string : pipeType Sets the pipe which created the file. The value should be the short name of the pipe. setValue string : filePath , string : key , any : value Sets the value of a specific key for the file. setVersion string : filePath , int : version Sets the version associated to the file. setVersionFilePath string : filePath , string : versionFilePath Sets the version file associated to the file.","title":"RamMetaDataManager"},{"location":"dev/add-ons-reference/ram_metadata_manager/#rammetadatamanager","text":"A Class to get/set metadata from files. Ramses will use a single sidecar file named _ramses_data.json (storing data in json ) for all files located in a given folder; thus the metadata used by Ramses is set on a per-folder basis, and is not copied when a file is copied/moved: it does not make sense for Ramses to have the same metadata when a file is moved.","title":"RamMetaDataManager"},{"location":"dev/add-ons-reference/ram_metadata_manager/#the-meta-data-structure","text":"The Meta-Data used by Ramses contains at least these attributes. Key Name Type Default Value Description MetaDataKeys.COMMENT string \"\" A comment associated to the file MetaDataKeys.PIPE_TYPE int \"\" The type of the pipe associated to the file MetaDataKeys.VERSION int -1 A version associated to the file MetaDataKeys.VERSION_FILE string \"\" A version file associated to the file","title":"The Meta-Data structure"},{"location":"dev/add-ons-reference/ram_metadata_manager/#static-methods","text":"Method Arguments Description getComment \u25b9 string string : filePath Gets the comment associated to the file. getFileMetaData \u25b9 object or dict string : filePath Gets the meta-data of the given file. getMetaData \u25b9 object or dict string : folderPath Gets the meta-data of all the files for the given folder. Each file name is used as a key in the returned object. getMetaDataFile \u25b9 string string : path Gets the path of the file containing the metadata for the given file or folder. getPipeType \u25b9 string string : filePath Gets the type of the pipe which created this file (if it has previously been set by the addon using setPipeType() ). getValue \u25b9 any string : filePath , string : key Gets the value of a specific key for the file. getVersion \u25b9 int string : filePath Gets the version associated to the file. getVersionFilePath \u25b9 string string : filePath Gets the version file associated to the file. setComment \u25b9 string string : filePath , string : comment Sets the comment associated to a file. setFileMetaData string : filePath , object or dict : fileData Writes the given meta-data to the meta-data file associated to this file. setMetaData string : path , object or dict : data Writes the given meta-data to the meta-data file associated to this folder. setPipeType string : filePath , string : pipeType Sets the pipe which created the file. The value should be the short name of the pipe. setValue string : filePath , string : key , any : value Sets the value of a specific key for the file. setVersion string : filePath , int : version Sets the version associated to the file. setVersionFilePath string : filePath , string : versionFilePath Sets the version file associated to the file.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_object/","text":"RamObject The base class for most of Ramses objects. Inherited by: RamItem , RamProject , RamState , RamStep , RamUser Static Methods Method Arguments Description fromDict \u25b9 RamObject object or dict : objectDict Returns a RamObject instance built using the given object/dict, as the ones returned by RamDaemonInterface . This method is reimplemented in inherited classes to return an inherited instance. getObjectShortName \u25b9 string object or string : object Convenience method. Returns the object\u2019s short name or the string itself; use this to parse arguments in methods which need to use the shortname but can get either an object or a string as an argument. Methods Method Arguments Description constructor string : objectName string : objectShortName name \u25b9 string shortName \u25b9 string Special Convert to string RamObject s can be converted to string the usual way. # Python obj = RamObject( \"Name\", \"ShortName\" ) print( obj ) # implicit conversion print( str(obj) ) # explicit conversion # Both will print: >>> ShortName | Name // ExtendScript var obj = new RamObject( \"Name\", \"ShortName\" ); $.writeln( obj.toString() ); // Prints: // ShortName | Name Comparing objects RamObjects can be compared to check if two objects are the same (comparing the values, not the object instances). Two objects are considered the same if and only if their short names are the same. Names will not be compared, which means object short names in ramses have to be unique . # Python obj = RamObject( \"Name\", \"ShortName\" ) other = RamObject( \"Other Object\", \"otheShortName\" ) same = RamObject( \"Same Object\", \"ShortName\" ) # RamObject can be compared as any other value obj == other # False obj == same # True # It can be used with the `in` operator too objList = [ obj, other ] same in objList # True # But RamObject is not hashable, so it cannot be used in a `set` or as a key in a `dict` // ExtendScript var obj = RamObject( \"Name\", \"ShortName\" ); var other = RamObject( \"Other Object\", \"otheShortName\" ); var same = RamObject( \"Same Object\", \"ShortName\" ); // RamObject can be compared with the is() method obj.is(other) // false obj.is(same) // true API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data name Immutable shortName Immutable Implementation Converting objects to string # Python # Overload the __str__() method class RamObject: def __str__( self ): return self._shortName + \" | \" + self._name // ExtendScript // Overload the toString() method function RamObject() {}; RamObject.prototype.toString = function () { return this._shortName + \" | \" + this._name; } Object comparison # Python # Overload the __eq__() method class RamObject: def __eq__( self, other ): return self._shortName == other._shortName // ExtendScript // Implements an is() method function RamObject() {}; RamObject.prototype.is = function ( other ) { return this._shortName == other._shortName; }","title":"RamObject"},{"location":"dev/add-ons-reference/ram_object/#ramobject","text":"The base class for most of Ramses objects. Inherited by: RamItem , RamProject , RamState , RamStep , RamUser","title":"RamObject"},{"location":"dev/add-ons-reference/ram_object/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamObject object or dict : objectDict Returns a RamObject instance built using the given object/dict, as the ones returned by RamDaemonInterface . This method is reimplemented in inherited classes to return an inherited instance. getObjectShortName \u25b9 string object or string : object Convenience method. Returns the object\u2019s short name or the string itself; use this to parse arguments in methods which need to use the shortname but can get either an object or a string as an argument.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_object/#methods","text":"Method Arguments Description constructor string : objectName string : objectShortName name \u25b9 string shortName \u25b9 string","title":"Methods"},{"location":"dev/add-ons-reference/ram_object/#special","text":"","title":"Special"},{"location":"dev/add-ons-reference/ram_object/#convert-to-string","text":"RamObject s can be converted to string the usual way. # Python obj = RamObject( \"Name\", \"ShortName\" ) print( obj ) # implicit conversion print( str(obj) ) # explicit conversion # Both will print: >>> ShortName | Name // ExtendScript var obj = new RamObject( \"Name\", \"ShortName\" ); $.writeln( obj.toString() ); // Prints: // ShortName | Name","title":"Convert to string"},{"location":"dev/add-ons-reference/ram_object/#comparing-objects","text":"RamObjects can be compared to check if two objects are the same (comparing the values, not the object instances). Two objects are considered the same if and only if their short names are the same. Names will not be compared, which means object short names in ramses have to be unique . # Python obj = RamObject( \"Name\", \"ShortName\" ) other = RamObject( \"Other Object\", \"otheShortName\" ) same = RamObject( \"Same Object\", \"ShortName\" ) # RamObject can be compared as any other value obj == other # False obj == same # True # It can be used with the `in` operator too objList = [ obj, other ] same in objList # True # But RamObject is not hashable, so it cannot be used in a `set` or as a key in a `dict` // ExtendScript var obj = RamObject( \"Name\", \"ShortName\" ); var other = RamObject( \"Other Object\", \"otheShortName\" ); var same = RamObject( \"Same Object\", \"ShortName\" ); // RamObject can be compared with the is() method obj.is(other) // false obj.is(same) // true","title":"Comparing objects"},{"location":"dev/add-ons-reference/ram_object/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_object/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data name Immutable shortName Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_object/#implementation","text":"","title":"Implementation"},{"location":"dev/add-ons-reference/ram_object/#converting-objects-to-string","text":"# Python # Overload the __str__() method class RamObject: def __str__( self ): return self._shortName + \" | \" + self._name // ExtendScript // Overload the toString() method function RamObject() {}; RamObject.prototype.toString = function () { return this._shortName + \" | \" + this._name; }","title":"Converting objects to string"},{"location":"dev/add-ons-reference/ram_object/#object-comparison","text":"# Python # Overload the __eq__() method class RamObject: def __eq__( self, other ): return self._shortName == other._shortName // ExtendScript // Implements an is() method function RamObject() {}; RamObject.prototype.is = function ( other ) { return this._shortName == other._shortName; }","title":"Object comparison"},{"location":"dev/add-ons-reference/ram_pipe/","text":"RamPipe A pipe which connects two steps together in the production pipeline. The pipe goes from the output step (which exports data into specific file types represented by the RamPipeFile class) to the input step (which imports that data). Static Methods Method Arguments Description fromDict \u25b9 RamPipe object or dict : pipeDict Returns a RamPipe instance built using the given object/dict, as the ones returned by RamDaemonInterface . Methods Method Arguments Description constructor string : inputStepShortName , string : outputStepShortName , list of RamPipeFile : pipeFiles inputStepShortName \u25b9 string The short name of the input step outputStepShortName \u25b9 string The short name of the output step pipeFiles \u25b9 list of RamPipeFile The list of pipe files used through this step API Dev notes (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data inputStepShortName Immutable outputStepShortName Immutable pipeFiles Immutable","title":"RamPipe"},{"location":"dev/add-ons-reference/ram_pipe/#rampipe","text":"A pipe which connects two steps together in the production pipeline. The pipe goes from the output step (which exports data into specific file types represented by the RamPipeFile class) to the input step (which imports that data).","title":"RamPipe"},{"location":"dev/add-ons-reference/ram_pipe/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamPipe object or dict : pipeDict Returns a RamPipe instance built using the given object/dict, as the ones returned by RamDaemonInterface .","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_pipe/#methods","text":"Method Arguments Description constructor string : inputStepShortName , string : outputStepShortName , list of RamPipeFile : pipeFiles inputStepShortName \u25b9 string The short name of the input step outputStepShortName \u25b9 string The short name of the output step pipeFiles \u25b9 list of RamPipeFile The list of pipe files used through this step","title":"Methods"},{"location":"dev/add-ons-reference/ram_pipe/#api-dev-notes","text":"","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_pipe/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data inputStepShortName Immutable outputStepShortName Immutable pipeFiles Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_pipefile/","text":"RamPipeFile A file which goes through a RamPipe . Static Methods Method Arguments Description fromDict \u25b9 RamPipeFile object or dict : pipeFileDict Returns a RamPipeFile instance built using the given object/dict, as the ones returned by RamDaemonInterface . Methods Method Arguments Description constructor string : shortName , RamFileType : fileType , string : colorSpace = \"\" check \u25b9 boolean string : filePath Checks if the given file can go through this pipe. colorSpace \u25b9 string The color space used through the pipe. getFiles \u25b9 list of string string : folderPath Gets all the files which can go through this pipe in the given folder. fileType \u25b9 RamFileType The file type used through the pipe. API Dev notes (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data colorSpace Immutable fileType Immutable","title":"RamPipeFile"},{"location":"dev/add-ons-reference/ram_pipefile/#rampipefile","text":"A file which goes through a RamPipe .","title":"RamPipeFile"},{"location":"dev/add-ons-reference/ram_pipefile/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamPipeFile object or dict : pipeFileDict Returns a RamPipeFile instance built using the given object/dict, as the ones returned by RamDaemonInterface .","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_pipefile/#methods","text":"Method Arguments Description constructor string : shortName , RamFileType : fileType , string : colorSpace = \"\" check \u25b9 boolean string : filePath Checks if the given file can go through this pipe. colorSpace \u25b9 string The color space used through the pipe. getFiles \u25b9 list of string string : folderPath Gets all the files which can go through this pipe in the given folder. fileType \u25b9 RamFileType The file type used through the pipe.","title":"Methods"},{"location":"dev/add-ons-reference/ram_pipefile/#api-dev-notes","text":"","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_pipefile/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data colorSpace Immutable fileType Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_project/","text":"RamProject A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject Static Methods Method Arguments Description fromDict \u25b9 RamProject dict or object : projectDict Builds a RamProject from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamProject string : path Returns a RamProject instance built using the given path. The path can be any file or folder path from the project Methods Method Arguments Description constructor string : projectName , string : projectShortName , string : projectPath = \"\" , int : width = 1920 , int : height = 1080 , float : framerate = 24.0 adminPath \u25b9 str The path to the administration files of this project. When calling this method, the folder will created if it does not exist yet. absolutePath \u25b9 str string : relativePath Builds an absolute path from a path relative to the project path asset \u25b9 RamAsset string : assetShortName Gets an asset with its short name. assetGroups \u25b9 list of string Available asset groups in this project assets \u25b9 list of RamAsset string : groupName = \"\" Available assets in this project and group. If groupName is an empty string, returns all assets. assetsPath \u25b9 str string : assetGroup = \"\" The path to the assets (including the asset group if provided) of this project. When calling this method, the folder will created if it does not exist yet. exportPath \u25b9 str The path to the exported medias of this project. When calling this method, the folder will created if it does not exist yet. folderPath \u25b9 string The project\u2019s root folder. framerate \u25b9 float The project\u2019s framerate, in frames per second. height \u25b9 int The project\u2019s height, in pixels. pipes \u25b9 list of RamPipe Available pipes in this project postProdPath \u25b9 str The path to the post-production steps common files of this project. When calling this method, the folder will created if it does not exist yet. preProdPath \u25b9 str The path to the pre-production steps common files of this project. When calling this method, the folder will created if it does not exist yet. prodPath \u25b9 str The path to the production steps common files of this project. When calling this method, the folder will created if it does not exist yet. shot \u25b9 RamShot string : shotShortName Gets a shot with its short name. shots \u25b9 RamShot Available shots in this project shotsPath \u25b9 str The path to the shots of this project. When calling this method, the folder will created if it does not exist yet. step \u25b9 RamStep string : stepShortName Gets a step with its short name. steps \u25b9 list of RamStep enumerated value : type = RamStep.ALL , boolean : deepSearch = false Available steps in this project. Use type to filter the results. One of: StepType.ALL , StepType.ASSET_PODUCTION , StepType.SHOT_PRODUCTION , StepType.PRE_PRODUCTION , StepType.PRODUCTION , StepType.POST_PRODUCTION . StepType.PRODUCTION represents a combination of SHOT and ASSET . When offline, deepSearch will also look for existing steps in the Assets and Shots folder of the project, but this can take a long time if there are many assets and shots. width \u25b9 int The project\u2019s width, in pixels. API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Private methods Method Arguments Description _getAssetsInFolder \u25b9 list of RamAsset string : folderPath , string : groupName = \"\" Recursively gets all assets contained in the given folder. (Im)mutable data The data returned by the methods can be either mutable or immutable . If a method is not listed here, it means the corresponding data is never stored in a class attribute, and must always be got from the Daemon or the tree. Method Type of the returned data framerate Immutable height Immutable pipes Immutable width Immutable","title":"RamProject"},{"location":"dev/add-ons-reference/ram_project/#ramproject","text":"A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject","title":"RamProject"},{"location":"dev/add-ons-reference/ram_project/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamProject dict or object : projectDict Builds a RamProject from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamProject string : path Returns a RamProject instance built using the given path. The path can be any file or folder path from the project","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_project/#methods","text":"Method Arguments Description constructor string : projectName , string : projectShortName , string : projectPath = \"\" , int : width = 1920 , int : height = 1080 , float : framerate = 24.0 adminPath \u25b9 str The path to the administration files of this project. When calling this method, the folder will created if it does not exist yet. absolutePath \u25b9 str string : relativePath Builds an absolute path from a path relative to the project path asset \u25b9 RamAsset string : assetShortName Gets an asset with its short name. assetGroups \u25b9 list of string Available asset groups in this project assets \u25b9 list of RamAsset string : groupName = \"\" Available assets in this project and group. If groupName is an empty string, returns all assets. assetsPath \u25b9 str string : assetGroup = \"\" The path to the assets (including the asset group if provided) of this project. When calling this method, the folder will created if it does not exist yet. exportPath \u25b9 str The path to the exported medias of this project. When calling this method, the folder will created if it does not exist yet. folderPath \u25b9 string The project\u2019s root folder. framerate \u25b9 float The project\u2019s framerate, in frames per second. height \u25b9 int The project\u2019s height, in pixels. pipes \u25b9 list of RamPipe Available pipes in this project postProdPath \u25b9 str The path to the post-production steps common files of this project. When calling this method, the folder will created if it does not exist yet. preProdPath \u25b9 str The path to the pre-production steps common files of this project. When calling this method, the folder will created if it does not exist yet. prodPath \u25b9 str The path to the production steps common files of this project. When calling this method, the folder will created if it does not exist yet. shot \u25b9 RamShot string : shotShortName Gets a shot with its short name. shots \u25b9 RamShot Available shots in this project shotsPath \u25b9 str The path to the shots of this project. When calling this method, the folder will created if it does not exist yet. step \u25b9 RamStep string : stepShortName Gets a step with its short name. steps \u25b9 list of RamStep enumerated value : type = RamStep.ALL , boolean : deepSearch = false Available steps in this project. Use type to filter the results. One of: StepType.ALL , StepType.ASSET_PODUCTION , StepType.SHOT_PRODUCTION , StepType.PRE_PRODUCTION , StepType.PRODUCTION , StepType.POST_PRODUCTION . StepType.PRODUCTION represents a combination of SHOT and ASSET . When offline, deepSearch will also look for existing steps in the Assets and Shots folder of the project, but this can take a long time if there are many assets and shots. width \u25b9 int The project\u2019s width, in pixels.","title":"Methods"},{"location":"dev/add-ons-reference/ram_project/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_project/#private-methods","text":"Method Arguments Description _getAssetsInFolder \u25b9 list of RamAsset string : folderPath , string : groupName = \"\" Recursively gets all assets contained in the given folder.","title":"Private methods"},{"location":"dev/add-ons-reference/ram_project/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . If a method is not listed here, it means the corresponding data is never stored in a class attribute, and must always be got from the Daemon or the tree. Method Type of the returned data framerate Immutable height Immutable pipes Immutable width Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_settings/","text":"RamSettings Gets and saves settings used by Ramses. One (and only one) instance globally available (RamSettings is a singleton ), by calling RamSettings.instance() or Ramses.instance().settings() . To get a setting, just get the corresponding attribute. To change a setting temporarily, just set the corresponding attribute. If you want the change to be permanent (i.e. keep the setting for the next sessions), call the save() method. By default, settings are saved in a ramses_addons_settings.json file, in the user\u2019s OS specific settings folder: Linux: ~/.config/RxLaboratory/Ramses/Config Windows: %appdata%/RxLaboratory/Ramses/Config MacOS: ? Static Methods Method Arguments Description instance \u25b9 RamSettings Returns the RamSettings unique instance. Attributes To retrieve the default values after the settings have been changed, access them with the attributes which names start with default . Attribute Type Default Description addonsHelpUrl string The URL to this page Read-only. A link to the Ramses add-ons documentation apiReferenceUrl string This page URL Read-only. A link to this API documentation autoIncrementTimeout int 120 Timeout before auto incrementing a file, in minutes. defaultAutoIncrementTimeout int 120 defaultOnline boolean true defaultRamsesClientPath string os-specific defaultRamsesClientPort integer 18185 defaultRamsesFolderPath string \"~/Ramses\" defaultLogLevel LogLevel LogLevel.Info generalHelpUrl string The URL to this documentation Read-only. A link to the Ramses documentation logLevel LogLevel LogLevel.Info Changes the quantity of messages in the log. One of: LogLevel.DataReceived , LogLevel.DataSent , LogLevel.Debug , LogLevel.Info , LogLevel.Critical , LogLevel.Fatal online boolean true Wether to always try to (re)connect to the Daemon if offline. ramsesClientPath string os-specific Location of the Ramses Client executable file (.exe on Windows, .app on MacOS, .appimage or binary on Linux) ramsesClientPort integer 18185 Listening port of the Ramses Daemon ramsesFolderPath string \"~/Ramses\" The folder containing all Ramses files (settings, projects, etc) userSettings dict or object {} Use this attribute to store your own settings. You can add as many key/value pairs as you need, they will be saved with the RamSettings.save() method too. version string The current API version Read-only. Methods Method Arguments Description save Saves the current settings to the disk. folderPath \u25b9 string The folder path to the settings filePath \u25b9 string The file path to the settings API Dev notes Note This section is for the development of the API only; you should not need these when developping your add-on using the API. Private Attributes Attribute Type Default Description folderNames FolderNames A simple class containing the common names for subfolders. See the constants for more information. Examples ramses = Ramses.instance settings = ramses.settings theAsset = RamAsset(\"thing\", \"stuff\") thePreviewFolder = theAsset.folderPath() + \"/\" + settings.folderNames.preview","title":"RamSettings"},{"location":"dev/add-ons-reference/ram_settings/#ramsettings","text":"Gets and saves settings used by Ramses. One (and only one) instance globally available (RamSettings is a singleton ), by calling RamSettings.instance() or Ramses.instance().settings() . To get a setting, just get the corresponding attribute. To change a setting temporarily, just set the corresponding attribute. If you want the change to be permanent (i.e. keep the setting for the next sessions), call the save() method. By default, settings are saved in a ramses_addons_settings.json file, in the user\u2019s OS specific settings folder: Linux: ~/.config/RxLaboratory/Ramses/Config Windows: %appdata%/RxLaboratory/Ramses/Config MacOS: ?","title":"RamSettings"},{"location":"dev/add-ons-reference/ram_settings/#static-methods","text":"Method Arguments Description instance \u25b9 RamSettings Returns the RamSettings unique instance.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_settings/#attributes","text":"To retrieve the default values after the settings have been changed, access them with the attributes which names start with default . Attribute Type Default Description addonsHelpUrl string The URL to this page Read-only. A link to the Ramses add-ons documentation apiReferenceUrl string This page URL Read-only. A link to this API documentation autoIncrementTimeout int 120 Timeout before auto incrementing a file, in minutes. defaultAutoIncrementTimeout int 120 defaultOnline boolean true defaultRamsesClientPath string os-specific defaultRamsesClientPort integer 18185 defaultRamsesFolderPath string \"~/Ramses\" defaultLogLevel LogLevel LogLevel.Info generalHelpUrl string The URL to this documentation Read-only. A link to the Ramses documentation logLevel LogLevel LogLevel.Info Changes the quantity of messages in the log. One of: LogLevel.DataReceived , LogLevel.DataSent , LogLevel.Debug , LogLevel.Info , LogLevel.Critical , LogLevel.Fatal online boolean true Wether to always try to (re)connect to the Daemon if offline. ramsesClientPath string os-specific Location of the Ramses Client executable file (.exe on Windows, .app on MacOS, .appimage or binary on Linux) ramsesClientPort integer 18185 Listening port of the Ramses Daemon ramsesFolderPath string \"~/Ramses\" The folder containing all Ramses files (settings, projects, etc) userSettings dict or object {} Use this attribute to store your own settings. You can add as many key/value pairs as you need, they will be saved with the RamSettings.save() method too. version string The current API version Read-only.","title":"Attributes"},{"location":"dev/add-ons-reference/ram_settings/#methods","text":"Method Arguments Description save Saves the current settings to the disk. folderPath \u25b9 string The folder path to the settings filePath \u25b9 string The file path to the settings","title":"Methods"},{"location":"dev/add-ons-reference/ram_settings/#api-dev-notes","text":"Note This section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_settings/#private-attributes","text":"Attribute Type Default Description folderNames FolderNames A simple class containing the common names for subfolders. See the constants for more information.","title":"Private Attributes"},{"location":"dev/add-ons-reference/ram_settings/#examples","text":"ramses = Ramses.instance settings = ramses.settings theAsset = RamAsset(\"thing\", \"stuff\") thePreviewFolder = theAsset.folderPath() + \"/\" + settings.folderNames.preview","title":"Examples"},{"location":"dev/add-ons-reference/ram_shot/","text":"RamShot A shot. Inherits: RamItem Static Methods Method Arguments Description fromDict \u25b9 RamShot dict or object : shotDict Builds a RamShot from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc) Methods Method Arguments Description constructor string : shotName , string : shotShortName , string : shotFolder , float : duration = 0.0 duration \u25b9 float The shot duration, in seconds API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data duration Mutable","title":"RamShot"},{"location":"dev/add-ons-reference/ram_shot/#ramshot","text":"A shot. Inherits: RamItem","title":"RamShot"},{"location":"dev/add-ons-reference/ram_shot/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamShot dict or object : shotDict Builds a RamShot from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc)","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_shot/#methods","text":"Method Arguments Description constructor string : shotName , string : shotShortName , string : shotFolder , float : duration = 0.0 duration \u25b9 float The shot duration, in seconds","title":"Methods"},{"location":"dev/add-ons-reference/ram_shot/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_shot/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data duration Mutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_state/","text":"RamState Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject Static Methods Method Arguments Description fromDict \u25b9 RamState dict or object : stateDict Builds a RamState from a dict or object like the one returned by the RamDaemonInterface Methods Method Arguments Description constructor string : stateName , string : stateShortName , float : completionRatio = 0 , list of int : color = [67, 67, 67] completionRatio \u25b9 integer The ratio of completion of this state in the range [0, 100] . color \u25b9 array of integers The color for this state, [R, G, B] in the range [0, 255] . API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data completionRatio Immutable color Immutable","title":"RamState"},{"location":"dev/add-ons-reference/ram_state/#ramstate","text":"Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject","title":"RamState"},{"location":"dev/add-ons-reference/ram_state/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamState dict or object : stateDict Builds a RamState from a dict or object like the one returned by the RamDaemonInterface","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_state/#methods","text":"Method Arguments Description constructor string : stateName , string : stateShortName , float : completionRatio = 0 , list of int : color = [67, 67, 67] completionRatio \u25b9 integer The ratio of completion of this state in the range [0, 100] . color \u25b9 array of integers The color for this state, [R, G, B] in the range [0, 255] .","title":"Methods"},{"location":"dev/add-ons-reference/ram_state/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_state/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data completionRatio Immutable color Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_status/","text":"RamStatus A state associated to a comment, the user who changed the state, etc. Static Methods Method Arguments Description fromDict \u25b9 RamStatus dict or object : statusDict Builds a RamStatus from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path. Attributes Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file. Methods Method Arguments Description constructor RamState : state , string : comment = \"\" , float : completionRatio = -1 , integer : version = 0 , RamUser : user = None , datetime : stateDate = None If user is None , the current user (as returned by Ramses.instance().currentUser() will be used. If completionRatio is -1 , the completion ratio of the given state will be used.","title":"RamStatus"},{"location":"dev/add-ons-reference/ram_status/#ramstatus","text":"A state associated to a comment, the user who changed the state, etc.","title":"RamStatus"},{"location":"dev/add-ons-reference/ram_status/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamStatus dict or object : statusDict Builds a RamStatus from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_status/#attributes","text":"Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file.","title":"Attributes"},{"location":"dev/add-ons-reference/ram_status/#methods","text":"Method Arguments Description constructor RamState : state , string : comment = \"\" , float : completionRatio = -1 , integer : version = 0 , RamUser : user = None , datetime : stateDate = None If user is None , the current user (as returned by Ramses.instance().currentUser() will be used. If completionRatio is -1 , the completion ratio of the given state will be used.","title":"Methods"},{"location":"dev/add-ons-reference/ram_step/","text":"RamStep A step in the production of the shots or assets of the project. Inherits: RamObject Static Methods Method Arguments Description fromDict \u25b9 RamStep dict or object : stepDict Builds a RamStep from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamStep string : path Returns a RamStep instance built using the given file path. Methods Method Arguments Description constructor string : stepName , string : stepShortName , string : stepFolderPath = \"\" , StepType : stepType = \"\" At least the folder or the type must be provided, but one is enough as the other info can be gotten from the Ramses Tree folderPath \u25b9 string The absolute path to the folder containing the common files for this step inputPipes \u25b9 list of RamPipe The pipes comming into this step. outputPipes \u25b9 list of RamPipe The pipes going out of this step. project \u25b9 RamProject Gets the project this step belongs too. To improve performance, if only the shortName is needed, prefer using projectShortName() projectShortName \u25b9 string Gets the short name of the project this step belongs too. stepType \u25b9 StepType The type of this step, one of StepType.PRE_PRODUCTION , StepType.SHOT_PRODUCTION , StepType.ASSET_PRODUCTION , StepType.POST_PRODUCTION templatesFolderPath \u25b9 string The absolute path to the folder containing the template files for this step templatesPublishFilePaths \u25b9 list of string The list of published files for the templates templatesPublishPath \u25b9 string The absolute path to the folder where templates are published API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data commonFolderPath Immutable inputPipes Immutable outputPipes Immutable stepType Immutable templatesFolderPath Immutable","title":"RamStep"},{"location":"dev/add-ons-reference/ram_step/#ramstep","text":"A step in the production of the shots or assets of the project. Inherits: RamObject","title":"RamStep"},{"location":"dev/add-ons-reference/ram_step/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamStep dict or object : stepDict Builds a RamStep from a dict or object like the one returned by the RamDaemonInterface fromPath \u25b9 RamStep string : path Returns a RamStep instance built using the given file path.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_step/#methods","text":"Method Arguments Description constructor string : stepName , string : stepShortName , string : stepFolderPath = \"\" , StepType : stepType = \"\" At least the folder or the type must be provided, but one is enough as the other info can be gotten from the Ramses Tree folderPath \u25b9 string The absolute path to the folder containing the common files for this step inputPipes \u25b9 list of RamPipe The pipes comming into this step. outputPipes \u25b9 list of RamPipe The pipes going out of this step. project \u25b9 RamProject Gets the project this step belongs too. To improve performance, if only the shortName is needed, prefer using projectShortName() projectShortName \u25b9 string Gets the short name of the project this step belongs too. stepType \u25b9 StepType The type of this step, one of StepType.PRE_PRODUCTION , StepType.SHOT_PRODUCTION , StepType.ASSET_PRODUCTION , StepType.POST_PRODUCTION templatesFolderPath \u25b9 string The absolute path to the folder containing the template files for this step templatesPublishFilePaths \u25b9 list of string The list of published files for the templates templatesPublishPath \u25b9 string The absolute path to the folder where templates are published","title":"Methods"},{"location":"dev/add-ons-reference/ram_step/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_step/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data commonFolderPath Immutable inputPipes Immutable outputPipes Immutable stepType Immutable templatesFolderPath Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ram_user/","text":"RamUser The class representing users. Inherits: RamObject Static Methods Method Arguments Description fromDict \u25b9 RamUser dict or object : stepDict Builds a RamUser from a dict or object like the one returned by the RamDaemonInterface Methods Method Arguments Description constructor string : userName , string : userShortName , string : userFolderPath = \"\" , UserRole : role = UserRole.STANDARD configPath \u25b9 string The path to the Config folder for this user folderPath \u25b9 string The path to the user folder role \u25b9 UserRole One of UserRole.ADMIN , UserRole.PROJECT_ADMIN , UserRole.LEAD or UserRole.STANDARD API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data configPath Immutable folderPath Immutable role Immutable","title":"RamUser"},{"location":"dev/add-ons-reference/ram_user/#ramuser","text":"The class representing users. Inherits: RamObject","title":"RamUser"},{"location":"dev/add-ons-reference/ram_user/#static-methods","text":"Method Arguments Description fromDict \u25b9 RamUser dict or object : stepDict Builds a RamUser from a dict or object like the one returned by the RamDaemonInterface","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_user/#methods","text":"Method Arguments Description constructor string : userName , string : userShortName , string : userFolderPath = \"\" , UserRole : role = UserRole.STANDARD configPath \u25b9 string The path to the Config folder for this user folderPath \u25b9 string The path to the user folder role \u25b9 UserRole One of UserRole.ADMIN , UserRole.PROJECT_ADMIN , UserRole.LEAD or UserRole.STANDARD","title":"Methods"},{"location":"dev/add-ons-reference/ram_user/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_user/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data configPath Immutable folderPath Immutable role Immutable","title":"(Im)mutable data"},{"location":"dev/add-ons-reference/ramses/","text":"Ramses The main class. One (and only one) instance globally available (Ramses is a singleton ), by calling Ramses.instance() . Static Methods Method Arguments Description instance \u25b9 Ramses Returns the Ramses unique instance. version \u25b9 string The current version of this API Static Attributes Attribute Type Default Description apiReferenceUrl string This page URL A link to this API documentation addonsHelpUrl string The URL to this page A link to the Ramses add-ons documentation generalHelpUrl string The URL to this documentation A link to the Ramses documentation Attributes Read the section entitled Callbacks below (and see the Examples ) for more information about the methods you can add to these lists. Attribute Type Default Description publishScripts list [] A list of scripts/functions to be triggered when Ramses.instance().publish() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user publishes the current file from the host application. statusScripts list [] A list of scripts/functions to be triggered when Ramses.instance().updateStatus() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user changes the current status of an asset / shot from the host application. importScripts list [] A list of scripts/functions to be triggered when Ramses.instance().import() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user asks to import an item. userScripts dict or object {} This dict or object is here for your convenience, to make it easy to register and call any method from anywhere you\u2019ve imported Ramses without having to import the file containing the method. Just register with Ramses.instance().userScripts[\"TheFunctionName\"] = aFunction and call the method with Ramses.instance().userScripts[\"TheFunctionName\"](some, args) . Methods Method Arguments Description alternativeFolderPaths \u25b9 list of string A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. backupFolderPath \u25b9 list of string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks Daemon availability and initiates the connection. Returns success. currentProject \u25b9 RamProject or None The current project. currentStep \u25b9 RamStep or None The current step. currentUser \u25b9 RamUser or None The current user. daemonInterface \u25b9 RamDaemonInterface The Daemon interface unique instance. Same as RamDaemonInterface.instance() disconnect \u25b9 boolean Gets back to offline mode (stops all communications with the Daemon ). folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 importItem RamItem or RamAsset or RamShot : item , string : filePath ,, string : stepShortName = \"\" Runs the scripts in Ramses.instance().importScripts . Read the section entitled Callbacks below for more details. project \u25b9 RamProject string : projectShortName Gets a specific project. projects \u25b9 list of RamProject The list of available projects. projectsPath \u25b9 string The path to the folder containing projects. states \u25b9 list of RamState The list of available states. state \u25b9 RamState string : stateShortName = WIP Gets a specific state. online \u25b9 boolean True if connected to the Daemon and the Daemon is responding. publish RamItem or RamAsset or RamShot : item , string : filePath , RamStep : step Runs the scripts in Ramses.instance().publishScripts . Read the section entitled Callbacks below for more details. showClient Raises the Ramses Client window, launches the client if it is not already running. setCurrentProject RamProject : project Sets the current project. settings \u25b9 RamSettings The settings unique instance. Same as RamSettings.instance() updateStatus RamItem or RamAsset or RamShot : item , RamStatus : status , RamStep : step Runs the scripts in Ramses.instance().statusScripts . Read the section entitled Callbacks below for more details. usersPath \u25b9 string The path to the folder containing users. Callbacks The callbacks are the methods you can add to these lists: Ramses.publishScripts , Ramses.statusScripts , Ramses.importScripts , Ramses.userScripts . When using one of the provided Ramses Add-ons , these callbacks will be called automatically when the user publishes an item, changes the status, or wants to import a file. This makes it very easy to extend these add-ons by just adding your own methods. If you\u2019re developping your own add-on from scratch, it may be useful to add your methods to these lists to call them easily anyway; use Ramses.publish() , Ramses.importItem() , and Ramses.updateStatus() . Ramses will pass a few arguments depending on the context to theses methods, which they\u2019ll have to handle. The table below describes the callbacks. Callback Arguments Description importItem RamItem or RamAsset or RamShot : item , list of string : filePaths , RamStep : step - item is the item from which the user wants to import a file. - filePaths is the list of absolute path to the files the user wants to import. This list can be empty! In this case, it means the add-on must automatically choose the right file from the publish folder of the item and step. - step is the step from which the user wants to import. You can check step.outputPipes() to know which file types have been published, and inputPipes() from the step you\u2019re importing to to know which files to accept. publish RamItem or RamAsset or RamShot : item , string : filePath , RamStep : step - item is the item from which the user wants to publish a file. - filePath is the absolute path to the folder where the user wants to publish. - step is the step from which the user is publishing. You can check step.outputPipes() to know which file types to publish. updateStatus RamItem or RamAsset or RamShot : item , RamStatus : status , RamStep : step - item is the item which is being updated. - status is the new status. - step is the step being updated. Examples # Python # import ramses import ramses as ram # Get the instance ramses = ram.Ramses.instance() # A simple method def published(item, filePath, step): ram.log(\"Hello, I've been published!\") # Another one def aFunction( arg1, arg2): ram.log(\"I'm doing something\") # Adds the method to the scripts which will be run when the add-on publishes a file ramses.publishScripts.append( published ) # Let's store a function in the userScripts to make it available everywhere ramses.userScripts[\"MyFunction\"] = aFunction # The provided Ramses add-ons for Blender, Maya, etc. automatically trigger these scripts. # If you're developping another addon, you have to call Ramses.publish() to run them ramses.publish(currentItem, 'a path', 'STEP') # From anywhere in the app where the Ramses module has been imported, you can call 'aFunction' with ramses.userScripts[\"MyFunction\"](some, arg) // ExtendScript // include the Ramses lib #include ramses.jsxinc // Get the instance var ramses = Ramses.instance(); // A simple method function published(item, filePath, step) { ram.log(\"Hello, I've been published!\"); } // Another one function aFunction( arg1, arg2) { ram.log(\"I'm doing something\"); } // Adds the method to the scripts which will be run when the add-on publishes a file ramses.publishScripts.push( published ); // Let's store a function in the userScripts to make it available everywhere ramses.userScripts[\"MyFunction\"] = aFunction; // The provided Ramses add-ons for Blender, Maya, etc. automatically trigger these scripts. // If you're developping another addon, you have to call Ramses.publish() to run them ramses.publish(currentItem, 'a path', 'STEP'); // From anywhere in the app, you can call 'aFunction' with ramses.userScripts[\"MyFunction\"](some, arg); API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Private attributes Attribute Type Default Description defaultStates list of RamState The list of states to use if the Daemon is not available. defaultState RamState The state to use as default (\u201cWIP\u201d). (Im)mutable data The data returned by the methods can be either mutable or immutable . Method Type of the returned data alternativeFolderPaths Immutable backupFolderPath Immutable currentProject Mutable currentStep Mutable currentUser Mutable folderPath Immutable projects Mutable project Mutable states Immutable state Mutable","title":"Ramses"},{"location":"dev/add-ons-reference/ramses/#ramses","text":"The main class. One (and only one) instance globally available (Ramses is a singleton ), by calling Ramses.instance() .","title":"Ramses"},{"location":"dev/add-ons-reference/ramses/#static-methods","text":"Method Arguments Description instance \u25b9 Ramses Returns the Ramses unique instance. version \u25b9 string The current version of this API","title":"Static Methods"},{"location":"dev/add-ons-reference/ramses/#static-attributes","text":"Attribute Type Default Description apiReferenceUrl string This page URL A link to this API documentation addonsHelpUrl string The URL to this page A link to the Ramses add-ons documentation generalHelpUrl string The URL to this documentation A link to the Ramses documentation","title":"Static Attributes"},{"location":"dev/add-ons-reference/ramses/#attributes","text":"Read the section entitled Callbacks below (and see the Examples ) for more information about the methods you can add to these lists. Attribute Type Default Description publishScripts list [] A list of scripts/functions to be triggered when Ramses.instance().publish() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user publishes the current file from the host application. statusScripts list [] A list of scripts/functions to be triggered when Ramses.instance().updateStatus() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user changes the current status of an asset / shot from the host application. importScripts list [] A list of scripts/functions to be triggered when Ramses.instance().import() is called. If you\u2019re using one of the provided Add-ons, you can add your own callbacks to this list so they\u2019re run when the user asks to import an item. userScripts dict or object {} This dict or object is here for your convenience, to make it easy to register and call any method from anywhere you\u2019ve imported Ramses without having to import the file containing the method. Just register with Ramses.instance().userScripts[\"TheFunctionName\"] = aFunction and call the method with Ramses.instance().userScripts[\"TheFunctionName\"](some, args) .","title":"Attributes"},{"location":"dev/add-ons-reference/ramses/#methods","text":"Method Arguments Description alternativeFolderPaths \u25b9 list of string A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. backupFolderPath \u25b9 list of string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks Daemon availability and initiates the connection. Returns success. currentProject \u25b9 RamProject or None The current project. currentStep \u25b9 RamStep or None The current step. currentUser \u25b9 RamUser or None The current user. daemonInterface \u25b9 RamDaemonInterface The Daemon interface unique instance. Same as RamDaemonInterface.instance() disconnect \u25b9 boolean Gets back to offline mode (stops all communications with the Daemon ). folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 importItem RamItem or RamAsset or RamShot : item , string : filePath ,, string : stepShortName = \"\" Runs the scripts in Ramses.instance().importScripts . Read the section entitled Callbacks below for more details. project \u25b9 RamProject string : projectShortName Gets a specific project. projects \u25b9 list of RamProject The list of available projects. projectsPath \u25b9 string The path to the folder containing projects. states \u25b9 list of RamState The list of available states. state \u25b9 RamState string : stateShortName = WIP Gets a specific state. online \u25b9 boolean True if connected to the Daemon and the Daemon is responding. publish RamItem or RamAsset or RamShot : item , string : filePath , RamStep : step Runs the scripts in Ramses.instance().publishScripts . Read the section entitled Callbacks below for more details. showClient Raises the Ramses Client window, launches the client if it is not already running. setCurrentProject RamProject : project Sets the current project. settings \u25b9 RamSettings The settings unique instance. Same as RamSettings.instance() updateStatus RamItem or RamAsset or RamShot : item , RamStatus : status , RamStep : step Runs the scripts in Ramses.instance().statusScripts . Read the section entitled Callbacks below for more details. usersPath \u25b9 string The path to the folder containing users.","title":"Methods"},{"location":"dev/add-ons-reference/ramses/#callbacks","text":"The callbacks are the methods you can add to these lists: Ramses.publishScripts , Ramses.statusScripts , Ramses.importScripts , Ramses.userScripts . When using one of the provided Ramses Add-ons , these callbacks will be called automatically when the user publishes an item, changes the status, or wants to import a file. This makes it very easy to extend these add-ons by just adding your own methods. If you\u2019re developping your own add-on from scratch, it may be useful to add your methods to these lists to call them easily anyway; use Ramses.publish() , Ramses.importItem() , and Ramses.updateStatus() . Ramses will pass a few arguments depending on the context to theses methods, which they\u2019ll have to handle. The table below describes the callbacks. Callback Arguments Description importItem RamItem or RamAsset or RamShot : item , list of string : filePaths , RamStep : step - item is the item from which the user wants to import a file. - filePaths is the list of absolute path to the files the user wants to import. This list can be empty! In this case, it means the add-on must automatically choose the right file from the publish folder of the item and step. - step is the step from which the user wants to import. You can check step.outputPipes() to know which file types have been published, and inputPipes() from the step you\u2019re importing to to know which files to accept. publish RamItem or RamAsset or RamShot : item , string : filePath , RamStep : step - item is the item from which the user wants to publish a file. - filePath is the absolute path to the folder where the user wants to publish. - step is the step from which the user is publishing. You can check step.outputPipes() to know which file types to publish. updateStatus RamItem or RamAsset or RamShot : item , RamStatus : status , RamStep : step - item is the item which is being updated. - status is the new status. - step is the step being updated.","title":"Callbacks"},{"location":"dev/add-ons-reference/ramses/#examples","text":"# Python # import ramses import ramses as ram # Get the instance ramses = ram.Ramses.instance() # A simple method def published(item, filePath, step): ram.log(\"Hello, I've been published!\") # Another one def aFunction( arg1, arg2): ram.log(\"I'm doing something\") # Adds the method to the scripts which will be run when the add-on publishes a file ramses.publishScripts.append( published ) # Let's store a function in the userScripts to make it available everywhere ramses.userScripts[\"MyFunction\"] = aFunction # The provided Ramses add-ons for Blender, Maya, etc. automatically trigger these scripts. # If you're developping another addon, you have to call Ramses.publish() to run them ramses.publish(currentItem, 'a path', 'STEP') # From anywhere in the app where the Ramses module has been imported, you can call 'aFunction' with ramses.userScripts[\"MyFunction\"](some, arg) // ExtendScript // include the Ramses lib #include ramses.jsxinc // Get the instance var ramses = Ramses.instance(); // A simple method function published(item, filePath, step) { ram.log(\"Hello, I've been published!\"); } // Another one function aFunction( arg1, arg2) { ram.log(\"I'm doing something\"); } // Adds the method to the scripts which will be run when the add-on publishes a file ramses.publishScripts.push( published ); // Let's store a function in the userScripts to make it available everywhere ramses.userScripts[\"MyFunction\"] = aFunction; // The provided Ramses add-ons for Blender, Maya, etc. automatically trigger these scripts. // If you're developping another addon, you have to call Ramses.publish() to run them ramses.publish(currentItem, 'a path', 'STEP'); // From anywhere in the app, you can call 'aFunction' with ramses.userScripts[\"MyFunction\"](some, arg);","title":"Examples"},{"location":"dev/add-ons-reference/ramses/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ramses/#private-attributes","text":"Attribute Type Default Description defaultStates list of RamState The list of states to use if the Daemon is not available. defaultState RamState The state to use as default (\u201cWIP\u201d).","title":"Private attributes"},{"location":"dev/add-ons-reference/ramses/#immutable-data","text":"The data returned by the methods can be either mutable or immutable . Method Type of the returned data alternativeFolderPaths Immutable backupFolderPath Immutable currentProject Mutable currentStep Mutable currentUser Mutable folderPath Immutable projects Mutable project Mutable states Immutable state Mutable","title":"(Im)mutable data"},{"location":"dev/daemon-reference/","text":"Ramses Daemon API The Ramses Daemon is a local server used by the Ramses Add-ons to get and set data to the client (which in turn communicates with the Ramses Server to store the shared data) and the whole system. Ramses Daemon API Connecting to the Daemon Communicating with the Daemon Queries Replies The Ramses Daemon is automatically run by the Ramses client , the native application which is the heart of Ramses . Connecting to the Daemon Add-ons can communicate with the Daemon through a standard TCP Socket . The Daemon listens on port 18185 1 by default (but this can be adjusted in the Ramses Client settings), and is automatically started by the Ramses client . It is terminated when the client quits. Most of Ramses data can only be accessed if a user is logged-in in the Ramses Client , thus before communicating with the Daemon , a Ramses Add-on must check if the Client (and its Daemon ) is running (or start it), and if a user is logged-in. The initial connection to the Daemon usually follows these steps: Check if the Daemon is running by sending the ping query. If the Daemon replies, connection is ready Else, try to start the client and ping again. Check the version of the Daemon which is part of the reply to the ping . Check if the user is logged-in; if not, show an alert and raise the Ramses Client window. Communicating with the Daemon Queries Add-ons can post queries which use the form of the attributes part of a standard URL query; they are a single-line string of key=value pairs (the value may be optional) seperated by the & character. They should be encoded in UTF-8 , and special characters should use a standard URL percent-encoding . There\u2019s no need to enclose strings in quotes. Example queries: ping setCurrentProject&shortName=PROJ&name=The Project Replies The Daemon replies with a JSON object (encoded in UTF-8 ) which contains the following attributes: accepted : boolean . True if the Daemon has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the Daemon has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the Add-on . It contains explanation about the error, if any. query : string . The query that was made that the Daemon is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Note Replies are a single-line string, but they\u2019re prettyfied in this documentation for the sake of readabiliy Example Replies: { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Hi, this is the Ramses Daemon.\", \"content\": { \"version\": \"0.0.1\", \"ramses\": \"Ramses\", \"userName\": \"John Doe\", \"userShortName\": \"J.Doe\", \"logged-in\": true } } { \"accepted\": true, \"query\": \"setCurrentProject\", \"success\": true, \"message\": \"Current project set to: The Project.\", \"content\": { \"name\": \"The Project\", \"shortName\": \"PROJ\", \"path\": \"/home/user/Ramses/PROJECTS/The Project\", \"uuid\": \"12456abc\" } } This port was chosen in memory of Karl Marx, whose birth date was 05/05/1818. \u21a9","title":"Reference"},{"location":"dev/daemon-reference/#ramses-daemon-api","text":"The Ramses Daemon is a local server used by the Ramses Add-ons to get and set data to the client (which in turn communicates with the Ramses Server to store the shared data) and the whole system. Ramses Daemon API Connecting to the Daemon Communicating with the Daemon Queries Replies The Ramses Daemon is automatically run by the Ramses client , the native application which is the heart of Ramses .","title":"Ramses Daemon API"},{"location":"dev/daemon-reference/#connecting-to-the-daemon","text":"Add-ons can communicate with the Daemon through a standard TCP Socket . The Daemon listens on port 18185 1 by default (but this can be adjusted in the Ramses Client settings), and is automatically started by the Ramses client . It is terminated when the client quits. Most of Ramses data can only be accessed if a user is logged-in in the Ramses Client , thus before communicating with the Daemon , a Ramses Add-on must check if the Client (and its Daemon ) is running (or start it), and if a user is logged-in. The initial connection to the Daemon usually follows these steps: Check if the Daemon is running by sending the ping query. If the Daemon replies, connection is ready Else, try to start the client and ping again. Check the version of the Daemon which is part of the reply to the ping . Check if the user is logged-in; if not, show an alert and raise the Ramses Client window.","title":"Connecting to the Daemon"},{"location":"dev/daemon-reference/#communicating-with-the-daemon","text":"","title":"Communicating with the Daemon"},{"location":"dev/daemon-reference/#queries","text":"Add-ons can post queries which use the form of the attributes part of a standard URL query; they are a single-line string of key=value pairs (the value may be optional) seperated by the & character. They should be encoded in UTF-8 , and special characters should use a standard URL percent-encoding . There\u2019s no need to enclose strings in quotes. Example queries: ping setCurrentProject&shortName=PROJ&name=The Project","title":"Queries"},{"location":"dev/daemon-reference/#replies","text":"The Daemon replies with a JSON object (encoded in UTF-8 ) which contains the following attributes: accepted : boolean . True if the Daemon has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the Daemon has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the Add-on . It contains explanation about the error, if any. query : string . The query that was made that the Daemon is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Note Replies are a single-line string, but they\u2019re prettyfied in this documentation for the sake of readabiliy Example Replies: { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Hi, this is the Ramses Daemon.\", \"content\": { \"version\": \"0.0.1\", \"ramses\": \"Ramses\", \"userName\": \"John Doe\", \"userShortName\": \"J.Doe\", \"logged-in\": true } } { \"accepted\": true, \"query\": \"setCurrentProject\", \"success\": true, \"message\": \"Current project set to: The Project.\", \"content\": { \"name\": \"The Project\", \"shortName\": \"PROJ\", \"path\": \"/home/user/Ramses/PROJECTS/The Project\", \"uuid\": \"12456abc\" } } This port was chosen in memory of Karl Marx, whose birth date was 05/05/1818. \u21a9","title":"Replies"},{"location":"dev/daemon-reference/asset_q/","text":"Asset Queries getAsset Returns an asset. Query attributes getAsset shortName : string . The short name of the asset to retrieve. name : string (optional). The name of the asset to retrieve. Reply content The Daemon replies with the details about the asset. shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name. Example Query: getAsset&shortName=TRI&name=Tristan Reply: { \"accepted\": true, \"query\": \"getAsset\", \"success\": true, \"message\": \"Asset retrived.\", \"content\": { \"shortName\": \"TRI\", \"name\": \"Tristan\", \"folder\": \"/path/to/TRI\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Characters\" } } getAssets Returns the list of assets for the current project. Query attributes getAssets Reply content The Daemon replies with the list of assets. assets : array of objects . The assets. Each asset is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name. Example Query: getAssets Reply: { \"accepted\": true, \"query\": \"getAssets\", \"success\": true, \"message\": \"Asset list retrived.\", \"content\": { \"assets\": [ { \"shortName\": \"A1\", \"name\": \"Asset 01\", \"folder\": \"/path/to/A1\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Asset Group\" }, { \"shortName\": \"A2\", \"name\": \"Asset 02\", \"folder\": \"/path/to/A2\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Asset Group\" } ] } } getAssetGroups Returns the list of asset groups for the current project. Query attributes getAssetGroups Reply content The Daemon replies with the list of asset groups. assetGroups : array of objects . The asset groups. Each asset group is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. Example Query: getAssetGroups Reply: { \"accepted\": true, \"query\": \"getAgetAssetGroupsssets\", \"success\": true, \"message\": \"Asset group list retrived.\", \"content\": { \"assets\": [ { \"shortName\": \"CHAR\", \"name\": \"Characters\", \"folder\": \"/path/to/CHAR\" }, { \"shortName\": \"PROPS\", \"name\": \"Props\", \"folder\": \"/path/to/PROPS\" }, { \"shortName\": \"SETS\", \"name\": \"Sets\", \"folder\": \"/path/to/SETS\" } ] } }","title":"Asset queries"},{"location":"dev/daemon-reference/asset_q/#asset-queries","text":"","title":"Asset Queries"},{"location":"dev/daemon-reference/asset_q/#getasset","text":"Returns an asset.","title":"getAsset"},{"location":"dev/daemon-reference/asset_q/#query-attributes","text":"getAsset shortName : string . The short name of the asset to retrieve. name : string (optional). The name of the asset to retrieve.","title":"Query attributes"},{"location":"dev/daemon-reference/asset_q/#reply-content","text":"The Daemon replies with the details about the asset. shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name.","title":"Reply content"},{"location":"dev/daemon-reference/asset_q/#example","text":"Query: getAsset&shortName=TRI&name=Tristan Reply: { \"accepted\": true, \"query\": \"getAsset\", \"success\": true, \"message\": \"Asset retrived.\", \"content\": { \"shortName\": \"TRI\", \"name\": \"Tristan\", \"folder\": \"/path/to/TRI\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Characters\" } }","title":"Example"},{"location":"dev/daemon-reference/asset_q/#getassets","text":"Returns the list of assets for the current project.","title":"getAssets"},{"location":"dev/daemon-reference/asset_q/#query-attributes_1","text":"getAssets","title":"Query attributes"},{"location":"dev/daemon-reference/asset_q/#reply-content_1","text":"The Daemon replies with the list of assets. assets : array of objects . The assets. Each asset is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name.","title":"Reply content"},{"location":"dev/daemon-reference/asset_q/#example_1","text":"Query: getAssets Reply: { \"accepted\": true, \"query\": \"getAssets\", \"success\": true, \"message\": \"Asset list retrived.\", \"content\": { \"assets\": [ { \"shortName\": \"A1\", \"name\": \"Asset 01\", \"folder\": \"/path/to/A1\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Asset Group\" }, { \"shortName\": \"A2\", \"name\": \"Asset 02\", \"folder\": \"/path/to/A2\", \"tags\": [ \"tag1\", \"tag2\", \"tag3\" ], \"group\": \"Asset Group\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/asset_q/#getassetgroups","text":"Returns the list of asset groups for the current project.","title":"getAssetGroups"},{"location":"dev/daemon-reference/asset_q/#query-attributes_2","text":"getAssetGroups","title":"Query attributes"},{"location":"dev/daemon-reference/asset_q/#reply-content_2","text":"The Daemon replies with the list of asset groups. assetGroups : array of objects . The asset groups. Each asset group is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset.","title":"Reply content"},{"location":"dev/daemon-reference/asset_q/#example_2","text":"Query: getAssetGroups Reply: { \"accepted\": true, \"query\": \"getAgetAssetGroupsssets\", \"success\": true, \"message\": \"Asset group list retrived.\", \"content\": { \"assets\": [ { \"shortName\": \"CHAR\", \"name\": \"Characters\", \"folder\": \"/path/to/CHAR\" }, { \"shortName\": \"PROPS\", \"name\": \"Props\", \"folder\": \"/path/to/PROPS\" }, { \"shortName\": \"SETS\", \"name\": \"Sets\", \"folder\": \"/path/to/SETS\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/general_q/","text":"General queries getRamsesFolderPath Returns the general Ramses folder, containing projects and config files\u2026 Query attributes getRamsesFolderPath Reply content The Daemon replies with the path to the folder. folder : string . The folder. Example Query: getRamsesFolderPath Reply: { \"accepted\": true, \"query\": \"getAsset\", \"success\": true, \"message\": \"Asset retrived.\", \"content\": { \"folder\": \"/home/duduf/Ramses\" } } ping Checks if the Daemon is running, and gets its version and current user information. Query attributes ping Reply content The Daemon replies with its version and information about the current user. version : string . The version of the client/daemon. ramses : string . The name of the client, should be \u201cRamses\u201d for the official client. userName : string . The name of the user. Empty string if there\u2019s no logged-in user. userShortName : string . The short name of the user. Empty string if there\u2019s no logged-in user. logged-in :: boolean . True if a user is logged-in. Example Query: ping Reply: { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Hi, this is the Ramses Daemon.\", \"content\": { \"version\": \"0.0.1\", \"ramses\": \"Ramses\", \"userName\": \"John Doe\", \"userShortName\": \"J.Doe\", \"logged-in\": true } } raise Raises the client application main window. Query attributes raise Reply content None Example Query: raise","title":"General queries"},{"location":"dev/daemon-reference/general_q/#general-queries","text":"","title":"General queries"},{"location":"dev/daemon-reference/general_q/#getramsesfolderpath","text":"Returns the general Ramses folder, containing projects and config files\u2026","title":"getRamsesFolderPath"},{"location":"dev/daemon-reference/general_q/#query-attributes","text":"getRamsesFolderPath","title":"Query attributes"},{"location":"dev/daemon-reference/general_q/#reply-content","text":"The Daemon replies with the path to the folder. folder : string . The folder.","title":"Reply content"},{"location":"dev/daemon-reference/general_q/#example","text":"Query: getRamsesFolderPath Reply: { \"accepted\": true, \"query\": \"getAsset\", \"success\": true, \"message\": \"Asset retrived.\", \"content\": { \"folder\": \"/home/duduf/Ramses\" } }","title":"Example"},{"location":"dev/daemon-reference/general_q/#ping","text":"Checks if the Daemon is running, and gets its version and current user information.","title":"ping"},{"location":"dev/daemon-reference/general_q/#query-attributes_1","text":"ping","title":"Query attributes"},{"location":"dev/daemon-reference/general_q/#reply-content_1","text":"The Daemon replies with its version and information about the current user. version : string . The version of the client/daemon. ramses : string . The name of the client, should be \u201cRamses\u201d for the official client. userName : string . The name of the user. Empty string if there\u2019s no logged-in user. userShortName : string . The short name of the user. Empty string if there\u2019s no logged-in user. logged-in :: boolean . True if a user is logged-in.","title":"Reply content"},{"location":"dev/daemon-reference/general_q/#example_1","text":"Query: ping Reply: { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Hi, this is the Ramses Daemon.\", \"content\": { \"version\": \"0.0.1\", \"ramses\": \"Ramses\", \"userName\": \"John Doe\", \"userShortName\": \"J.Doe\", \"logged-in\": true } }","title":"Example"},{"location":"dev/daemon-reference/general_q/#raise","text":"Raises the client application main window.","title":"raise"},{"location":"dev/daemon-reference/general_q/#query-attributes_2","text":"raise","title":"Query attributes"},{"location":"dev/daemon-reference/general_q/#reply-content_2","text":"None","title":"Reply content"},{"location":"dev/daemon-reference/general_q/#example_2","text":"Query: raise","title":"Example"},{"location":"dev/daemon-reference/pipe_q/","text":"Pipe queries getPipes Returns the list of pipes for the current project. Query attributes getPipes Reply content The Daemon replies with the list of Pipes. pipes : array of objects . The pipes. Each pipe is an object with: inputStepShortName : string . The short name of the input step. outputStepShortName : string . The short name of the output step. pipeFiles : list of object . The pipe files, objects with: colorSpace : string . The short name of the color space shortName : string . The short name pipe file. fileType : object . The file type, an object with: name : string shortName : string extensions : list of string Example Query: getPipes Reply: { \"accepted\": true, \"query\": \"getPipes\", \"success\": true, \"message\": \"Pipeline retrieved.\", \"content\": { \"pipes\": [ { \"inputStepShortName\": \"TEX\", \"outputStepShortName\": \"MOD\", \"pipeFiles\": [ { \"colorSpace\": \"\", \"shortName\": \"Preview\", \"fileType\": { \"name\": \"JPEG Image\", \"shortName\": \"jpg\", \"extensions\": [\".jpg\", \".jpeg\"] } }, { \"colorSpace\": \"\", \"shortName\": \"Publish\", \"fileType\": { \"name\": \"Maya Binary\", \"shortName\": \"mb\", \"extensions\": [\".mb\"] } } ] }, { \"inputStepShortName\": \"STORY\", \"outputStepShortName\": \"CD\", \"pipeFiles\": [ { \"colorSpace\": \"\", \"shortName\": \"Preview\", \"fileType\": { \"name\": \"JPEG Image\", \"shortName\": \"jpg\", \"extensions\": [\".jpg\", \".jpeg\"] } }, { \"colorSpace\": \"\", \"shortName\": \"Publish\", \"fileType\": { \"name\": \"Adobe PDF\", \"shortName\": \"pdf\", \"extensions\": [\".pdf\"] } } ] } ] } }","title":"Pipe queries"},{"location":"dev/daemon-reference/pipe_q/#pipe-queries","text":"","title":"Pipe queries"},{"location":"dev/daemon-reference/pipe_q/#getpipes","text":"Returns the list of pipes for the current project.","title":"getPipes"},{"location":"dev/daemon-reference/pipe_q/#query-attributes","text":"getPipes","title":"Query attributes"},{"location":"dev/daemon-reference/pipe_q/#reply-content","text":"The Daemon replies with the list of Pipes. pipes : array of objects . The pipes. Each pipe is an object with: inputStepShortName : string . The short name of the input step. outputStepShortName : string . The short name of the output step. pipeFiles : list of object . The pipe files, objects with: colorSpace : string . The short name of the color space shortName : string . The short name pipe file. fileType : object . The file type, an object with: name : string shortName : string extensions : list of string","title":"Reply content"},{"location":"dev/daemon-reference/pipe_q/#example","text":"Query: getPipes Reply: { \"accepted\": true, \"query\": \"getPipes\", \"success\": true, \"message\": \"Pipeline retrieved.\", \"content\": { \"pipes\": [ { \"inputStepShortName\": \"TEX\", \"outputStepShortName\": \"MOD\", \"pipeFiles\": [ { \"colorSpace\": \"\", \"shortName\": \"Preview\", \"fileType\": { \"name\": \"JPEG Image\", \"shortName\": \"jpg\", \"extensions\": [\".jpg\", \".jpeg\"] } }, { \"colorSpace\": \"\", \"shortName\": \"Publish\", \"fileType\": { \"name\": \"Maya Binary\", \"shortName\": \"mb\", \"extensions\": [\".mb\"] } } ] }, { \"inputStepShortName\": \"STORY\", \"outputStepShortName\": \"CD\", \"pipeFiles\": [ { \"colorSpace\": \"\", \"shortName\": \"Preview\", \"fileType\": { \"name\": \"JPEG Image\", \"shortName\": \"jpg\", \"extensions\": [\".jpg\", \".jpeg\"] } }, { \"colorSpace\": \"\", \"shortName\": \"Publish\", \"fileType\": { \"name\": \"Adobe PDF\", \"shortName\": \"pdf\", \"extensions\": [\".pdf\"] } } ] } ] } }","title":"Example"},{"location":"dev/daemon-reference/project_q/","text":"Project queries getCurrentProject Returns the current project. Query attributes getCurrentProject Reply content The Daemon replies with the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: getCurrentProject Reply: { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Current project is: Project 01.\", \"content\": { \"shortName\": \"P1\", \"name\": \"Project 01\", \"width\": 2048, \"height\": 858, \"framerate\": 24.0, \"folder\": \"/path/to/P1\" } } getProject Gets a specific project Query attributes getProject shortName : string . The short name of the project. name : string (optional). The name of the project. Reply content The Daemon replies with more information about the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: getProject&name=The Project&shortName=PROJ Reply: { \"accepted\": true, \"query\": \"getProject\", \"success\": true, \"message\": \"Project information retrived.\", \"content\": { \"shortName\": \"PROJ\", \"name\": \"The Project\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/PROJ\" } } getProjects Returns the list of available projects. Query attributes getProjects Reply content The Daemon replies with the list of projects. projects : array of objects . The projects. Each project is an object with: shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: getProjects Reply: { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Project list retrived.\", \"content\": { \"projects\": [ { \"shortName\": \"P1\", \"name\": \"Project 01\", \"width\": 2048, \"height\": 858, \"framerate\": 24.0, \"folder\": \"/path/to/P1\" }, { \"shortName\": \"P2\", \"name\": \"Project 02\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/P2\" } ] } } setCurrentProject Sets the current project Query attributes setCurrentProject shortName : string . The short name of the project. name : string (optional). The name of the project. Reply content The Daemon replies with more information about the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: setCurrentProject&name=The Project&shortName=PROJ Reply: { \"accepted\": true, \"query\": \"setCurrentProject\", \"success\": true, \"message\": \"Current project set to: The Project.\", \"content\": { \"shortName\": \"PROJ\", \"name\": \"The Project\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/PROJ\" } }","title":"Project queries"},{"location":"dev/daemon-reference/project_q/#project-queries","text":"","title":"Project queries"},{"location":"dev/daemon-reference/project_q/#getcurrentproject","text":"Returns the current project.","title":"getCurrentProject"},{"location":"dev/daemon-reference/project_q/#query-attributes","text":"getCurrentProject","title":"Query attributes"},{"location":"dev/daemon-reference/project_q/#reply-content","text":"The Daemon replies with the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/project_q/#example","text":"Query: getCurrentProject Reply: { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Current project is: Project 01.\", \"content\": { \"shortName\": \"P1\", \"name\": \"Project 01\", \"width\": 2048, \"height\": 858, \"framerate\": 24.0, \"folder\": \"/path/to/P1\" } }","title":"Example"},{"location":"dev/daemon-reference/project_q/#getproject","text":"Gets a specific project","title":"getProject"},{"location":"dev/daemon-reference/project_q/#query-attributes_1","text":"getProject shortName : string . The short name of the project. name : string (optional). The name of the project.","title":"Query attributes"},{"location":"dev/daemon-reference/project_q/#reply-content_1","text":"The Daemon replies with more information about the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/project_q/#example_1","text":"Query: getProject&name=The Project&shortName=PROJ Reply: { \"accepted\": true, \"query\": \"getProject\", \"success\": true, \"message\": \"Project information retrived.\", \"content\": { \"shortName\": \"PROJ\", \"name\": \"The Project\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/PROJ\" } }","title":"Example"},{"location":"dev/daemon-reference/project_q/#getprojects","text":"Returns the list of available projects.","title":"getProjects"},{"location":"dev/daemon-reference/project_q/#query-attributes_2","text":"getProjects","title":"Query attributes"},{"location":"dev/daemon-reference/project_q/#reply-content_2","text":"The Daemon replies with the list of projects. projects : array of objects . The projects. Each project is an object with: shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/project_q/#example_2","text":"Query: getProjects Reply: { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Project list retrived.\", \"content\": { \"projects\": [ { \"shortName\": \"P1\", \"name\": \"Project 01\", \"width\": 2048, \"height\": 858, \"framerate\": 24.0, \"folder\": \"/path/to/P1\" }, { \"shortName\": \"P2\", \"name\": \"Project 02\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/P2\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/project_q/#setcurrentproject","text":"Sets the current project","title":"setCurrentProject"},{"location":"dev/daemon-reference/project_q/#query-attributes_3","text":"setCurrentProject shortName : string . The short name of the project. name : string (optional). The name of the project.","title":"Query attributes"},{"location":"dev/daemon-reference/project_q/#reply-content_3","text":"The Daemon replies with more information about the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/project_q/#example_3","text":"Query: setCurrentProject&name=The Project&shortName=PROJ Reply: { \"accepted\": true, \"query\": \"setCurrentProject\", \"success\": true, \"message\": \"Current project set to: The Project.\", \"content\": { \"shortName\": \"PROJ\", \"name\": \"The Project\", \"width\": 1998, \"height\": 1080, \"framerate\": 60.0, \"folder\": \"/path/to/PROJ\" } }","title":"Example"},{"location":"dev/daemon-reference/shot_q/","text":"Shot queries getShot Returns a shot. Query attributes getShot shortName : string . The short name of the shot to retrieve. name : string (optional). The name of the shot to retrieve. Reply content The Daemon replies with more information about the shot. shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds Example Query: getShot&shortName=001* Reply: { \"accepted\": true, \"query\": \"getShot\", \"success\": true, \"message\": \"Shot list retrived.\", \"content\": { \"shortName\": \"001\", \"name\": \"Shot 01\", \"folder\": \"/path/to/001\", \"duration\": 1.25 } } getShots Returns the list of assets for the current project. Query attributes getShots filter : string . The filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard * Reply content The Daemon replies with the list of Shots. shots : array of objects . The shots. Each shot is an object with: shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds Example Query: getShots&filter=Seq01-* Reply: { \"accepted\": true, \"query\": \"getShots\", \"success\": true, \"message\": \"Shot list retrived.\", \"content\": { \"shots\": [ { \"shortName\": \"Seq01-S1\", \"name\": \"Shot 01\", \"folder\": \"/path/to/S1\", \"duration\": 1.25 }, { \"shortName\": \"Seq01-S2\", \"name\": \"Shot 02\", \"folder\": \"/path/to/S2\", \"duration\": 2.4 } ] } }","title":"Shot queries"},{"location":"dev/daemon-reference/shot_q/#shot-queries","text":"","title":"Shot queries"},{"location":"dev/daemon-reference/shot_q/#getshot","text":"Returns a shot.","title":"getShot"},{"location":"dev/daemon-reference/shot_q/#query-attributes","text":"getShot shortName : string . The short name of the shot to retrieve. name : string (optional). The name of the shot to retrieve.","title":"Query attributes"},{"location":"dev/daemon-reference/shot_q/#reply-content","text":"The Daemon replies with more information about the shot. shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds","title":"Reply content"},{"location":"dev/daemon-reference/shot_q/#example","text":"Query: getShot&shortName=001* Reply: { \"accepted\": true, \"query\": \"getShot\", \"success\": true, \"message\": \"Shot list retrived.\", \"content\": { \"shortName\": \"001\", \"name\": \"Shot 01\", \"folder\": \"/path/to/001\", \"duration\": 1.25 } }","title":"Example"},{"location":"dev/daemon-reference/shot_q/#getshots","text":"Returns the list of assets for the current project.","title":"getShots"},{"location":"dev/daemon-reference/shot_q/#query-attributes_1","text":"getShots filter : string . The filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard *","title":"Query attributes"},{"location":"dev/daemon-reference/shot_q/#reply-content_1","text":"The Daemon replies with the list of Shots. shots : array of objects . The shots. Each shot is an object with: shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds","title":"Reply content"},{"location":"dev/daemon-reference/shot_q/#example_1","text":"Query: getShots&filter=Seq01-* Reply: { \"accepted\": true, \"query\": \"getShots\", \"success\": true, \"message\": \"Shot list retrived.\", \"content\": { \"shots\": [ { \"shortName\": \"Seq01-S1\", \"name\": \"Shot 01\", \"folder\": \"/path/to/S1\", \"duration\": 1.25 }, { \"shortName\": \"Seq01-S2\", \"name\": \"Shot 02\", \"folder\": \"/path/to/S2\", \"duration\": 2.4 } ] } }","title":"Example"},{"location":"dev/daemon-reference/state_q/","text":"State and Status queries getState Returns a state. Query attributes getState shortName : string . The short name of the state to retrieve. name : string (optional). The name of the state to retrieve. Reply content The Daemon replies with more information about the state. shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] . Example Query: getState&shortName=TODO Reply: { \"accepted\": true, \"query\": \"getState\", \"success\": true, \"message\": \"State retrived.\", \"content\": { \"shortName\": \"TODO\", \"name\": \"Waiting...\", \"completionRatio\": 0, \"color\": [ 50, 50, 50] } } getStates Returns the list of available states. Query attributes getStates Reply content The Daemon replies with the list of States. states : array of objects . The states. Each states is an object with: shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] . Example Query: getStates Reply: { \"accepted\": true, \"query\": \"getStates\", \"success\": true, \"message\": \"State list retrived.\", \"content\": { \"states\": [ { \"shortName\": \"TODO\", \"name\": \"Waiting...\", \"completionRatio\": 0, \"color\": [ 50, 50, 50] }, { \"shortName\": \"WIP\", \"name\": \"Work In Progress\", \"completionRatio\": 50, \"color\": [ 255, 0, 0] }, { \"shortName\": \"OK\", \"name\": \"Finished and approved\", \"completionRatio\": 100, \"color\": [ 0, 255, 0] } ] } } getCurrentStatus Returns the current status of a given step for a given item (shot or asset). Query attributes getCurrentStatus shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" . step : string . The step short name. Reply content The Daemon replies with more information about the current status. step : string . The short name of the associated step. comment : string . The comment. completionRatio : int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version. Example Query: getCurrentStatus&shortName=TRI&name=Tristan&type=ASSET&step=RIG Reply: { \"accepted\": true, \"query\": \"getCurrentUser\", \"success\": true, \"message\": \"Current user is: John Doe.\", \"content\": { \"step\": \"RIG\", \"comment\": \"Working on it!\", \"completionRatio\": 75, \"date\": \"2021-04-12 10:55:23\", \"state\": \"WIP\", \"user\": \"Duduf\", \"version\": 12 } } getCurrentStatuses Returns the current status list (one per step) for a given item (shot or asset). Query attributes getCurrentStatuses shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" . Reply content The Daemon replies with the list of status. status : array of objects . The status. Each status is an object with: step : string . The short name of the associated step. comment : string . The comment. completionRatio : int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version. Example Query: getCurrentStatuses&shortName=TRI&name=Tristan&type=ASSET Reply: { \"accepted\": true, \"query\": \"getCurrentStatuses\", \"success\": true, \"message\": \"Current status list retrieved.\", \"content\": { \"status\": [ { \"step\": \"RIG\", \"comment\": \"Working on it!\", \"completionRatio\": 75, \"date\": \"2021-04-12 10:55:23\", \"state\": \"WIP\", \"user\": \"Duduf\", \"version\": 12 }, { \"step\": \"MOD\", \"comment\": \"Finished\", \"completionRatio\": 100, \"date\": \"2021-04-12 10:55:23\", \"state\": \"OK\", \"user\": \"Duduf\", \"version\": 5 } ] } }","title":"State and Status queries"},{"location":"dev/daemon-reference/state_q/#state-and-status-queries","text":"","title":"State and Status queries"},{"location":"dev/daemon-reference/state_q/#getstate","text":"Returns a state.","title":"getState"},{"location":"dev/daemon-reference/state_q/#query-attributes","text":"getState shortName : string . The short name of the state to retrieve. name : string (optional). The name of the state to retrieve.","title":"Query attributes"},{"location":"dev/daemon-reference/state_q/#reply-content","text":"The Daemon replies with more information about the state. shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] .","title":"Reply content"},{"location":"dev/daemon-reference/state_q/#example","text":"Query: getState&shortName=TODO Reply: { \"accepted\": true, \"query\": \"getState\", \"success\": true, \"message\": \"State retrived.\", \"content\": { \"shortName\": \"TODO\", \"name\": \"Waiting...\", \"completionRatio\": 0, \"color\": [ 50, 50, 50] } }","title":"Example"},{"location":"dev/daemon-reference/state_q/#getstates","text":"Returns the list of available states.","title":"getStates"},{"location":"dev/daemon-reference/state_q/#query-attributes_1","text":"getStates","title":"Query attributes"},{"location":"dev/daemon-reference/state_q/#reply-content_1","text":"The Daemon replies with the list of States. states : array of objects . The states. Each states is an object with: shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] .","title":"Reply content"},{"location":"dev/daemon-reference/state_q/#example_1","text":"Query: getStates Reply: { \"accepted\": true, \"query\": \"getStates\", \"success\": true, \"message\": \"State list retrived.\", \"content\": { \"states\": [ { \"shortName\": \"TODO\", \"name\": \"Waiting...\", \"completionRatio\": 0, \"color\": [ 50, 50, 50] }, { \"shortName\": \"WIP\", \"name\": \"Work In Progress\", \"completionRatio\": 50, \"color\": [ 255, 0, 0] }, { \"shortName\": \"OK\", \"name\": \"Finished and approved\", \"completionRatio\": 100, \"color\": [ 0, 255, 0] } ] } }","title":"Example"},{"location":"dev/daemon-reference/state_q/#getcurrentstatus","text":"Returns the current status of a given step for a given item (shot or asset).","title":"getCurrentStatus"},{"location":"dev/daemon-reference/state_q/#query-attributes_2","text":"getCurrentStatus shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" . step : string . The step short name.","title":"Query attributes"},{"location":"dev/daemon-reference/state_q/#reply-content_2","text":"The Daemon replies with more information about the current status. step : string . The short name of the associated step. comment : string . The comment. completionRatio : int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version.","title":"Reply content"},{"location":"dev/daemon-reference/state_q/#example_2","text":"Query: getCurrentStatus&shortName=TRI&name=Tristan&type=ASSET&step=RIG Reply: { \"accepted\": true, \"query\": \"getCurrentUser\", \"success\": true, \"message\": \"Current user is: John Doe.\", \"content\": { \"step\": \"RIG\", \"comment\": \"Working on it!\", \"completionRatio\": 75, \"date\": \"2021-04-12 10:55:23\", \"state\": \"WIP\", \"user\": \"Duduf\", \"version\": 12 } }","title":"Example"},{"location":"dev/daemon-reference/state_q/#getcurrentstatuses","text":"Returns the current status list (one per step) for a given item (shot or asset).","title":"getCurrentStatuses"},{"location":"dev/daemon-reference/state_q/#query-attributes_3","text":"getCurrentStatuses shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" .","title":"Query attributes"},{"location":"dev/daemon-reference/state_q/#reply-content_3","text":"The Daemon replies with the list of status. status : array of objects . The status. Each status is an object with: step : string . The short name of the associated step. comment : string . The comment. completionRatio : int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version.","title":"Reply content"},{"location":"dev/daemon-reference/state_q/#example_3","text":"Query: getCurrentStatuses&shortName=TRI&name=Tristan&type=ASSET Reply: { \"accepted\": true, \"query\": \"getCurrentStatuses\", \"success\": true, \"message\": \"Current status list retrieved.\", \"content\": { \"status\": [ { \"step\": \"RIG\", \"comment\": \"Working on it!\", \"completionRatio\": 75, \"date\": \"2021-04-12 10:55:23\", \"state\": \"WIP\", \"user\": \"Duduf\", \"version\": 12 }, { \"step\": \"MOD\", \"comment\": \"Finished\", \"completionRatio\": 100, \"date\": \"2021-04-12 10:55:23\", \"state\": \"OK\", \"user\": \"Duduf\", \"version\": 5 } ] } }","title":"Example"},{"location":"dev/daemon-reference/step_q/","text":"Step queries getStep Returns a step. Query attributes getStep shortName : string . The short name of the step to retrieve. name : string (optional). The name of the step to retrieve. Reply content The Daemon replies with more information about the step. shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" . Example Query: getStep&shortName=RIG Reply: { \"accepted\": true, \"query\": \"getStep\", \"success\": true, \"message\": \"Step retrived.\", \"content\": { \"shortName\": \"RIG\", \"name\": \"Rigging\", \"folder\": \"/path/to/RIG\", \"type\": \"ASSET_PRODUCTION\" } } getSteps Returns the list of available steps for the current project. Query attributes getSteps Reply content The Daemon replies with the list of Steps. steps : array of objects . The steps. Each step is an object with: shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" . Example Query: getSteps Reply: { \"accepted\": true, \"query\": \"getSteps\", \"success\": true, \"message\": \"Step list retrived.\", \"content\": { \"steps\": [ { \"shortName\": \"RIG\", \"name\": \"Rigging\", \"folder\": \"/path/to/RIG\", \"type\": \"ASSET_PRODUCTION\" }, { \"shortName\": \"ANIM\", \"name\": \"Animation\", \"folder\": \"/path/to/ANIM\", \"type\": \"SHOT_PRODUCTION\" } ] } }","title":"Step queries"},{"location":"dev/daemon-reference/step_q/#step-queries","text":"","title":"Step queries"},{"location":"dev/daemon-reference/step_q/#getstep","text":"Returns a step.","title":"getStep"},{"location":"dev/daemon-reference/step_q/#query-attributes","text":"getStep shortName : string . The short name of the step to retrieve. name : string (optional). The name of the step to retrieve.","title":"Query attributes"},{"location":"dev/daemon-reference/step_q/#reply-content","text":"The Daemon replies with more information about the step. shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" .","title":"Reply content"},{"location":"dev/daemon-reference/step_q/#example","text":"Query: getStep&shortName=RIG Reply: { \"accepted\": true, \"query\": \"getStep\", \"success\": true, \"message\": \"Step retrived.\", \"content\": { \"shortName\": \"RIG\", \"name\": \"Rigging\", \"folder\": \"/path/to/RIG\", \"type\": \"ASSET_PRODUCTION\" } }","title":"Example"},{"location":"dev/daemon-reference/step_q/#getsteps","text":"Returns the list of available steps for the current project.","title":"getSteps"},{"location":"dev/daemon-reference/step_q/#query-attributes_1","text":"getSteps","title":"Query attributes"},{"location":"dev/daemon-reference/step_q/#reply-content_1","text":"The Daemon replies with the list of Steps. steps : array of objects . The steps. Each step is an object with: shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" .","title":"Reply content"},{"location":"dev/daemon-reference/step_q/#example_1","text":"Query: getSteps Reply: { \"accepted\": true, \"query\": \"getSteps\", \"success\": true, \"message\": \"Step list retrived.\", \"content\": { \"steps\": [ { \"shortName\": \"RIG\", \"name\": \"Rigging\", \"folder\": \"/path/to/RIG\", \"type\": \"ASSET_PRODUCTION\" }, { \"shortName\": \"ANIM\", \"name\": \"Animation\", \"folder\": \"/path/to/ANIM\", \"type\": \"SHOT_PRODUCTION\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/user_q/","text":"User queries getCurrentUser Returns the current user. Query attributes getCurrentUser Reply content The Daemon replies with the user. shortName : string . The short name of the user. name : string . The name of the user. role : string . The role of the user, one of 'STANDARD' , 'LEAD' , 'PROJECT_ADMIN' , 'ADMIN' . folderPath : string . The absolute path to the user folder. Example Query: getCurrentUser Reply: { \"accepted\": true, \"query\": \"getCurrentUser\", \"success\": true, \"message\": \"Current user is: John Doe.\", \"content\": { \"shortName\": \"John\", \"name\": \"John Doe\", \"role\": \"LEAD\", \"folderPath\": \"/home/john/Ramses/Users/John\" } }","title":"User queries"},{"location":"dev/daemon-reference/user_q/#user-queries","text":"","title":"User queries"},{"location":"dev/daemon-reference/user_q/#getcurrentuser","text":"Returns the current user.","title":"getCurrentUser"},{"location":"dev/daemon-reference/user_q/#query-attributes","text":"getCurrentUser","title":"Query attributes"},{"location":"dev/daemon-reference/user_q/#reply-content","text":"The Daemon replies with the user. shortName : string . The short name of the user. name : string . The name of the user. role : string . The role of the user, one of 'STANDARD' , 'LEAD' , 'PROJECT_ADMIN' , 'ADMIN' . folderPath : string . The absolute path to the user folder.","title":"Reply content"},{"location":"dev/daemon-reference/user_q/#example","text":"Query: getCurrentUser Reply: { \"accepted\": true, \"query\": \"getCurrentUser\", \"success\": true, \"message\": \"Current user is: John Doe.\", \"content\": { \"shortName\": \"John\", \"name\": \"John Doe\", \"role\": \"LEAD\", \"folderPath\": \"/home/john/Ramses/Users/John\" } }","title":"Example"},{"location":"dev/files/naming/","text":"Regular Expressions for files and folder naming. Ramses uses specific file and folder naming conventions . Here are useful regular expressions to manipulate them. Note All names used by Ramses should be compated ignoring the case. Thus all regular expressions should use the i flag. Regular Expressions for files and folder naming. Short Names (IDs) Names Status and versions Extract version from a file name Resource names File names Master media file names Short Names (IDs) /^(?!(?:PUB|WIP|V)?[0-9]+)[a-zA-Z0-9+-]{1,10}$/gi Short names , or ID s are made exclusively of a-z , A-Z, 0-1 and +-` characters, and cannot be more than 10 characters. The negative part of the regular expression, (?!(?:PUB|WIP|V)?[0-9]+) , is used to differenciate regular blocks (name, short name, etc.) from versions. Names /^(?!(?:PUB|WIP|V)?[0-9]+)[ a-zA-Z0-9+-]{1,256}$/gi Names made exclusively of a-z , A-Z , 0-1 , +- and the space characters, and cannot be more than 256 characters. Warning Names should never be used in file names, as it may generate paths which may be very long. The negative part of the regular expression, (?!(?:PUB|WIP|V)?[0-9]+) , is used to differenciate regular blocks (name, short name, etc.) from versions. Status and versions /(PUB|WIP|V)?([0-9]+)/gi The first matching group contains the status (and may be empty), and the second group is the version number. Note The string in the first matching group should be dynamically built using the list of available status ID s ( short names ). By default, it should at least contain the three strings shown in this example: WIP , PUB , and V . Extract version from a file name /(?:(_(v|wip|pub)?([0-9]+)))(?:\\.[a-z0-9.]+)?$/gi This regular expressions matches everything including the last underscore, the version block and the file extension if any. The first group contains the underscore and the version block; it can be used to be replaced by an empty string in file names to quickly remove the version block from the name. The second and third groups contain the state and the version. Resource names /(?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+/gi Resource names can be made of a-z , 0-9 , +- and white spaces but must not start with a version scheme. File names This is the regular expression for validating, matching and decomposing file names. /^([a-z0-9+-]{1,10})_(?:([ASG])_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+-]{1,10}))(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+-]{1,10}))?(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+))?(?:_(PUB|WIP|V)?([0-9]+))?(?:\\.([a-z0-9.]+))?$/gi Here is the list of matching groups: Project ID Type: A (Asset) or S (Shot) or empty (for general items) Asset or Shot ID or empty (for general items) Type: G (General) or empty Step ID Resource name or empty Status or empty Version number or empty Extension or empty If any string does not match this regular expression, it means it does not follow the Ramses naming scheme. Master media file names /^([a-z0-9+-]{1,10})_([a-z0-9]{1,10})(?:-([a-z0-9]{1,10})?)_(\\d+)x(\\d+)(i|p)?_(\\d+\\.?\\d*)(?:fps)?(?:_([a-z]+))?(?:_([a-z]+)st)\\.([a-z0-9.]+)/gi Here is the list of matching groups: Project ID Codec ID Colorspace ID Width Height p (progressive), i (interlaced), or empty Framerate Language or empty Subtitles language or empty Extension","title":"Naming"},{"location":"dev/files/naming/#regular-expressions-for-files-and-folder-naming","text":"Ramses uses specific file and folder naming conventions . Here are useful regular expressions to manipulate them. Note All names used by Ramses should be compated ignoring the case. Thus all regular expressions should use the i flag. Regular Expressions for files and folder naming. Short Names (IDs) Names Status and versions Extract version from a file name Resource names File names Master media file names","title":"Regular Expressions for files and folder naming."},{"location":"dev/files/naming/#short-names-ids","text":"/^(?!(?:PUB|WIP|V)?[0-9]+)[a-zA-Z0-9+-]{1,10}$/gi Short names , or ID s are made exclusively of a-z , A-Z, 0-1 and +-` characters, and cannot be more than 10 characters. The negative part of the regular expression, (?!(?:PUB|WIP|V)?[0-9]+) , is used to differenciate regular blocks (name, short name, etc.) from versions.","title":"Short Names (IDs)"},{"location":"dev/files/naming/#names","text":"/^(?!(?:PUB|WIP|V)?[0-9]+)[ a-zA-Z0-9+-]{1,256}$/gi Names made exclusively of a-z , A-Z , 0-1 , +- and the space characters, and cannot be more than 256 characters. Warning Names should never be used in file names, as it may generate paths which may be very long. The negative part of the regular expression, (?!(?:PUB|WIP|V)?[0-9]+) , is used to differenciate regular blocks (name, short name, etc.) from versions.","title":"Names"},{"location":"dev/files/naming/#status-and-versions","text":"/(PUB|WIP|V)?([0-9]+)/gi The first matching group contains the status (and may be empty), and the second group is the version number. Note The string in the first matching group should be dynamically built using the list of available status ID s ( short names ). By default, it should at least contain the three strings shown in this example: WIP , PUB , and V .","title":"Status and versions"},{"location":"dev/files/naming/#extract-version-from-a-file-name","text":"/(?:(_(v|wip|pub)?([0-9]+)))(?:\\.[a-z0-9.]+)?$/gi This regular expressions matches everything including the last underscore, the version block and the file extension if any. The first group contains the underscore and the version block; it can be used to be replaced by an empty string in file names to quickly remove the version block from the name. The second and third groups contain the state and the version.","title":"Extract version from a file name"},{"location":"dev/files/naming/#resource-names","text":"/(?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+/gi Resource names can be made of a-z , 0-9 , +- and white spaces but must not start with a version scheme.","title":"Resource names"},{"location":"dev/files/naming/#file-names","text":"This is the regular expression for validating, matching and decomposing file names. /^([a-z0-9+-]{1,10})_(?:([ASG])_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+-]{1,10}))(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+-]{1,10}))?(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+))?(?:_(PUB|WIP|V)?([0-9]+))?(?:\\.([a-z0-9.]+))?$/gi Here is the list of matching groups: Project ID Type: A (Asset) or S (Shot) or empty (for general items) Asset or Shot ID or empty (for general items) Type: G (General) or empty Step ID Resource name or empty Status or empty Version number or empty Extension or empty If any string does not match this regular expression, it means it does not follow the Ramses naming scheme.","title":"File names"},{"location":"dev/files/naming/#master-media-file-names","text":"/^([a-z0-9+-]{1,10})_([a-z0-9]{1,10})(?:-([a-z0-9]{1,10})?)_(\\d+)x(\\d+)(i|p)?_(\\d+\\.?\\d*)(?:fps)?(?:_([a-z]+))?(?:_([a-z]+)st)\\.([a-z0-9.]+)/gi Here is the list of matching groups: Project ID Codec ID Colorspace ID Width Height p (progressive), i (interlaced), or empty Framerate Language or empty Subtitles language or empty Extension","title":"Master media file names"},{"location":"dev/server-reference/","text":"Ramses Server API The Ramses server provides a standard http(s) REST API . If you\u2019re developping your own client (or contributing to Ramses Client ), you can easily exchange data with the server using this reference. Queries must be a POST request ; the body can be either JSON or URL encoded, the Content-Type being respectively application/json or application/x-www-form-urlencoded . However, some queries (explained in this document) are not supported in the URL encoded form, so it is better to always use JSON if possible . Tip In URL encoded queries, all special characters should be percent-encoded (e.g. by replacing / with %2F ). Only one attribute must be set directly in the URL (like a GET request), the name of the query itself. For now, the server only supports the UTF-8 charset, so it is not mandatory to add the charset in the Content-Type , and any value other than utf-8 will be ignored. This may change in future versions. Here is a minimal example of a query using URL encoding: URL : http://your.server/ramses/?createStep POST /ramses HTTP/1.1 Host: your.server Content-Type: application/x-www-form-urlencoded User-Agent: Ramses v0.1.1-Alpha Cookie: PHPSESSID=u3jb5ep3bvbrm29kutpue7t4ds Content-Length: 153 uuid=b615b4be-66fd-5fd3-8095-2074155a29a8&shortName=ANIM&name=Animation&type=shot&comment=&color=%23c992ff&token=94393b8e6396fb2bb295552d6d122544d5db1d1f And this is the same query using JSON encoding: URL : http://your.server/ramses/?createStep POST /ramses HTTP/1.1 Host: your.server Content-Type: application/json User-Agent: Ramses v0.1.1-Alpha Cookie: PHPSESSID=u3jb5ep3bvbrm29kutpue7t4ds Content-Length: 181 {\"uuid\":\"b615b4be-66fd-5fd3-8095-2074155a29a8\",\"shortName\":\"ANIM\",\"name\":\"Animation\",\"type\":\"shot\",\"comment\":\"\",\"color\":\"#c992ff\",\"token\":\"94393b8e6396fb2bb295552d6d122544d5db1d1f\"} The parameters to use in the body are described in the next sections of this reference. The Cookie is set by the server on the first connection, the User-Agent is set by the client. The server replies with a JSON object in the body. For almost all queries (i.e. all but ping and login ) you\u2019ll need to be logged in. Initiating a connection to the server usually follows these steps: ping to check if the server is available and check its version. login to authenticate yourself and get a session token. init to get the main data (user list, project list\u2026). For the examples in this documentation, we assume the ramses server is available at http://your.server/ramses/ . For the sake of readability, the JSON replies are pretty formatted with indentation and new lines in this documentation, but the server actually uses one-line replies. Server Replies The JSON objects sent by the server all have the same content: accepted : boolean . True if the server has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the server has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the client. query : string . The query that was made that the server is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Queries Note remove queries do not actually delete data from the database, but set a removed attribute to true, to prevent any data loss. For now, the only way to permanently delete data is to edit the database by yourself (using SQL queries or MySQL workbench or phpmyadmin, etc.) There is no query yet to restore data which has been removed, but using the create queries with the same uuid as the removed item will restore it. General ping login init Users updateUser updatePassword getUsers createUser removeUser Projects createProject getProjects updateProject removeProject assignStep assignUser unassignUser Steps and Template Steps createStep updateStep setSteporder moveStep removeStep setStepEstimations assignApplication unassignApplication Asset Groups and Template Asset Groups createAssetGroup updateAssetGroup removeAssetGroup Assets createAsset updateAsset removeAsset setAssetStatus Sequences createSequence updateSequence removeSequence setSequenceOrder Shots createShot updateShot setShotOrder moveShot removeShot setShotStatus States createState getStates updateState removeState File Types createFileType getFileTypes updateFileType removeFileType Applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType PipeFiles createPipeFile updatePipeFile removePipeFile Pipes createPipe updatePipe removePipe Status updateStatus removeStatus setStatusUser Schedule Entrries createSchedule createSchedules updateSchedule updateSchedules removeSchedule removeSchedules","title":"Reference"},{"location":"dev/server-reference/#ramses-server-api","text":"The Ramses server provides a standard http(s) REST API . If you\u2019re developping your own client (or contributing to Ramses Client ), you can easily exchange data with the server using this reference. Queries must be a POST request ; the body can be either JSON or URL encoded, the Content-Type being respectively application/json or application/x-www-form-urlencoded . However, some queries (explained in this document) are not supported in the URL encoded form, so it is better to always use JSON if possible . Tip In URL encoded queries, all special characters should be percent-encoded (e.g. by replacing / with %2F ). Only one attribute must be set directly in the URL (like a GET request), the name of the query itself. For now, the server only supports the UTF-8 charset, so it is not mandatory to add the charset in the Content-Type , and any value other than utf-8 will be ignored. This may change in future versions. Here is a minimal example of a query using URL encoding: URL : http://your.server/ramses/?createStep POST /ramses HTTP/1.1 Host: your.server Content-Type: application/x-www-form-urlencoded User-Agent: Ramses v0.1.1-Alpha Cookie: PHPSESSID=u3jb5ep3bvbrm29kutpue7t4ds Content-Length: 153 uuid=b615b4be-66fd-5fd3-8095-2074155a29a8&shortName=ANIM&name=Animation&type=shot&comment=&color=%23c992ff&token=94393b8e6396fb2bb295552d6d122544d5db1d1f And this is the same query using JSON encoding: URL : http://your.server/ramses/?createStep POST /ramses HTTP/1.1 Host: your.server Content-Type: application/json User-Agent: Ramses v0.1.1-Alpha Cookie: PHPSESSID=u3jb5ep3bvbrm29kutpue7t4ds Content-Length: 181 {\"uuid\":\"b615b4be-66fd-5fd3-8095-2074155a29a8\",\"shortName\":\"ANIM\",\"name\":\"Animation\",\"type\":\"shot\",\"comment\":\"\",\"color\":\"#c992ff\",\"token\":\"94393b8e6396fb2bb295552d6d122544d5db1d1f\"} The parameters to use in the body are described in the next sections of this reference. The Cookie is set by the server on the first connection, the User-Agent is set by the client. The server replies with a JSON object in the body. For almost all queries (i.e. all but ping and login ) you\u2019ll need to be logged in. Initiating a connection to the server usually follows these steps: ping to check if the server is available and check its version. login to authenticate yourself and get a session token. init to get the main data (user list, project list\u2026). For the examples in this documentation, we assume the ramses server is available at http://your.server/ramses/ . For the sake of readability, the JSON replies are pretty formatted with indentation and new lines in this documentation, but the server actually uses one-line replies.","title":"Ramses Server API"},{"location":"dev/server-reference/#server-replies","text":"The JSON objects sent by the server all have the same content: accepted : boolean . True if the server has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the server has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the client. query : string . The query that was made that the server is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details.","title":"Server Replies"},{"location":"dev/server-reference/#queries","text":"Note remove queries do not actually delete data from the database, but set a removed attribute to true, to prevent any data loss. For now, the only way to permanently delete data is to edit the database by yourself (using SQL queries or MySQL workbench or phpmyadmin, etc.) There is no query yet to restore data which has been removed, but using the create queries with the same uuid as the removed item will restore it. General ping login init Users updateUser updatePassword getUsers createUser removeUser Projects createProject getProjects updateProject removeProject assignStep assignUser unassignUser Steps and Template Steps createStep updateStep setSteporder moveStep removeStep setStepEstimations assignApplication unassignApplication Asset Groups and Template Asset Groups createAssetGroup updateAssetGroup removeAssetGroup Assets createAsset updateAsset removeAsset setAssetStatus Sequences createSequence updateSequence removeSequence setSequenceOrder Shots createShot updateShot setShotOrder moveShot removeShot setShotStatus States createState getStates updateState removeState File Types createFileType getFileTypes updateFileType removeFileType Applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType PipeFiles createPipeFile updatePipeFile removePipeFile Pipes createPipe updatePipe removePipe Status updateStatus removeStatus setStatusUser Schedule Entrries createSchedule createSchedules updateSchedule updateSchedules removeSchedule removeSchedules","title":"Queries"},{"location":"dev/server-reference/applications/","text":"Queries for managing applications createApplication http://your.server/ramses/?createApplication Creates a new application e in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. executableFilePath : string . The path to the main executable binary of the application. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"createApplication\", \"success\": true, \"message\": \"Application \\\"Maya\\\" created.\", \"content\": { } } getApplications http://your.server/ramses/?getApplications Retrieves the list of all applications. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of application information. Each application is an object with the following attributes: name : string . The name of the application. shortName : string . The short name of the application. executableFilePath : string . The path to the executable binary of the application. uuid : string . The Universal Unique Identifier of this application. Reply body : { \"accepted\": true, \"query\": \"getApplications\", \"success\": true, \"message\": \"Applications list retrieved.\", \"content\": [ { \"name\": \"Autodesk Maya\", \"shortName\": \"Maya\", \"executableFilePath\": \"/usr/bin/maya\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Blender\", \"shortName\": \"Blender\", \"executableFilePath\": \"/usr/bin/blender\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] } updateApplication http://your.server/ramses/?updateApplication Update application info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this file type. executableFilePath : string . The path to the executable binary of the application. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateApplication\", \"success\": true, \"message\": \"Application \\\"Maya\\\" updated.\", \"content\": { } } removeApplication http://your.server/ramses/?removeApplication Removes an application from the database. Query attributes: uuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeApplication\", \"success\": true, \"message\": \"Application uuid123 removed.\", \"content\": { } } assignFileType http://your.server/ramses/?assignFileType Assigns a file type to an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . Default is native . token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignFileType\", \"success\": true, \"message\": \"File type assigned to application as import type.\", \"content\": { } } unassignFileType http://your.server/ramses/?unassignFileType Unassigns a file type from an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . If left empty, the file type is removed for all types. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignFileType\", \"success\": true, \"message\": \"File type unassigned from application.\", \"content\": { } }","title":"Application queries"},{"location":"dev/server-reference/applications/#queries-for-managing-applications","text":"","title":"Queries for managing applications"},{"location":"dev/server-reference/applications/#createapplication","text":"http://your.server/ramses/?createApplication Creates a new application e in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. executableFilePath : string . The path to the main executable binary of the application. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"createApplication\", \"success\": true, \"message\": \"Application \\\"Maya\\\" created.\", \"content\": { } }","title":"createApplication"},{"location":"dev/server-reference/applications/#getapplications","text":"http://your.server/ramses/?getApplications Retrieves the list of all applications. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of application information. Each application is an object with the following attributes: name : string . The name of the application. shortName : string . The short name of the application. executableFilePath : string . The path to the executable binary of the application. uuid : string . The Universal Unique Identifier of this application. Reply body : { \"accepted\": true, \"query\": \"getApplications\", \"success\": true, \"message\": \"Applications list retrieved.\", \"content\": [ { \"name\": \"Autodesk Maya\", \"shortName\": \"Maya\", \"executableFilePath\": \"/usr/bin/maya\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Blender\", \"shortName\": \"Blender\", \"executableFilePath\": \"/usr/bin/blender\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] }","title":"getApplications"},{"location":"dev/server-reference/applications/#updateapplication","text":"http://your.server/ramses/?updateApplication Update application info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this file type. executableFilePath : string . The path to the executable binary of the application. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateApplication\", \"success\": true, \"message\": \"Application \\\"Maya\\\" updated.\", \"content\": { } }","title":"updateApplication"},{"location":"dev/server-reference/applications/#removeapplication","text":"http://your.server/ramses/?removeApplication Removes an application from the database. Query attributes: uuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeApplication\", \"success\": true, \"message\": \"Application uuid123 removed.\", \"content\": { } }","title":"removeApplication"},{"location":"dev/server-reference/applications/#assignfiletype","text":"http://your.server/ramses/?assignFileType Assigns a file type to an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . Default is native . token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignFileType\", \"success\": true, \"message\": \"File type assigned to application as import type.\", \"content\": { } }","title":"assignFileType"},{"location":"dev/server-reference/applications/#unassignfiletype","text":"http://your.server/ramses/?unassignFileType Unassigns a file type from an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . If left empty, the file type is removed for all types. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignFileType\", \"success\": true, \"message\": \"File type unassigned from application.\", \"content\": { } }","title":"unassignFileType"},{"location":"dev/server-reference/assetgroups/","text":"Queries for managing asset groups Note The API also provides an access to \u201ctemplate asset groups\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateAssetGroup instead of createAssetGroup ) Hint There is no method to retrieve asset groups directly; asset groups are returned by the project method getProjects createAssetGroup http://your.server/ramses/?createAssetGroup Creates a new asset group in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the asset group to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Note When creating a template asset group with createTemplateAssetGroup , omit the projectUuid attribute. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createAssetGroup\", \"success\": true, \"message\": \"Asset Group \\\"CHAR\\\" created.\", \"content\": { } } updateAssetGroup http://your.server/ramses/?updateAssetGroup Update asset group info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateAssetGroup\", \"success\": true, \"message\": \"Asset Group \\\"CHAR\\\" updated.\", \"content\": { } } removeAssetGroup http://your.server/ramses/?removeAssetGroup Removes an asset group from the database. Query attributes: uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeAssetGroup\", \"success\": true, \"message\": \"Asset Group uuid123 removed.\", \"content\": { } }","title":"Asset Group queries"},{"location":"dev/server-reference/assetgroups/#queries-for-managing-asset-groups","text":"Note The API also provides an access to \u201ctemplate asset groups\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateAssetGroup instead of createAssetGroup ) Hint There is no method to retrieve asset groups directly; asset groups are returned by the project method getProjects","title":"Queries for managing asset groups"},{"location":"dev/server-reference/assetgroups/#createassetgroup","text":"http://your.server/ramses/?createAssetGroup Creates a new asset group in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the asset group to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Note When creating a template asset group with createTemplateAssetGroup , omit the projectUuid attribute. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createAssetGroup\", \"success\": true, \"message\": \"Asset Group \\\"CHAR\\\" created.\", \"content\": { } }","title":"createAssetGroup"},{"location":"dev/server-reference/assetgroups/#updateassetgroup","text":"http://your.server/ramses/?updateAssetGroup Update asset group info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateAssetGroup\", \"success\": true, \"message\": \"Asset Group \\\"CHAR\\\" updated.\", \"content\": { } }","title":"updateAssetGroup"},{"location":"dev/server-reference/assetgroups/#removeassetgroup","text":"http://your.server/ramses/?removeAssetGroup Removes an asset group from the database. Query attributes: uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeAssetGroup\", \"success\": true, \"message\": \"Asset Group uuid123 removed.\", \"content\": { } }","title":"removeAssetGroup"},{"location":"dev/server-reference/assets/","text":"Queries for managing assets Hint There is no method to retrieve assets directly; assets are returned by the project method getProjects createAsset http://your.server/ramses/?createAsset Creates a new asset in the database and assigns it to an asset group. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createAsset\", \"success\": true, \"message\": \"Asset \\\"TRI\\\" created.\", \"content\": { } } updateAsset http://your.server/ramses/?updateAsset Update asset info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateAsset\", \"success\": true, \"message\": \"Asset \\\"TRI\\\" updated.\", \"content\": { } } removeAsset http://your.server/ramses/?removeAsset Removes an asset group from the database. Query attributes: uuid : string . The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeAsset\", \"success\": true, \"message\": \"Asset uuid123 removed.\", \"content\": { } } setAssetStatus http://your.server/ramses/?setAssetStatus Sets a new status for an asset Query attributes: uuid : string (optionnal). The new status\u2019 Universal Unique Identifier. assetUuid : string . The asset\u2019s Universal Unique Identifier. assignedUserUuid : string . The Universal Unique Identifier of the user assigned to this task. userUuid : string . The uuid of the user setting the status. stateUuid : string . The uuid of the associated state. completionRation : int . The current completion ratio in the range [0, 100]. comment : string . A comment. version : int . The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setAssetStatus\", \"success\": true, \"message\": \"Asset status updated.\", \"content\": { } }","title":"Asset queries"},{"location":"dev/server-reference/assets/#queries-for-managing-assets","text":"Hint There is no method to retrieve assets directly; assets are returned by the project method getProjects","title":"Queries for managing assets"},{"location":"dev/server-reference/assets/#createasset","text":"http://your.server/ramses/?createAsset Creates a new asset in the database and assigns it to an asset group. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createAsset\", \"success\": true, \"message\": \"Asset \\\"TRI\\\" created.\", \"content\": { } }","title":"createAsset"},{"location":"dev/server-reference/assets/#updateasset","text":"http://your.server/ramses/?updateAsset Update asset info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateAsset\", \"success\": true, \"message\": \"Asset \\\"TRI\\\" updated.\", \"content\": { } }","title":"updateAsset"},{"location":"dev/server-reference/assets/#removeasset","text":"http://your.server/ramses/?removeAsset Removes an asset group from the database. Query attributes: uuid : string . The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeAsset\", \"success\": true, \"message\": \"Asset uuid123 removed.\", \"content\": { } }","title":"removeAsset"},{"location":"dev/server-reference/assets/#setassetstatus","text":"http://your.server/ramses/?setAssetStatus Sets a new status for an asset Query attributes: uuid : string (optionnal). The new status\u2019 Universal Unique Identifier. assetUuid : string . The asset\u2019s Universal Unique Identifier. assignedUserUuid : string . The Universal Unique Identifier of the user assigned to this task. userUuid : string . The uuid of the user setting the status. stateUuid : string . The uuid of the associated state. completionRation : int . The current completion ratio in the range [0, 100]. comment : string . A comment. version : int . The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setAssetStatus\", \"success\": true, \"message\": \"Asset status updated.\", \"content\": { } }","title":"setAssetStatus"},{"location":"dev/server-reference/filetypes/","text":"Queries for managing file types createFileType http://your.server/ramses/?createFileType Creates a new file type in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. This should be the default file extension. extensions : string . The extensions used by this type, a comma separated list. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createFileType\", \"success\": true, \"message\": \"File type \\\".ma\\\" created.\", \"content\": { } } getFileTypes http://your.server/ramses/?getFileTypes Retrieves the list of all file types. Query attributes: token : string . The session token returned with login . Reply content: The server replies an array of file type information. Each file type is an object with the following attributes: name : string . The name of the file type. shortName : string . The default extension. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. uuid : string . The Universal Unique Identifier of this file type. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"getFileTypes\", \"success\": true, \"message\": \"File types list retrieved.\", \"content\": [ { \"name\": \"Maya Ascii\", \"shortName\": \".ma\", \"extensions\": \"ma\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Maya Binary\", \"shortName\": \".mb\", \"extensions\": \"mb\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Image (Jpeg)\", \"shortName\": \".jpg\", \"extensions\": \"jpg,jpeg\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] } updateFileType http://your.server/ramses/?updateFileType Update file type info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this file type. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateFileType\", \"success\": true, \"message\": \"File type \\\".ma\\\" updated.\", \"content\": { } } removeFileType http://your.server/ramses/?removeFileType Removes a file type from the database. Query attributes: uuid : string . The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeFileType\", \"success\": true, \"message\": \"File type uuid123 removed.\", \"content\": { } }","title":"File type queries"},{"location":"dev/server-reference/filetypes/#queries-for-managing-file-types","text":"","title":"Queries for managing file types"},{"location":"dev/server-reference/filetypes/#createfiletype","text":"http://your.server/ramses/?createFileType Creates a new file type in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. This should be the default file extension. extensions : string . The extensions used by this type, a comma separated list. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createFileType\", \"success\": true, \"message\": \"File type \\\".ma\\\" created.\", \"content\": { } }","title":"createFileType"},{"location":"dev/server-reference/filetypes/#getfiletypes","text":"http://your.server/ramses/?getFileTypes Retrieves the list of all file types. Query attributes: token : string . The session token returned with login . Reply content: The server replies an array of file type information. Each file type is an object with the following attributes: name : string . The name of the file type. shortName : string . The default extension. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. uuid : string . The Universal Unique Identifier of this file type. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"getFileTypes\", \"success\": true, \"message\": \"File types list retrieved.\", \"content\": [ { \"name\": \"Maya Ascii\", \"shortName\": \".ma\", \"extensions\": \"ma\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Maya Binary\", \"shortName\": \".mb\", \"extensions\": \"mb\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\": \"Image (Jpeg)\", \"shortName\": \".jpg\", \"extensions\": \"jpg,jpeg\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] }","title":"getFileTypes"},{"location":"dev/server-reference/filetypes/#updatefiletype","text":"http://your.server/ramses/?updateFileType Update file type info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this file type. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateFileType\", \"success\": true, \"message\": \"File type \\\".ma\\\" updated.\", \"content\": { } }","title":"updateFileType"},{"location":"dev/server-reference/filetypes/#removefiletype","text":"http://your.server/ramses/?removeFileType Removes a file type from the database. Query attributes: uuid : string . The file type\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeFileType\", \"success\": true, \"message\": \"File type uuid123 removed.\", \"content\": { } }","title":"removeFileType"},{"location":"dev/server-reference/general/","text":"General queries ping http://your.server/ramses/?ping Use this query to test if the server is available before logging in. Reply content: version : string . The version of the current Ramses Server. installed : boolean . False if the server is not correctly installed (i.e. the install script has not been run). See the Server installatio section of this documentation. Reply body : { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"version\": \"0.1.1-Alpha\", \"installed\": true } } login http://your.server/ramses/?login Logs in with a username and a (hashed) password. Query attributes: username : string . The username. password : string . The (hashed) password. Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: If successful, the server replies with the user who\u2019s logged in. Note that the content also includes the token you\u2019ll need for further requests. name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. token : string . The token to use for further requests. If not successful, the content is empty and the message explains the error. Successful reply body : { \"accepted\": true, \"query\": \"login\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"name\": \"Nicolas Dufresne\", \"shortName\": \"Duduf\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/duduf\", \"role\": \"admin\", \"token\": \"2f5d2e3d4e3af1a9d459c5731247abd1ee9a7123\" } } Unsuccesful reply body : { \"accepted\":true, \"success\":false, \"message\":\"Invalid username\", \"query\":\"login\", \"content\":[] } init http://your.server/ramses/?init This special requests is used to retrieve all useful information when initializing the Ramses Client . It groups together in a single request the data which can be retrieved individually by getUsers , getTemplateSteps , getTemplateAssetGroups , getStates , getFileTypes , getApplications and getProjects . The project data contains only general project information (resolution, framerate\u2026) but not the project content (shots, assets\u2026). Use getProject to retrieve a specific project content. Query attributes: token : string . The session token returned by login . Reply content: The server replies with all the data. Read the documentation for the corresponding individual requests for more details. users : array . templateSteps : array . templateAssetGroups : array . states : array . fileTypes : array . applications : array . projects : array . Reply body : { \"accepted\": true, \"query\": \"login\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"users\": [ ... ], \"templateSteps\": [ ... ], \"templateAssetGroups\": [ ... ], \"states\": [ ... ], \"fileTypes\": [ ... ], \"applications\": [ ... ], \"projects\": [ ... ] } }","title":"General queries"},{"location":"dev/server-reference/general/#general-queries","text":"","title":"General queries"},{"location":"dev/server-reference/general/#ping","text":"http://your.server/ramses/?ping Use this query to test if the server is available before logging in. Reply content: version : string . The version of the current Ramses Server. installed : boolean . False if the server is not correctly installed (i.e. the install script has not been run). See the Server installatio section of this documentation. Reply body : { \"accepted\": true, \"query\": \"ping\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"version\": \"0.1.1-Alpha\", \"installed\": true } }","title":"ping"},{"location":"dev/server-reference/general/#login","text":"http://your.server/ramses/?login Logs in with a username and a (hashed) password. Query attributes: username : string . The username. password : string . The (hashed) password. Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: If successful, the server replies with the user who\u2019s logged in. Note that the content also includes the token you\u2019ll need for further requests. name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. token : string . The token to use for further requests. If not successful, the content is empty and the message explains the error. Successful reply body : { \"accepted\": true, \"query\": \"login\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"name\": \"Nicolas Dufresne\", \"shortName\": \"Duduf\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/duduf\", \"role\": \"admin\", \"token\": \"2f5d2e3d4e3af1a9d459c5731247abd1ee9a7123\" } } Unsuccesful reply body : { \"accepted\":true, \"success\":false, \"message\":\"Invalid username\", \"query\":\"login\", \"content\":[] }","title":"login"},{"location":"dev/server-reference/general/#init","text":"http://your.server/ramses/?init This special requests is used to retrieve all useful information when initializing the Ramses Client . It groups together in a single request the data which can be retrieved individually by getUsers , getTemplateSteps , getTemplateAssetGroups , getStates , getFileTypes , getApplications and getProjects . The project data contains only general project information (resolution, framerate\u2026) but not the project content (shots, assets\u2026). Use getProject to retrieve a specific project content. Query attributes: token : string . The session token returned by login . Reply content: The server replies with all the data. Read the documentation for the corresponding individual requests for more details. users : array . templateSteps : array . templateAssetGroups : array . states : array . fileTypes : array . applications : array . projects : array . Reply body : { \"accepted\": true, \"query\": \"login\", \"success\": true, \"message\": \"Server Ready!\", \"content\": { \"users\": [ ... ], \"templateSteps\": [ ... ], \"templateAssetGroups\": [ ... ], \"states\": [ ... ], \"fileTypes\": [ ... ], \"applications\": [ ... ], \"projects\": [ ... ] } }","title":"init"},{"location":"dev/server-reference/pipefiles/","text":"Queries for managing pipe files Pipe Files describe the file formats and colors which go through the Pipes . Hint There is no method to retrieve pipe files directly; pipe files are returned by the project method getProject createPipeFile http://your.server/ramses/?createPipeFile Creates a new pipe file in the database. Query attributes: uuid : string (optional). The UUID of the pipe file. shortName : string . The short name of the pipe file. fileTypeUuid : string . The UUID of the associated file type. colorSpaceUuid : string (optional). The UUID of the associated color space (if any). projectUuid : string . The UUID of the project this pipe file belongs to. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"createPipeFile\", \"success\": true, \"message\": \"Pipe file created.\", \"content\": { } } updatePipeFile http://your.server/ramses/?updatePipeFile Updates pipe file info in the database. Query attributes: uuid : string . The UUID of the pipe file. shortName : string (optional). The short name of the pipe file. comment : string . The new comment. fileTypeUuid : string (optional). The UUID of the associated file type. colorSpaceUuid : string (optional). The UUID of the associated color space. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updatePipe\", \"success\": true, \"message\": \"Pipe file updated.\", \"content\": { } } removePipeFile http://your.server/ramses/?removePipeFile Removes a pipe file from the database. Query attributes: uuid : string . The pipe file\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removePipe\", \"success\": true, \"message\": \"Pipe file removed.\", \"content\": { } }","title":"PipeFiles queries"},{"location":"dev/server-reference/pipefiles/#queries-for-managing-pipe-files","text":"Pipe Files describe the file formats and colors which go through the Pipes . Hint There is no method to retrieve pipe files directly; pipe files are returned by the project method getProject","title":"Queries for managing pipe files"},{"location":"dev/server-reference/pipefiles/#createpipefile","text":"http://your.server/ramses/?createPipeFile Creates a new pipe file in the database. Query attributes: uuid : string (optional). The UUID of the pipe file. shortName : string . The short name of the pipe file. fileTypeUuid : string . The UUID of the associated file type. colorSpaceUuid : string (optional). The UUID of the associated color space (if any). projectUuid : string . The UUID of the project this pipe file belongs to. token : string . The session token returned by login . Reply body : { \"accepted\": true, \"query\": \"createPipeFile\", \"success\": true, \"message\": \"Pipe file created.\", \"content\": { } }","title":"createPipeFile"},{"location":"dev/server-reference/pipefiles/#updatepipefile","text":"http://your.server/ramses/?updatePipeFile Updates pipe file info in the database. Query attributes: uuid : string . The UUID of the pipe file. shortName : string (optional). The short name of the pipe file. comment : string . The new comment. fileTypeUuid : string (optional). The UUID of the associated file type. colorSpaceUuid : string (optional). The UUID of the associated color space. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updatePipe\", \"success\": true, \"message\": \"Pipe file updated.\", \"content\": { } }","title":"updatePipeFile"},{"location":"dev/server-reference/pipefiles/#removepipefile","text":"http://your.server/ramses/?removePipeFile Removes a pipe file from the database. Query attributes: uuid : string . The pipe file\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removePipe\", \"success\": true, \"message\": \"Pipe file removed.\", \"content\": { } }","title":"removePipeFile"},{"location":"dev/server-reference/pipes/","text":"Queries for managing pipes Pipes are the connections between Steps which form the pipeline. Hint There is no method to retrieve pipes directly; pipes are returned by the project method getProject createPipe http://your.server/ramses/?createPipe Creates a new pipe in the database. Query attributes: inputUuid : string . The UUID of the input step. outputUuid : string . The UUID of the output step. uuid : string (optional). The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createPipe\", \"success\": true, \"message\": \"Pipe created.\", \"content\": { } } updatePipe http://your.server/ramses/?updatePipe Update pipe info in the database. Query attributes: inputUuid : string (optionnal). The UUID of the input step. outputUuid : string (optionnal). The UUID of the output step. colorSpaceUuid : string . The UUID of the color space for the files going through this pipe. filetypeUuid : string . The UUID of the file type going through this pipe. uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updatePipe\", \"success\": true, \"message\": \"Pipe updated.\", \"content\": { } } removePipe http://your.server/ramses/?removePipe Removes a pipe group from the database. Query attributes: uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removePipe\", \"success\": true, \"message\": \"Pipe removed.\", \"content\": { } } assignPipeFile http://your.server/ramses/?assignPipeFile Assigns a pipe file type to a pipe. Query attributes: pipeFileUuid : string . The PipeFile\u2019s Universal Unique Identifier. pipeUuid : string . The Pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignPipeFile\", \"success\": true, \"message\": \"New File assigned to pipe.\", \"content\": { } } unassingPipeFile http://your.server/ramses/?unassingPipeFile Unassigns a pipe file type from a pipe. Query attributes: pipeFileUuid : string . The PipeFile\u2019s Universal Unique Identifier. pipeUuid : string . The Pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignFileType\", \"success\": true, \"message\": \"File removed from pipe.\", \"content\": { } }","title":"Pipe queries"},{"location":"dev/server-reference/pipes/#queries-for-managing-pipes","text":"Pipes are the connections between Steps which form the pipeline. Hint There is no method to retrieve pipes directly; pipes are returned by the project method getProject","title":"Queries for managing pipes"},{"location":"dev/server-reference/pipes/#createpipe","text":"http://your.server/ramses/?createPipe Creates a new pipe in the database. Query attributes: inputUuid : string . The UUID of the input step. outputUuid : string . The UUID of the output step. uuid : string (optional). The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createPipe\", \"success\": true, \"message\": \"Pipe created.\", \"content\": { } }","title":"createPipe"},{"location":"dev/server-reference/pipes/#updatepipe","text":"http://your.server/ramses/?updatePipe Update pipe info in the database. Query attributes: inputUuid : string (optionnal). The UUID of the input step. outputUuid : string (optionnal). The UUID of the output step. colorSpaceUuid : string . The UUID of the color space for the files going through this pipe. filetypeUuid : string . The UUID of the file type going through this pipe. uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updatePipe\", \"success\": true, \"message\": \"Pipe updated.\", \"content\": { } }","title":"updatePipe"},{"location":"dev/server-reference/pipes/#removepipe","text":"http://your.server/ramses/?removePipe Removes a pipe group from the database. Query attributes: uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removePipe\", \"success\": true, \"message\": \"Pipe removed.\", \"content\": { } }","title":"removePipe"},{"location":"dev/server-reference/pipes/#assignpipefile","text":"http://your.server/ramses/?assignPipeFile Assigns a pipe file type to a pipe. Query attributes: pipeFileUuid : string . The PipeFile\u2019s Universal Unique Identifier. pipeUuid : string . The Pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignPipeFile\", \"success\": true, \"message\": \"New File assigned to pipe.\", \"content\": { } }","title":"assignPipeFile"},{"location":"dev/server-reference/pipes/#unassingpipefile","text":"http://your.server/ramses/?unassingPipeFile Unassigns a pipe file type from a pipe. Query attributes: pipeFileUuid : string . The PipeFile\u2019s Universal Unique Identifier. pipeUuid : string . The Pipe\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignFileType\", \"success\": true, \"message\": \"File removed from pipe.\", \"content\": { } }","title":"unassingPipeFile"},{"location":"dev/server-reference/projects/","text":"Queries for managing projects createProject http://your.server/ramses/?createProject Creates a new project in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createProject\", \"success\": true, \"message\": \"Project \\\"Mytho\\\" created.\", \"content\": { } } getProject http://your.server/ramses/?getProject Retrieves a single project. Query attributes: uuid : string . The project unique identifier. token : string . The session token returned by login . Reply content: The server replies with a project object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. pipeFiles : array of object . The list of files used through the pipes. This pipeFile object containes these properties: uuid : string . The Universal Unique Identifier of this pipe file. shortName : string . The short name. comment : string . A comment for this pipe file. fileTypeUuid : string . The UUID of the associated file type. colorSpaceUuid : string . The UUID of the associated color space. projectUuid : string . The UUID of the project. steps : array: of object . The list of steps. This step object contains these properties: name : string . The name. shortName : string . The short name. comment : string . A comment for this step. uuid : string . The Universal Unique Identifier of this step. projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. color : string . The hexadecimal code of the color used to display the step in the UI. estimationMethod : string . For shot production steps, the method used for estimations. One of shot or second . estimationVeryEasy : float . The very easy estimation in days. estimationEasy : float . The easy estimation in days. estimationMedium : float . The medium estimation in days. estimationHard : float . The hard estimation in days. estimationVeryHard : float . The very hard estimation in days. multiplyGroupUuid : string . The uuid of an asset group used to multiply estimations. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. pipeFiles : array of string . The list of UUIDs of the pipe file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string . The name of the asset group. shortName : string . The short name of the asset group. comment : string . The comment. uuid : string . The UUID of this asset group. projectUuid : string . The UUID of the project. assets : array of object . The list of assets. This asset object contains these properties: name : string . The name of the asset. shortName : string . The short name of the asset. comment : string . A comment. tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . The UUID of this asset. statusHistory : array of object . The status history for this asset. Each object represents a past status, and contains these properties: uuid : string . The UUID of this status. completionRatio : int . The completion ratio, a percentage in the range [0-100] . comment : string . A comment. version : int . The version. date : string . The date and time of the status, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user who set this status. stateUuid : string . The UUID of the associated state. stepUuid : string . The UUID of the associated step. assignedUserUuid : string . The UUID of the user assigned to this task. published : int . The whether the asset has been published, 0 or 1 . timeSpent : int . The time spent working on this asset, in seconds. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . estimation : float . The estimation, in days. If this is a negative number, it means the estimation has to be automatically computed. assetUuid : string . The UUID of the associated asset. sequences : array of object . The list of sequences. This sequence object contains these properties: name : string . The name of the sequence. shortName : string . The short name of the sequence. comment : string . A comment. uuid : string . The UUID of this sequence. projectUuid : string . The UUID of the project. order : int . Order of the sequence in the project. shots : array of object . The list of shots. This shot object contains these properties: name : string . The name of the shot. shortName : string . The short name of the shot. comment : string . A comment. duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . The UUID of this shot. assetUuids : array of string . The list of the asset uuid assigned to this shot. statusHistory : array of object . The status history for this asset. Each object represents a past status, and contains these properties: uuid : string . The UUID of this status. completionRatio : int . The completion ratio, a percentage in the range [0-100] . comment : string . A comment. version : int . The version. date : string . The date and time of the status, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user who set this status. stateUuid : string . The UUID of the associated state. stepUuid : string . The UUID of the associated step. assignedUserUuid : string . The UUID of the user assigned to this task. published : int . The whether the shot has been published, 0 or 1 . timeSpent : int . The time spent working on this shot, in seconds. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . estimation : float . The estimation, in days. If this is a negative number, it means the estimation has to be automatically computed. shotUuid : string . The UUID of the associated shot. schedule : array of object . The list of schedule entries. Each entry is an object containing these properties: uuid : string . The UUID of this entry. date : string . The date of the entry, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the associated user. stepUuid : string . The UUID of the associated step. Reply body : { \"accepted\": true, \"query\": \"getProject\", \"success\": true, \"message\": \"Project retrieved\", \"content\": { \"name\": \"Mythomen\", \"shortName\": \"Mytho\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/MYTHO\", \"framerate\": 25.0, \"width\": 1920, \"height\": 1080, \"aspectRatio\": 1.78, \"deadline\": \"2021-06-23\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [ { \"uuid\":\"uuid123\", \"shortName\":\"geoPipe\", \"comment\":\"A comment\", \"fileTypeUuid\":\"uuid789\", \"colorSpaceUuid\":\"uuid333\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uui456\", \"shortName\":\"shaderPipe\", \"comment\":\"A comment\", \"fileTypeUuid\":\"uuid789\", \"colorSpaceUuid\":\"uuid333\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"steps\": [ { \"uuid\":\"uuid123\", \"shortName\":\"ANIM\", \"comment\":\"A comment\", \"name\":\"Animation\", \"type\":\"shot\", \"order\":2, \"color\":\"#123456\", \"estimationMethod\":\"second\", \"estimationVeryEasy\":0.2, \"estimationEasy\":0.5, \"estimationMedium\":1.0, \"estimationHard\":2.0, \"estimationVeryHard\":3.0, \"multiplyGroupUuid\":\"uuid789\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid456\", \"shortName\":\"RIG\", \"comment\":\"A comment\", \"name\":\"Rigging\", \"type\":\"asset\", \"order\":1, \"color\":\"#789456\", \"estimationMethod\":\"shot\", \"estimationVeryEasy\":0.2, \"estimationEasy\":0.5, \"estimationMedium\":1.0, \"estimationHard\":2.0, \"estimationVeryHard\":3.0, \"multiplyGroupUuid\":\"\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"pipes\": [ { \"uuid\":\"uuid123\", \"inputStepUuid\":\"uuid456\", \"outputStepUuid\":\"uuid789\", \"pipeFiles\": [\"uuid111\",\"uuid222\"], \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid123\", \"inputStepUuid\":\"uuid456\", \"outputStepUuid\":\"uuid789\", \"pipeFiles\": [\"uuid111\",\"uuid222\"], \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"assetGroups\": [ { \"uuid\":\"uuid123\", \"shortName\":\"CHARS\", \"comment\":\"A Comment\", \"name\": \"Characters\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid456\", \"shortName\":\"PROPS\", \"comment\":\"A Comment\", \"name\": \"Props\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"assets\": [ { \"uuid\":\"uuid456\", \"shortName\":\"TRISTAN\", \"name\":\"Tristan\", \"comment\":\"A main character\", \"tags\": \"main, male, warrior\", \"assetGroupUuid\": \"uuid123\", \"statusHistory\": [ { \"uuid\":\"uuid123\", \"completionRatio\": 0, \"comment\":\"To do\", \"version\": 0, \"date\":\"2021-06-23 12:35:23\", \"userUuid\":\"uuid111\", \"stateUuid\":\"uuid789\", \"stepUuid\":\"uuid777\", \"assignedUserUuid\":\"uuid888\", \"published\": 0, \"timeSpent\": 3600, \"difficulty\":\"hard\", \"estimation\": 12.5, \"assetUuid\":\"uuid456\" } ] } ], \"sequences\": [ { \"uuid\": \"uuid456\", \"shortName\": \"S001\", \"name\": \"Sequence 001 - At sea\", \"comment\": \"A comment\", \"order\": 1, \"projectUuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", } ], \"shots\": [ { \"uuid\":\"uuid456\", \"shortName\":\"001\", \"name\":\"Shot 001\", \"comment\":\"A comment\", \"duration\": 3.2, \"order\": 1, \"sequenceUuid\": \"uuid123\", \"assetUuids\": [\"uuid111\",\"uuid222\"], \"statusHistory\": [ { \"uuid\":\"uuid123\", \"completionRatio\": 0, \"comment\":\"To do\", \"version\": 0, \"date\":\"2021-06-23 12:35:23\", \"userUuid\":\"uuid111\", \"stateUuid\":\"uuid789\", \"stepUuid\":\"uuid777\", \"assignedUserUuid\":\"uuid888\", \"published\": 0, \"timeSpent\": 3600, \"difficulty\":\"hard\", \"estimation\": 12.5, \"assetUuid\":\"uuid456\" } ] } ], \"schedule\": [ { \"uuid\":\"uuid23\", \"date\":\"2021-06-13 12:00:00\", \"comment\":\"A comment\", \"userUuid\":\"uuid456\", \"stepUuid\":\"uuid789\", }, { \"uuid\":\"uuid45\", \"date\":\"2021-06-14 00:00:00\", \"comment\":\"A comment\", \"userUuid\":\"uuid456\", \"stepUuid\":\"uuid789\", } ] } } getProjects http://your.server/ramses/?getProjects Retrieves the list of all projects. Query attributes: token : string . The session token returned by login . Reply content: The server replies with an array of project information. Each project is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . A comment for the project. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. deadline : string . The date of the deadline, formatted as yyyy-MM-dd . users : array of string . The list of user Uuid assigned to this project. The project objects also contain empty lists for the project content (shots, assets, etc.). To retrieve the content, use getProject for the given project. Reply body : { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Project list retrieved.\", \"content\": [ { \"name\": \"Mythomen\", \"shortName\": \"Mytho\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/MYTHO\", \"framerate\": 25.0, \"width\": 1920, \"height\": 1080, \"aspectRatio\": 1.78, \"deadline\": \"2021-06-23\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [], \"steps\": [], \"pipes\": [], \"assetGroups\": [], \"assets\": [], \"sequences\": [], \"shots\": [], \"schedule\": [] }, { \"name\": \"Purpleboy\", \"shortName\": \"PPB\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/PPB\", \"framerate\": 24.0, \"width\": 2048, \"height\": 858, \"aspectRatio\": 2.39, \"deadline\": \"2020-05-15\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [], \"steps\": [], \"pipes\": [], \"assetGroups\": [], \"assets\": [], \"sequences\": [], \"shots\": [], \"schedule\": [] } ] } updateProject http://your.server/ramses/?updateProject Updates project information. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. folderPath : string (optionnal). The path for the project folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateProject\", \"success\": true, \"message\": \"Project \\\"Mytho\\\" updated.\", \"content\": { } } removeProject http://your.server/ramses/?removeProject Removes a project from the database. Query attributes: uuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeProject\", \"success\": true, \"message\": \"Project uuid123 removed.\", \"content\": { } } assignStep http://your.server/ramses/?assignStep Assigns a template step to a project Query attributes: stepUuid : string . The template step\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignStep\", \"success\": true, \"message\": \"Step uuid123 associated with project uuid456.\", \"content\": { } } assignUser http://your.server/ramses/?assignUser Assigns a user to a project Query attributes: userUuid : string . The user\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignUser\", \"success\": true, \"message\": \"User assigned to project.\", \"content\": { } } unassignUser http://your.server/ramses/?unassignUser Unassigns a user to a project Query attributes: userUuid : string . The user\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignUser\", \"success\": true, \"message\": \"User unassigned from project.\", \"content\": { } }","title":"Project queries"},{"location":"dev/server-reference/projects/#queries-for-managing-projects","text":"","title":"Queries for managing projects"},{"location":"dev/server-reference/projects/#createproject","text":"http://your.server/ramses/?createProject Creates a new project in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createProject\", \"success\": true, \"message\": \"Project \\\"Mytho\\\" created.\", \"content\": { } }","title":"createProject"},{"location":"dev/server-reference/projects/#getproject","text":"http://your.server/ramses/?getProject Retrieves a single project. Query attributes: uuid : string . The project unique identifier. token : string . The session token returned by login . Reply content: The server replies with a project object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. pipeFiles : array of object . The list of files used through the pipes. This pipeFile object containes these properties: uuid : string . The Universal Unique Identifier of this pipe file. shortName : string . The short name. comment : string . A comment for this pipe file. fileTypeUuid : string . The UUID of the associated file type. colorSpaceUuid : string . The UUID of the associated color space. projectUuid : string . The UUID of the project. steps : array: of object . The list of steps. This step object contains these properties: name : string . The name. shortName : string . The short name. comment : string . A comment for this step. uuid : string . The Universal Unique Identifier of this step. projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. color : string . The hexadecimal code of the color used to display the step in the UI. estimationMethod : string . For shot production steps, the method used for estimations. One of shot or second . estimationVeryEasy : float . The very easy estimation in days. estimationEasy : float . The easy estimation in days. estimationMedium : float . The medium estimation in days. estimationHard : float . The hard estimation in days. estimationVeryHard : float . The very hard estimation in days. multiplyGroupUuid : string . The uuid of an asset group used to multiply estimations. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. pipeFiles : array of string . The list of UUIDs of the pipe file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string . The name of the asset group. shortName : string . The short name of the asset group. comment : string . The comment. uuid : string . The UUID of this asset group. projectUuid : string . The UUID of the project. assets : array of object . The list of assets. This asset object contains these properties: name : string . The name of the asset. shortName : string . The short name of the asset. comment : string . A comment. tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . The UUID of this asset. statusHistory : array of object . The status history for this asset. Each object represents a past status, and contains these properties: uuid : string . The UUID of this status. completionRatio : int . The completion ratio, a percentage in the range [0-100] . comment : string . A comment. version : int . The version. date : string . The date and time of the status, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user who set this status. stateUuid : string . The UUID of the associated state. stepUuid : string . The UUID of the associated step. assignedUserUuid : string . The UUID of the user assigned to this task. published : int . The whether the asset has been published, 0 or 1 . timeSpent : int . The time spent working on this asset, in seconds. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . estimation : float . The estimation, in days. If this is a negative number, it means the estimation has to be automatically computed. assetUuid : string . The UUID of the associated asset. sequences : array of object . The list of sequences. This sequence object contains these properties: name : string . The name of the sequence. shortName : string . The short name of the sequence. comment : string . A comment. uuid : string . The UUID of this sequence. projectUuid : string . The UUID of the project. order : int . Order of the sequence in the project. shots : array of object . The list of shots. This shot object contains these properties: name : string . The name of the shot. shortName : string . The short name of the shot. comment : string . A comment. duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . The UUID of this shot. assetUuids : array of string . The list of the asset uuid assigned to this shot. statusHistory : array of object . The status history for this asset. Each object represents a past status, and contains these properties: uuid : string . The UUID of this status. completionRatio : int . The completion ratio, a percentage in the range [0-100] . comment : string . A comment. version : int . The version. date : string . The date and time of the status, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user who set this status. stateUuid : string . The UUID of the associated state. stepUuid : string . The UUID of the associated step. assignedUserUuid : string . The UUID of the user assigned to this task. published : int . The whether the shot has been published, 0 or 1 . timeSpent : int . The time spent working on this shot, in seconds. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . estimation : float . The estimation, in days. If this is a negative number, it means the estimation has to be automatically computed. shotUuid : string . The UUID of the associated shot. schedule : array of object . The list of schedule entries. Each entry is an object containing these properties: uuid : string . The UUID of this entry. date : string . The date of the entry, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the associated user. stepUuid : string . The UUID of the associated step. Reply body : { \"accepted\": true, \"query\": \"getProject\", \"success\": true, \"message\": \"Project retrieved\", \"content\": { \"name\": \"Mythomen\", \"shortName\": \"Mytho\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/MYTHO\", \"framerate\": 25.0, \"width\": 1920, \"height\": 1080, \"aspectRatio\": 1.78, \"deadline\": \"2021-06-23\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [ { \"uuid\":\"uuid123\", \"shortName\":\"geoPipe\", \"comment\":\"A comment\", \"fileTypeUuid\":\"uuid789\", \"colorSpaceUuid\":\"uuid333\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uui456\", \"shortName\":\"shaderPipe\", \"comment\":\"A comment\", \"fileTypeUuid\":\"uuid789\", \"colorSpaceUuid\":\"uuid333\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"steps\": [ { \"uuid\":\"uuid123\", \"shortName\":\"ANIM\", \"comment\":\"A comment\", \"name\":\"Animation\", \"type\":\"shot\", \"order\":2, \"color\":\"#123456\", \"estimationMethod\":\"second\", \"estimationVeryEasy\":0.2, \"estimationEasy\":0.5, \"estimationMedium\":1.0, \"estimationHard\":2.0, \"estimationVeryHard\":3.0, \"multiplyGroupUuid\":\"uuid789\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid456\", \"shortName\":\"RIG\", \"comment\":\"A comment\", \"name\":\"Rigging\", \"type\":\"asset\", \"order\":1, \"color\":\"#789456\", \"estimationMethod\":\"shot\", \"estimationVeryEasy\":0.2, \"estimationEasy\":0.5, \"estimationMedium\":1.0, \"estimationHard\":2.0, \"estimationVeryHard\":3.0, \"multiplyGroupUuid\":\"\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"pipes\": [ { \"uuid\":\"uuid123\", \"inputStepUuid\":\"uuid456\", \"outputStepUuid\":\"uuid789\", \"pipeFiles\": [\"uuid111\",\"uuid222\"], \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid123\", \"inputStepUuid\":\"uuid456\", \"outputStepUuid\":\"uuid789\", \"pipeFiles\": [\"uuid111\",\"uuid222\"], \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"assetGroups\": [ { \"uuid\":\"uuid123\", \"shortName\":\"CHARS\", \"comment\":\"A Comment\", \"name\": \"Characters\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"uuid\":\"uuid456\", \"shortName\":\"PROPS\", \"comment\":\"A Comment\", \"name\": \"Props\", \"projectUuid\":\"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ], \"assets\": [ { \"uuid\":\"uuid456\", \"shortName\":\"TRISTAN\", \"name\":\"Tristan\", \"comment\":\"A main character\", \"tags\": \"main, male, warrior\", \"assetGroupUuid\": \"uuid123\", \"statusHistory\": [ { \"uuid\":\"uuid123\", \"completionRatio\": 0, \"comment\":\"To do\", \"version\": 0, \"date\":\"2021-06-23 12:35:23\", \"userUuid\":\"uuid111\", \"stateUuid\":\"uuid789\", \"stepUuid\":\"uuid777\", \"assignedUserUuid\":\"uuid888\", \"published\": 0, \"timeSpent\": 3600, \"difficulty\":\"hard\", \"estimation\": 12.5, \"assetUuid\":\"uuid456\" } ] } ], \"sequences\": [ { \"uuid\": \"uuid456\", \"shortName\": \"S001\", \"name\": \"Sequence 001 - At sea\", \"comment\": \"A comment\", \"order\": 1, \"projectUuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", } ], \"shots\": [ { \"uuid\":\"uuid456\", \"shortName\":\"001\", \"name\":\"Shot 001\", \"comment\":\"A comment\", \"duration\": 3.2, \"order\": 1, \"sequenceUuid\": \"uuid123\", \"assetUuids\": [\"uuid111\",\"uuid222\"], \"statusHistory\": [ { \"uuid\":\"uuid123\", \"completionRatio\": 0, \"comment\":\"To do\", \"version\": 0, \"date\":\"2021-06-23 12:35:23\", \"userUuid\":\"uuid111\", \"stateUuid\":\"uuid789\", \"stepUuid\":\"uuid777\", \"assignedUserUuid\":\"uuid888\", \"published\": 0, \"timeSpent\": 3600, \"difficulty\":\"hard\", \"estimation\": 12.5, \"assetUuid\":\"uuid456\" } ] } ], \"schedule\": [ { \"uuid\":\"uuid23\", \"date\":\"2021-06-13 12:00:00\", \"comment\":\"A comment\", \"userUuid\":\"uuid456\", \"stepUuid\":\"uuid789\", }, { \"uuid\":\"uuid45\", \"date\":\"2021-06-14 00:00:00\", \"comment\":\"A comment\", \"userUuid\":\"uuid456\", \"stepUuid\":\"uuid789\", } ] } }","title":"getProject"},{"location":"dev/server-reference/projects/#getprojects","text":"http://your.server/ramses/?getProjects Retrieves the list of all projects. Query attributes: token : string . The session token returned by login . Reply content: The server replies with an array of project information. Each project is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . A comment for the project. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. deadline : string . The date of the deadline, formatted as yyyy-MM-dd . users : array of string . The list of user Uuid assigned to this project. The project objects also contain empty lists for the project content (shots, assets, etc.). To retrieve the content, use getProject for the given project. Reply body : { \"accepted\": true, \"query\": \"getProjects\", \"success\": true, \"message\": \"Project list retrieved.\", \"content\": [ { \"name\": \"Mythomen\", \"shortName\": \"Mytho\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/MYTHO\", \"framerate\": 25.0, \"width\": 1920, \"height\": 1080, \"aspectRatio\": 1.78, \"deadline\": \"2021-06-23\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [], \"steps\": [], \"pipes\": [], \"assetGroups\": [], \"assets\": [], \"sequences\": [], \"shots\": [], \"schedule\": [] }, { \"name\": \"Purpleboy\", \"shortName\": \"PPB\", \"comment\": \"A comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"PROJECTS/PPB\", \"framerate\": 24.0, \"width\": 2048, \"height\": 858, \"aspectRatio\": 2.39, \"deadline\": \"2020-05-15\", \"users\": [\"uuid123\", \"uuid456\"], \"pipeFiles\": [], \"steps\": [], \"pipes\": [], \"assetGroups\": [], \"assets\": [], \"sequences\": [], \"shots\": [], \"schedule\": [] } ] }","title":"getProjects"},{"location":"dev/server-reference/projects/#updateproject","text":"http://your.server/ramses/?updateProject Updates project information. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. folderPath : string (optionnal). The path for the project folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateProject\", \"success\": true, \"message\": \"Project \\\"Mytho\\\" updated.\", \"content\": { } }","title":"updateProject"},{"location":"dev/server-reference/projects/#removeproject","text":"http://your.server/ramses/?removeProject Removes a project from the database. Query attributes: uuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeProject\", \"success\": true, \"message\": \"Project uuid123 removed.\", \"content\": { } }","title":"removeProject"},{"location":"dev/server-reference/projects/#assignstep","text":"http://your.server/ramses/?assignStep Assigns a template step to a project Query attributes: stepUuid : string . The template step\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignStep\", \"success\": true, \"message\": \"Step uuid123 associated with project uuid456.\", \"content\": { } }","title":"assignStep"},{"location":"dev/server-reference/projects/#assignuser","text":"http://your.server/ramses/?assignUser Assigns a user to a project Query attributes: userUuid : string . The user\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignUser\", \"success\": true, \"message\": \"User assigned to project.\", \"content\": { } }","title":"assignUser"},{"location":"dev/server-reference/projects/#unassignuser","text":"http://your.server/ramses/?unassignUser Unassigns a user to a project Query attributes: userUuid : string . The user\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignUser\", \"success\": true, \"message\": \"User unassigned from project.\", \"content\": { } }","title":"unassignUser"},{"location":"dev/server-reference/schedule/","text":"Queries for managing schedule entries A schedule entry associates a date with a user and a step. Hint There is no method to retrieve schedule entries directly; schedule entries are returned by the project method getProjects createSchedule http://your.server/ramses/?createSchedule Creates a new entry in the database. Query attributes: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } } createSchedules http://your.server/ramses/?createSchedules Creates several new entries in the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } } updateSchedule http://your.server/ramses/?updateSchedule Updates a new entry in the database. Query attributes: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } } updateSchedules http://your.server/ramses/?updateSchedules Updates several new entries in the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } } removeSchedule http://your.server/ramses/?removeSchedule Removes an entry from the database. Query attributes: uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } } removeSchedules http://your.server/ramses/?removeSchedules Removes several entries from the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"Schedule queries"},{"location":"dev/server-reference/schedule/#queries-for-managing-schedule-entries","text":"A schedule entry associates a date with a user and a step. Hint There is no method to retrieve schedule entries directly; schedule entries are returned by the project method getProjects","title":"Queries for managing schedule entries"},{"location":"dev/server-reference/schedule/#createschedule","text":"http://your.server/ramses/?createSchedule Creates a new entry in the database. Query attributes: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"createSchedule"},{"location":"dev/server-reference/schedule/#createschedules","text":"http://your.server/ramses/?createSchedules Creates several new entries in the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"createSchedules"},{"location":"dev/server-reference/schedule/#updateschedule","text":"http://your.server/ramses/?updateSchedule Updates a new entry in the database. Query attributes: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string (optional). The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"updateSchedule"},{"location":"dev/server-reference/schedule/#updateschedules","text":"http://your.server/ramses/?updateSchedules Updates several new entries in the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: date : string . The date, formatted as yyyy-MM-dd hh:mm:ss . comment : string . A comment. userUuid : string . The UUID of the user. stepUuid : string . The UUID of the step. uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"updateSchedules"},{"location":"dev/server-reference/schedule/#removeschedule","text":"http://your.server/ramses/?removeSchedule Removes an entry from the database. Query attributes: uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSchedule\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"removeSchedule"},{"location":"dev/server-reference/schedule/#removeschedules","text":"http://your.server/ramses/?removeSchedules Removes several entries from the database. Warning This query cannot be URL encoded, it must be posted as JSON . Query attributes: entries : array of object . Eeach entry must be an object with these properties: uuid : string . The entry\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSchedules\", \"success\": true, \"message\": \"Schedule updated.\", \"content\": { } }","title":"removeSchedules"},{"location":"dev/server-reference/sequences/","text":"Queries for managing sequences Hint There is no method to retrieve sequences directly; sequences are returned by the project method getProjects createSequence http://your.server/ramses/?createSequence Creates a new squence in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. projectUuid : string . The UUID of the project to assign the sequence to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSequence\", \"success\": true, \"message\": \"Sequence \\\"SEQ01\\\" created.\", \"content\": { } } updateSequence http://your.server/ramses/?updateSequence Update sequence info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . A new comment. uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSequence\", \"success\": true, \"message\": \"Sequence \\\"SEQ01\\\" updated.\", \"content\": { } } removeSequence http://your.server/ramses/?removeSequence Removes a sequence from the database. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSequence\", \"success\": true, \"message\": \"Sequence uuid123 removed.\", \"content\": { } } setSequenceOrder http://your.server/ramses/?setSequenceOrder Changes the order of a sequence in the project. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. order : int . The new order. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setSequenceOrder\", \"success\": true, \"message\": \"Sequence moved.\", \"content\": { } }","title":"Sequence queries"},{"location":"dev/server-reference/sequences/#queries-for-managing-sequences","text":"Hint There is no method to retrieve sequences directly; sequences are returned by the project method getProjects","title":"Queries for managing sequences"},{"location":"dev/server-reference/sequences/#createsequence","text":"http://your.server/ramses/?createSequence Creates a new squence in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. projectUuid : string . The UUID of the project to assign the sequence to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createSequence\", \"success\": true, \"message\": \"Sequence \\\"SEQ01\\\" created.\", \"content\": { } }","title":"createSequence"},{"location":"dev/server-reference/sequences/#updatesequence","text":"http://your.server/ramses/?updateSequence Update sequence info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . A new comment. uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateSequence\", \"success\": true, \"message\": \"Sequence \\\"SEQ01\\\" updated.\", \"content\": { } }","title":"updateSequence"},{"location":"dev/server-reference/sequences/#removesequence","text":"http://your.server/ramses/?removeSequence Removes a sequence from the database. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeSequence\", \"success\": true, \"message\": \"Sequence uuid123 removed.\", \"content\": { } }","title":"removeSequence"},{"location":"dev/server-reference/sequences/#setsequenceorder","text":"http://your.server/ramses/?setSequenceOrder Changes the order of a sequence in the project. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. order : int . The new order. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setSequenceOrder\", \"success\": true, \"message\": \"Sequence moved.\", \"content\": { } }","title":"setSequenceOrder"},{"location":"dev/server-reference/shots/","text":"Queries for managing shots Hint There is no method to retrieve shots directly; shots are returned by the project method getProjects createShot http://your.server/ramses/?createShot Creates a new shot in the database and assigns it to a sequence group. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string . The UUID of the sequence to assign the shot to. duration : float (optional). The duration of the shot in seconds. order : integer (optional). The order at which to insert the new shot. If omitted, the shot is added at the end of the list. uuid : string (optional). The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createShot\", \"success\": true, \"message\": \"Shot \\\"001\\\" created.\", \"content\": { } } updateShot http://your.server/ramses/?updateShot Update shot info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. sequenceUuid : string (optional). The UUID of the sequence to reassign the shot to. duration : float (optional). The new duration of the shot, in seconds. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateShot\", \"success\": true, \"message\": \"Shot \\\"003\\\" updated.\", \"content\": { } } setShotOrder http://your.server/ramses/?setShotOrder Moves a shot in the list. This method changes only the order value of the given shot. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setShotOrder\", \"success\": true, \"message\": \"Shot moved.\", \"content\": { } } moveShot http://your.server/ramses/?moveShot Moves a shot in the list. This method will update the order of all the other shots of the same project accordingly. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"moveShot\", \"success\": true, \"message\": \"Shot moved.\", \"content\": { } } removeShot http://your.server/ramses/?removeShot Removes a shot from the database. Query attributes: uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeShot\", \"success\": true, \"message\": \"Shot removed.\", \"content\": { } } setShotStatus http://your.server/ramses/?setShotStatus Sets a new status for a shot Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. shotUuid : string . The shot\u2019s Universal Unique Identifier. completionRation : int . The current completion ratio in the range [0, 100] . userUuid : string . The uuid of the user setting the status. stateUuid : string . The uuid of the associated state. comment : string . A comment. version : int . The current version. stepUuid : string . The uuid of the associated step. assignedUserUuid : string . The uuid of the assigned user for this task. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setShotStatus\", \"success\": true, \"message\": \"Shot status updated.\", \"content\": { } } assignAsset http://your.server/ramses/?assignAsset Assigns an asset to the shot. Query attributes: assetUuid : string . The asset\u2019s Universal Unique Identifier. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignAsset\", \"success\": true, \"message\": \"Asset assigned.\", \"content\": { } } unassignAsset http://your.server/ramses/?unassignAsset Unassigns an asset from the shot. Query attributes: assetUuid : string . The asset\u2019s Universal Unique Identifier. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignAsset\", \"success\": true, \"message\": \"Asset unassigned..\", \"content\": { } }","title":"Shot queries"},{"location":"dev/server-reference/shots/#queries-for-managing-shots","text":"Hint There is no method to retrieve shots directly; shots are returned by the project method getProjects","title":"Queries for managing shots"},{"location":"dev/server-reference/shots/#createshot","text":"http://your.server/ramses/?createShot Creates a new shot in the database and assigns it to a sequence group. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string . The UUID of the sequence to assign the shot to. duration : float (optional). The duration of the shot in seconds. order : integer (optional). The order at which to insert the new shot. If omitted, the shot is added at the end of the list. uuid : string (optional). The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createShot\", \"success\": true, \"message\": \"Shot \\\"001\\\" created.\", \"content\": { } }","title":"createShot"},{"location":"dev/server-reference/shots/#updateshot","text":"http://your.server/ramses/?updateShot Update shot info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. comment : string . The new comment. sequenceUuid : string (optional). The UUID of the sequence to reassign the shot to. duration : float (optional). The new duration of the shot, in seconds. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateShot\", \"success\": true, \"message\": \"Shot \\\"003\\\" updated.\", \"content\": { } }","title":"updateShot"},{"location":"dev/server-reference/shots/#setshotorder","text":"http://your.server/ramses/?setShotOrder Moves a shot in the list. This method changes only the order value of the given shot. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setShotOrder\", \"success\": true, \"message\": \"Shot moved.\", \"content\": { } }","title":"setShotOrder"},{"location":"dev/server-reference/shots/#moveshot","text":"http://your.server/ramses/?moveShot Moves a shot in the list. This method will update the order of all the other shots of the same project accordingly. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"moveShot\", \"success\": true, \"message\": \"Shot moved.\", \"content\": { } }","title":"moveShot"},{"location":"dev/server-reference/shots/#removeshot","text":"http://your.server/ramses/?removeShot Removes a shot from the database. Query attributes: uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeShot\", \"success\": true, \"message\": \"Shot removed.\", \"content\": { } }","title":"removeShot"},{"location":"dev/server-reference/shots/#setshotstatus","text":"http://your.server/ramses/?setShotStatus Sets a new status for a shot Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. shotUuid : string . The shot\u2019s Universal Unique Identifier. completionRation : int . The current completion ratio in the range [0, 100] . userUuid : string . The uuid of the user setting the status. stateUuid : string . The uuid of the associated state. comment : string . A comment. version : int . The current version. stepUuid : string . The uuid of the associated step. assignedUserUuid : string . The uuid of the assigned user for this task. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setShotStatus\", \"success\": true, \"message\": \"Shot status updated.\", \"content\": { } }","title":"setShotStatus"},{"location":"dev/server-reference/shots/#assignasset","text":"http://your.server/ramses/?assignAsset Assigns an asset to the shot. Query attributes: assetUuid : string . The asset\u2019s Universal Unique Identifier. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignAsset\", \"success\": true, \"message\": \"Asset assigned.\", \"content\": { } }","title":"assignAsset"},{"location":"dev/server-reference/shots/#unassignasset","text":"http://your.server/ramses/?unassignAsset Unassigns an asset from the shot. Query attributes: assetUuid : string . The asset\u2019s Universal Unique Identifier. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignAsset\", \"success\": true, \"message\": \"Asset unassigned..\", \"content\": { } }","title":"unassignAsset"},{"location":"dev/server-reference/states/","text":"Queries for managing states createState http://your.server/ramses/?createState Creates a new state in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createState\", \"success\": true, \"message\": \"State \\\"WIP\\\" created.\", \"content\": { } } getStates http://your.server/ramses/?getStates Retrieves the list of all states. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of state information. Each state is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . The comment. uuid : string . The Universal Unique Identifier of this user. color : string . The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int . The completion ratio in percentage. Reply body : { \"accepted\": true, \"query\": \"getStates\", \"success\": true, \"message\": \"States list retrieved.\", \"content\": [ { \"name\": \"Stand by\", \"shortName\": \"STB\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#6d6d6d\", \"completionRatio\": 0 }, { \"name\": \"To do\", \"shortName\": \"TODO\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#00aaff\", \"completionRatio\": 0 }, { \"name\": \"Finished\", \"shortName\": \"OK\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#00aa00\", \"completionRatio\": 100 } ] } updateState http://your.server/ramses/?updateState Update state info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this user. color : string (optional). The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int (optional). The completion ratio in percentage. token : string . The session token returned with login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateState\", \"success\": true, \"message\": \"State \\\"WIP\\\" updated.\", \"content\": { } } removeState http://your.server/ramses/?removeState Removes a state from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeState\", \"success\": true, \"message\": \"State uuid123 removed.\", \"content\": { } }","title":"State queries"},{"location":"dev/server-reference/states/#queries-for-managing-states","text":"","title":"Queries for managing states"},{"location":"dev/server-reference/states/#createstate","text":"http://your.server/ramses/?createState Creates a new state in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createState\", \"success\": true, \"message\": \"State \\\"WIP\\\" created.\", \"content\": { } }","title":"createState"},{"location":"dev/server-reference/states/#getstates","text":"http://your.server/ramses/?getStates Retrieves the list of all states. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of state information. Each state is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . The comment. uuid : string . The Universal Unique Identifier of this user. color : string . The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int . The completion ratio in percentage. Reply body : { \"accepted\": true, \"query\": \"getStates\", \"success\": true, \"message\": \"States list retrieved.\", \"content\": [ { \"name\": \"Stand by\", \"shortName\": \"STB\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#6d6d6d\", \"completionRatio\": 0 }, { \"name\": \"To do\", \"shortName\": \"TODO\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#00aaff\", \"completionRatio\": 0 }, { \"name\": \"Finished\", \"shortName\": \"OK\", \"comment\": \"A Comment\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"color\": \"#00aa00\", \"completionRatio\": 100 } ] }","title":"getStates"},{"location":"dev/server-reference/states/#updatestate","text":"http://your.server/ramses/?updateState Update state info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. comment : string . The new comment. uuid : string . The Universal Unique Identifier of this user. color : string (optional). The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int (optional). The completion ratio in percentage. token : string . The session token returned with login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateState\", \"success\": true, \"message\": \"State \\\"WIP\\\" updated.\", \"content\": { } }","title":"updateState"},{"location":"dev/server-reference/states/#removestate","text":"http://your.server/ramses/?removeState Removes a state from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeState\", \"success\": true, \"message\": \"State uuid123 removed.\", \"content\": { } }","title":"removeState"},{"location":"dev/server-reference/status/","text":"Queries for managing status Hint There is no method to retrieve statuses directly; statuses are returned by the project method getProjects There is no method to create statuses; statuses are created by the asset or shot methods setAssetStatus and setShotStatus updateStatus http://your.server/ramses/?updateStatus Update status info in the database. Query attributes: completionRatio : int (optional). The completion ratio in the range [0,100]. version : int (optional). The version. comment : string (optional). The comment. stateUuid : string . The Universal Unique Identifier of the associated state. published : int . 0 if the corresponding asset/shot is not published, 1 if it is. assignedUserUuid : string . The Universal Unique Identifier of the user assigned to this task. timeSpent : int . The time spent working on this task, in seconds. date : string . The date the status has been modified formatted as yyyy-MM-dd hh:mm:ss . estimation : float . The estimation in days. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateStatus\", \"success\": true, \"message\": \"Status updated.\", \"content\": { } } removeStatus http://your.server/ramses/?removeStatus Removes a status from the database. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeStatus\", \"success\": true, \"message\": \"Status removed.\", \"content\": { } } setStatusUser http://your.server/ramses/?setStatusUser Changes the user who\u2019s modified this status. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStatusUser\", \"success\": true, \"message\": \"Status user changed.\", \"content\": { } }","title":"Status queries"},{"location":"dev/server-reference/status/#queries-for-managing-status","text":"Hint There is no method to retrieve statuses directly; statuses are returned by the project method getProjects There is no method to create statuses; statuses are created by the asset or shot methods setAssetStatus and setShotStatus","title":"Queries for managing status"},{"location":"dev/server-reference/status/#updatestatus","text":"http://your.server/ramses/?updateStatus Update status info in the database. Query attributes: completionRatio : int (optional). The completion ratio in the range [0,100]. version : int (optional). The version. comment : string (optional). The comment. stateUuid : string . The Universal Unique Identifier of the associated state. published : int . 0 if the corresponding asset/shot is not published, 1 if it is. assignedUserUuid : string . The Universal Unique Identifier of the user assigned to this task. timeSpent : int . The time spent working on this task, in seconds. date : string . The date the status has been modified formatted as yyyy-MM-dd hh:mm:ss . estimation : float . The estimation in days. difficulty : string . The difficulty, one of veryEasy , easy , medium , hard or veryHard . uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateStatus\", \"success\": true, \"message\": \"Status updated.\", \"content\": { } }","title":"updateStatus"},{"location":"dev/server-reference/status/#removestatus","text":"http://your.server/ramses/?removeStatus Removes a status from the database. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeStatus\", \"success\": true, \"message\": \"Status removed.\", \"content\": { } }","title":"removeStatus"},{"location":"dev/server-reference/status/#setstatususer","text":"http://your.server/ramses/?setStatusUser Changes the user who\u2019s modified this status. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStatusUser\", \"success\": true, \"message\": \"Status user changed.\", \"content\": { } }","title":"setStatusUser"},{"location":"dev/server-reference/steps/","text":"Queries for managing steps Note The API also provides an access to \u201ctemplate steps\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateStep instead of createStep ) Hint There is no method to retrive steps directly; steps are returned by the project method getProjects createStep http://your.server/ramses/?createStep Creates a new step in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the step to. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Note When creating a template step with createTemplateStep , omit the projectUuid attribute. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createStep\", \"success\": true, \"message\": \"Step \\\"RIG\\\" created.\", \"content\": { } } updateStep http://your.server/ramses/?updateStep Update step info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. type : string (optionnal). The type of the step. One of asset , shot , pre , or post . color : string (optionnal). The color to use in the UI to display this step. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateStep\", \"success\": true, \"message\": \"Step \\\"RIG\\\" updated.\", \"content\": { } } setStepOrder http://your.server/ramses/?setStepOrder Moves a step in the list. This method changes only the order value of the given step. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStepOrder\", \"success\": true, \"message\": \"Step moved.\", \"content\": { } } moveStep http://your.server/ramses/?moveStep Moves a step in the list. This method will update the order of all the other steps of the same project accordingly. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"moveStep\", \"success\": true, \"message\": \"Step moved.\", \"content\": { } } removeStep http://your.server/ramses/?removeStep Removes a step from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeStep\", \"success\": true, \"message\": \"Step uuid123 removed.\", \"content\": { } } setStepEstimations http://your.server/ramses/?setStepEstimations Updates the default estimations for this step Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. method : string . For shot steps, the method to use for estimations. One of shot or second . veryEasy : float . The estimation for very easy items, in days. easy : float . The estimation for easy items, in days. medium : float . The estimation for medium items, in days. hard : float . The estimation forhard items, in days. veryHard : float . The estimation for very hard items, in days. multiplyGroupUuid : string . For shot steps, the uuid of an asset group used to multiply estimations. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStepEstimations\", \"success\": true, \"message\": \"Step updated.\", \"content\": { } } assignApplication http://your.server/ramses/?assignApplication Assigns an application to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignApplication\", \"success\": true, \"message\": \"Application assigned to step.\", \"content\": { } } unassignApplication http://your.server/ramses/?unassignApplication Unassigns an application from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignApplication\", \"success\": true, \"message\": \"Application unassigned from step.\", \"content\": { } }","title":"Step queries"},{"location":"dev/server-reference/steps/#queries-for-managing-steps","text":"Note The API also provides an access to \u201ctemplate steps\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateStep instead of createStep ) Hint There is no method to retrive steps directly; steps are returned by the project method getProjects","title":"Queries for managing steps"},{"location":"dev/server-reference/steps/#createstep","text":"http://your.server/ramses/?createStep Creates a new step in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the step to. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Note When creating a template step with createTemplateStep , omit the projectUuid attribute. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createStep\", \"success\": true, \"message\": \"Step \\\"RIG\\\" created.\", \"content\": { } }","title":"createStep"},{"location":"dev/server-reference/steps/#updatestep","text":"http://your.server/ramses/?updateStep Update step info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. type : string (optionnal). The type of the step. One of asset , shot , pre , or post . color : string (optionnal). The color to use in the UI to display this step. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateStep\", \"success\": true, \"message\": \"Step \\\"RIG\\\" updated.\", \"content\": { } }","title":"updateStep"},{"location":"dev/server-reference/steps/#setsteporder","text":"http://your.server/ramses/?setStepOrder Moves a step in the list. This method changes only the order value of the given step. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStepOrder\", \"success\": true, \"message\": \"Step moved.\", \"content\": { } }","title":"setStepOrder"},{"location":"dev/server-reference/steps/#movestep","text":"http://your.server/ramses/?moveStep Moves a step in the list. This method will update the order of all the other steps of the same project accordingly. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"moveStep\", \"success\": true, \"message\": \"Step moved.\", \"content\": { } }","title":"moveStep"},{"location":"dev/server-reference/steps/#removestep","text":"http://your.server/ramses/?removeStep Removes a step from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeStep\", \"success\": true, \"message\": \"Step uuid123 removed.\", \"content\": { } }","title":"removeStep"},{"location":"dev/server-reference/steps/#setstepestimations","text":"http://your.server/ramses/?setStepEstimations Updates the default estimations for this step Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. method : string . For shot steps, the method to use for estimations. One of shot or second . veryEasy : float . The estimation for very easy items, in days. easy : float . The estimation for easy items, in days. medium : float . The estimation for medium items, in days. hard : float . The estimation forhard items, in days. veryHard : float . The estimation for very hard items, in days. multiplyGroupUuid : string . For shot steps, the uuid of an asset group used to multiply estimations. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"setStepEstimations\", \"success\": true, \"message\": \"Step updated.\", \"content\": { } }","title":"setStepEstimations"},{"location":"dev/server-reference/steps/#assignapplication","text":"http://your.server/ramses/?assignApplication Assigns an application to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"assignApplication\", \"success\": true, \"message\": \"Application assigned to step.\", \"content\": { } }","title":"assignApplication"},{"location":"dev/server-reference/steps/#unassignapplication","text":"http://your.server/ramses/?unassignApplication Unassigns an application from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"unassignApplication\", \"success\": true, \"message\": \"Application unassigned from step.\", \"content\": { } }","title":"unassignApplication"},{"location":"dev/server-reference/users/","text":"Queries for managing users updateUser http://your.server/ramses/?updateUser Logs in with a username and a (hashed) password. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. role : string (optionnal). The new role of the user. One of admin , project , lead , or standard . folderPath : string (optionnal). The path for the user folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" updated.\", \"content\": { } } updatePassword http://your.server/ramses/?updatePassword Changes the password of a specific user Query attributes: current : string . The current (hashed) password. new : string . The new (hashed) password. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Tip Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" updated.\", \"content\": { } } getUsers http://your.server/ramses/?getUsers Retrieves the list of all users. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of user information. Each user is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . A comment. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. One of admin , project , lead , or standard . Reply body : { \"accepted\": true, \"query\": \"getUsers\", \"success\": true, \"message\": \"Users list retrieved.\", \"content\": [ { \"name\": \"Nicolas Dufresne\", \"shortName\": \"Duduf\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/duduf\", \"role\": \"admin\", }, { \"name\": \"J. Doh\", \"shortName\": \"User\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/doe\", \"role\": \"standard\", } ] } createUser http://your.server/ramses/?createUser Creates a new user in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" created.\", \"content\": { } } removeUser http://your.server/ramses/?removeUser Removes a user from the database. Query attributes: uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeUser\", \"success\": true, \"message\": \"User 123 removed.\", \"content\": { } }","title":"User queries"},{"location":"dev/server-reference/users/#queries-for-managing-users","text":"","title":"Queries for managing users"},{"location":"dev/server-reference/users/#updateuser","text":"http://your.server/ramses/?updateUser Logs in with a username and a (hashed) password. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. comment : string . The new comment. role : string (optionnal). The new role of the user. One of admin , project , lead , or standard . folderPath : string (optionnal). The path for the user folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" updated.\", \"content\": { } }","title":"updateUser"},{"location":"dev/server-reference/users/#updatepassword","text":"http://your.server/ramses/?updatePassword Changes the password of a specific user Query attributes: current : string . The current (hashed) password. new : string . The new (hashed) password. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Tip Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"updateUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" updated.\", \"content\": { } }","title":"updatePassword"},{"location":"dev/server-reference/users/#getusers","text":"http://your.server/ramses/?getUsers Retrieves the list of all users. Query attributes: token : string . The session token returned by login . Reply content: The server replies an array of user information. Each user is an object with the following attributes: name : string . The name of the user. shortName : string . The username. comment : string . A comment. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. One of admin , project , lead , or standard . Reply body : { \"accepted\": true, \"query\": \"getUsers\", \"success\": true, \"message\": \"Users list retrieved.\", \"content\": [ { \"name\": \"Nicolas Dufresne\", \"shortName\": \"Duduf\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/duduf\", \"role\": \"admin\", }, { \"name\": \"J. Doh\", \"shortName\": \"User\", \"uuid\": \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\", \"folderPath\": \"/home/doe\", \"role\": \"standard\", } ] }","title":"getUsers"},{"location":"dev/server-reference/users/#createuser","text":"http://your.server/ramses/?createUser Creates a new user in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"createUser\", \"success\": true, \"message\": \"User \\\"Duduf\\\" created.\", \"content\": { } }","title":"createUser"},{"location":"dev/server-reference/users/#removeuser","text":"http://your.server/ramses/?removeUser Removes a user from the database. Query attributes: uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned by login . Reply content: Empty Reply body : { \"accepted\": true, \"query\": \"removeUser\", \"success\": true, \"message\": \"User 123 removed.\", \"content\": { } }","title":"removeUser"},{"location":"licenses/gfdl/","text":"GNU Free Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \u201cfree\u201d in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u00e2\u20ac\u201dfor example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements\u201d. 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith \u00e2\u20ac\u00a6 Texts.\u201d line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"Documentation license"},{"location":"licenses/gfdl/#gnu-free-documentation-license","text":"Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU Free Documentation License"},{"location":"licenses/gfdl/#0-preamble","text":"The purpose of this License is to make a manual, textbook, or other functional and useful document \u201cfree\u201d in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.","title":"0. PREAMBLE"},{"location":"licenses/gfdl/#1-applicability-and-definitions","text":"This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.","title":"1. APPLICABILITY AND DEFINITIONS"},{"location":"licenses/gfdl/#2-verbatim-copying","text":"You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies.","title":"2. VERBATIM COPYING"},{"location":"licenses/gfdl/#3-copying-in-quantity","text":"If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.","title":"3. COPYING IN QUANTITY"},{"location":"licenses/gfdl/#4-modifications","text":"You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u00e2\u20ac\u201dfor example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.","title":"4. MODIFICATIONS"},{"location":"licenses/gfdl/#5-combining-documents","text":"You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements\u201d.","title":"5. COMBINING DOCUMENTS"},{"location":"licenses/gfdl/#6-collections-of-documents","text":"You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.","title":"6. COLLECTIONS OF DOCUMENTS"},{"location":"licenses/gfdl/#7-aggregation-with-independent-works","text":"A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.","title":"7. AGGREGATION WITH INDEPENDENT WORKS"},{"location":"licenses/gfdl/#8-translation","text":"Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.","title":"8. TRANSLATION"},{"location":"licenses/gfdl/#9-termination","text":"You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.","title":"9. TERMINATION"},{"location":"licenses/gfdl/#10-future-revisions-of-this-license","text":"The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.","title":"10. FUTURE REVISIONS OF THIS LICENSE"},{"location":"licenses/gfdl/#11-relicensing","text":"\u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.","title":"11. RELICENSING"},{"location":"licenses/gfdl/#addendum-how-to-use-this-license-for-your-documents","text":"To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith \u00e2\u20ac\u00a6 Texts.\u201d line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"ADDENDUM: How to use this License for your documents"},{"location":"licenses/gnu-gpl/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u2019 and authors\u2019 protection, the GPL clearly explains that there is no warranty for this free software. For both users\u2019 and authors\u2019 sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u2019 freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u2019 Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w\u2019 and `show c\u2019 should show the appropriate parts of the General Public License. Of course, your program\u2019s commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"GNU GPLv3"},{"location":"licenses/gnu-gpl/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU GENERAL PUBLIC LICENSE"},{"location":"licenses/gnu-gpl/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u2019 and authors\u2019 protection, the GPL clearly explains that there is no warranty for this free software. For both users\u2019 and authors\u2019 sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u2019 freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"licenses/gnu-gpl/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"licenses/gnu-gpl/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"licenses/gnu-gpl/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"licenses/gnu-gpl/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"licenses/gnu-gpl/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"licenses/gnu-gpl/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"licenses/gnu-gpl/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"licenses/gnu-gpl/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"licenses/gnu-gpl/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"licenses/gnu-gpl/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"licenses/gnu-gpl/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"licenses/gnu-gpl/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"licenses/gnu-gpl/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"licenses/gnu-gpl/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"licenses/gnu-gpl/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License."},{"location":"licenses/gnu-gpl/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"licenses/gnu-gpl/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"licenses/gnu-gpl/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"licenses/gnu-gpl/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"licenses/gnu-gpl/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w\u2019 and `show c\u2019 should show the appropriate parts of the General Public License. Of course, your program\u2019s commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"},{"location":"pipeline/","text":"Ramses - The Rx Asset Management System: Introduction Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . This first part of the Ramses documention intents to help you understand the general concepts and key features of Ramses without going into technical details. As Ramses is not made of one single application but of several components, the technical description and user guide of each piece of software is available individually in the second part of this documentation . Features Ramses has three different main features, which are closely related and for which each component plays its role: Pipeline automation , Production Tracking and Production Planning , along with the global administration of course. \u25b9 Administration . \u25b9 Pipeline . \u25b9 Production Tracking . \u25b9 Planning . The components Ramses is a complete framework made of several components, as you can see on the image above. Each component has to be installed individually, and not all components are mandatory to use Ramses . Here is the list of all the components along with a few notes about them. Component Relations Description Technical Documentation Ramses Server Serves the data to the Ramses Client . The server stores and serves all shared data between all workstations in the studio. The Ramses Clients installed on these workstations connect to it to retrieve tha data they need. \u25b9 Read the doc . Ramses Client Application Connects to the Ramses Server to share the data. Serves the data that the Ramses Add-ons need to automate the pipeline. The client application is the central node of the Ramses framework. All information is available through the application, and it is able to drive the Ramses Add-ons in the creative applications. Note that it can be used stand-alone in an offline mode without the server, for one-man bands. \u25b9 Read the doc . Ramses Add-ons Connect to the Ramses Client to get the data they need to automate the pipeline. The add-ons integrate Ramses into your favorite creative applications (3D or 2D Animation, designing, compositing software, etc.). They can automate your workflow, and they handle all the file versionning, while providing production tracking data to the Ramses client . They can also be used as stand-alone plugins, without any other Ramses component, at the cost of less production management features. \u25b9 Read the doc . Ramses Tree Read by the Ramses Add-ons and the Ramses Client . The Ramses Tree is the way Ramses stores and sorts your files. Thanks to a carefully crafted file and folder naming scheme and conventions, both the Ramses Add-ons and the Ramses Client can efficiently handle all your files and data. \u25b9 Read the doc . Note Although in the future the Ramses Client will be able to be used as a stand-alone, offline application, the currently available Alpha or Beta Versions absolutely need a connection to a Ramses Server (there\u2019s no offline storage of the data for now). But that doesn\u2019t mean that you absolutely need an online server to test and use Ramses : you can already use it on a single workstation by locally installing a simple webserver. Explanations and a step-by-step guide is available in the server documentation . Hint Ramses is not available as a service : we do not provide any infrastructure nor server nor database for you to connect to. There\u2019s no website available to use a Ramses Server : you can stay in control of your own data without relying onto unknown people, even people as loving as us (and you won\u2019t have to pay mensual or annual fees just to use Ramses ). But don\u2019t be afraid, even if you\u2019re running your own small studio or tiny collective, it\u2019s very easy to install and use the Ramses server, it can be done on any computer running Windows , Linux or Mac OS , or better, on any low-cost shared hosting with just a very small available space and a small MySQL database. All the installation procedure is explained in the server documentation . Installation In order to use Ramses , you have to install the components you need individually, one after each other. Component Installation notes Ramses Server Requires a standard AMP stack ( Apache , MySQL , PHP ). We provide a guide to install one locally: \u25b9 AMP server installation Then you can install the Ramses server easily: \u25b9 Installation guide Ramses Client The client is a simple application, installed the same way as other applications: \u25b9 Installation guide Ramses Add-ons Add-ons installation differs depending on the host application: \u25b9 Maya installation \u25b9 Other hosts coming soon! Note Although in the future the Ramses Client will be able to be used as a stand-alone, offline application, the currently available Alpha or Beta Versions absolutely need a connection to a Ramses Server (there\u2019s no offline storage of the data for now). This means that for now you have to install the Ramses Server or have one available somewhere.","title":"Introduction"},{"location":"pipeline/#ramses-the-rx-asset-management-system-introduction","text":"Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . This first part of the Ramses documention intents to help you understand the general concepts and key features of Ramses without going into technical details. As Ramses is not made of one single application but of several components, the technical description and user guide of each piece of software is available individually in the second part of this documentation .","title":"Ramses - The Rx Asset Management System: Introduction"},{"location":"pipeline/#features","text":"Ramses has three different main features, which are closely related and for which each component plays its role: Pipeline automation , Production Tracking and Production Planning , along with the global administration of course. \u25b9 Administration . \u25b9 Pipeline . \u25b9 Production Tracking . \u25b9 Planning .","title":"Features"},{"location":"pipeline/#the-components","text":"Ramses is a complete framework made of several components, as you can see on the image above. Each component has to be installed individually, and not all components are mandatory to use Ramses . Here is the list of all the components along with a few notes about them. Component Relations Description Technical Documentation Ramses Server Serves the data to the Ramses Client . The server stores and serves all shared data between all workstations in the studio. The Ramses Clients installed on these workstations connect to it to retrieve tha data they need. \u25b9 Read the doc . Ramses Client Application Connects to the Ramses Server to share the data. Serves the data that the Ramses Add-ons need to automate the pipeline. The client application is the central node of the Ramses framework. All information is available through the application, and it is able to drive the Ramses Add-ons in the creative applications. Note that it can be used stand-alone in an offline mode without the server, for one-man bands. \u25b9 Read the doc . Ramses Add-ons Connect to the Ramses Client to get the data they need to automate the pipeline. The add-ons integrate Ramses into your favorite creative applications (3D or 2D Animation, designing, compositing software, etc.). They can automate your workflow, and they handle all the file versionning, while providing production tracking data to the Ramses client . They can also be used as stand-alone plugins, without any other Ramses component, at the cost of less production management features. \u25b9 Read the doc . Ramses Tree Read by the Ramses Add-ons and the Ramses Client . The Ramses Tree is the way Ramses stores and sorts your files. Thanks to a carefully crafted file and folder naming scheme and conventions, both the Ramses Add-ons and the Ramses Client can efficiently handle all your files and data. \u25b9 Read the doc . Note Although in the future the Ramses Client will be able to be used as a stand-alone, offline application, the currently available Alpha or Beta Versions absolutely need a connection to a Ramses Server (there\u2019s no offline storage of the data for now). But that doesn\u2019t mean that you absolutely need an online server to test and use Ramses : you can already use it on a single workstation by locally installing a simple webserver. Explanations and a step-by-step guide is available in the server documentation . Hint Ramses is not available as a service : we do not provide any infrastructure nor server nor database for you to connect to. There\u2019s no website available to use a Ramses Server : you can stay in control of your own data without relying onto unknown people, even people as loving as us (and you won\u2019t have to pay mensual or annual fees just to use Ramses ). But don\u2019t be afraid, even if you\u2019re running your own small studio or tiny collective, it\u2019s very easy to install and use the Ramses server, it can be done on any computer running Windows , Linux or Mac OS , or better, on any low-cost shared hosting with just a very small available space and a small MySQL database. All the installation procedure is explained in the server documentation .","title":"The components"},{"location":"pipeline/#installation","text":"In order to use Ramses , you have to install the components you need individually, one after each other. Component Installation notes Ramses Server Requires a standard AMP stack ( Apache , MySQL , PHP ). We provide a guide to install one locally: \u25b9 AMP server installation Then you can install the Ramses server easily: \u25b9 Installation guide Ramses Client The client is a simple application, installed the same way as other applications: \u25b9 Installation guide Ramses Add-ons Add-ons installation differs depending on the host application: \u25b9 Maya installation \u25b9 Other hosts coming soon! Note Although in the future the Ramses Client will be able to be used as a stand-alone, offline application, the currently available Alpha or Beta Versions absolutely need a connection to a Ramses Server (there\u2019s no offline storage of the data for now). This means that for now you have to install the Ramses Server or have one available somewhere.","title":"Installation"},{"location":"pipeline/administration/","text":"Ramses Administration (Projects and Users) The administration panel, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . In order to use Ramses , at least one user and one project are needed; when using the Ramses Client Application , you can also manage other elements. Both users and projects are represented by folders in the Ramses Tree , and Ramses components will list them from the default folders if they can\u2019t get the information from the Ramses Client Application or Ramses Server . Users The list of users is available and can be managed in the Ramses Client Application , under the administration panel (for administrator users) , and by default each user is represented by a folder in the Ramses Tree as shown below. \u250c Ramses Folder \u2502 \u2514\u2500\u252c\u2500 Users # User files \u2502 # The name of the user folders are their individual ID \u2502 \u251c\u2500\u252c\u2500 Duduf # Files for a single user (ID) \u2502 \u2514\u2500\u2500\u2500 Config # Configuration files for this user \u2502 \u251c\u2500\u252c\u2500 John # ID \u2502 \u2514\u2500\u2500\u2500 Config \u2502 \u2514\u2500\u2500\u2500 ... Tip Without using the Ramses Client Application , you can create users by creating their folder in the default location in the Ramses Tree . Each user is represented by its name and ID , and has a role . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The role defines the rights the user has to manage Ramses , the projects, the assets, etc. There are four roles listed below. \u25b9 User management in the Ramses Client Application . Administrator The Administrator has all rights to configure and modify Ramses , especially but non exclusively: Creating, removing projects. Creating, modifying, removing template steps. Creating, modifying, removing users. The Administrator has all other rights from other roles too. Note Althought the administrator has the right to modify all users, he cannot remove himself nor change his own role. Another administrator has to do it. Project Admin The Project Administrator has the necessary rights to configure and modify projects, especially but non exclusively: Modifying projects. Creating, modifying, removing steps. Assigning Users to projects. Creating, modifying, removing Asset Groups. Creating, modifying, removing Sequences. Lead The lead is a user who can manage projects, and has less rights than the administrator : Creating, modifying, removing shots. Creating, modifying, removing assets. Assigning users to assets and shots. Standard User (User) The standard user cannot modify nor remove anything from Ramses , but interacts with shots and assets. Projects Projects represent the final artwork : a feature film or one of its sequence, an episode in a TV series, a short movie, a music video\u2026 They are made of Shots which are in turn made of Assets . Assets and Shots are produced through different Steps which are inter-dependent. Shots are grouped in Sequences , and a project contains at least one sequence. Assets are grouped in Asset Groups (e.g. characters, sets, props\u2026). Note It is not mandatory to use sequences, and for short projects (less than a hundred shots), it is often easier to just have a single sequence. The list of projects is available and can be managed in the Ramses Client Application , under the administration panel (for administrator users) , and by default each project is represented by a folder in the Ramses Tree as shown below. \u250c Ramses Folder \u2502 \u2514\u2500\u252c\u2500 Projects # Project files \u2502 # The name of the project folders are their individual ID \u2502 \u251c\u2500\u2500\u2500 TI # A project (ID) \u2502 \u251c\u2500\u2500\u2500 PPB # Another project (ID) \u2502 \u2514\u2500\u2500\u2500 ... Tip Without using the Ramses Client Application , you can create projects by creating their folder in the default location in the Ramses Tree . Each project is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The projects also have the characteristics of the final video ( width and height in pixels, framerate , duration \u2026). They also have a deadline defining the date when the project has to be finished and delivered. Users can be assigned to specific projects. \u25b9 Project management in the Ramses Client Application .","title":"Administration"},{"location":"pipeline/administration/#ramses-administration-projects-and-users","text":"The administration panel, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . In order to use Ramses , at least one user and one project are needed; when using the Ramses Client Application , you can also manage other elements. Both users and projects are represented by folders in the Ramses Tree , and Ramses components will list them from the default folders if they can\u2019t get the information from the Ramses Client Application or Ramses Server .","title":"Ramses Administration (Projects and Users)"},{"location":"pipeline/administration/#users","text":"The list of users is available and can be managed in the Ramses Client Application , under the administration panel (for administrator users) , and by default each user is represented by a folder in the Ramses Tree as shown below. \u250c Ramses Folder \u2502 \u2514\u2500\u252c\u2500 Users # User files \u2502 # The name of the user folders are their individual ID \u2502 \u251c\u2500\u252c\u2500 Duduf # Files for a single user (ID) \u2502 \u2514\u2500\u2500\u2500 Config # Configuration files for this user \u2502 \u251c\u2500\u252c\u2500 John # ID \u2502 \u2514\u2500\u2500\u2500 Config \u2502 \u2514\u2500\u2500\u2500 ... Tip Without using the Ramses Client Application , you can create users by creating their folder in the default location in the Ramses Tree . Each user is represented by its name and ID , and has a role . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The role defines the rights the user has to manage Ramses , the projects, the assets, etc. There are four roles listed below. \u25b9 User management in the Ramses Client Application .","title":"Users"},{"location":"pipeline/administration/#administrator","text":"The Administrator has all rights to configure and modify Ramses , especially but non exclusively: Creating, removing projects. Creating, modifying, removing template steps. Creating, modifying, removing users. The Administrator has all other rights from other roles too. Note Althought the administrator has the right to modify all users, he cannot remove himself nor change his own role. Another administrator has to do it.","title":"Administrator"},{"location":"pipeline/administration/#project-admin","text":"The Project Administrator has the necessary rights to configure and modify projects, especially but non exclusively: Modifying projects. Creating, modifying, removing steps. Assigning Users to projects. Creating, modifying, removing Asset Groups. Creating, modifying, removing Sequences.","title":"Project Admin"},{"location":"pipeline/administration/#lead","text":"The lead is a user who can manage projects, and has less rights than the administrator : Creating, modifying, removing shots. Creating, modifying, removing assets. Assigning users to assets and shots.","title":"Lead"},{"location":"pipeline/administration/#standard-user-user","text":"The standard user cannot modify nor remove anything from Ramses , but interacts with shots and assets.","title":"Standard User (User)"},{"location":"pipeline/administration/#projects","text":"Projects represent the final artwork : a feature film or one of its sequence, an episode in a TV series, a short movie, a music video\u2026 They are made of Shots which are in turn made of Assets . Assets and Shots are produced through different Steps which are inter-dependent. Shots are grouped in Sequences , and a project contains at least one sequence. Assets are grouped in Asset Groups (e.g. characters, sets, props\u2026). Note It is not mandatory to use sequences, and for short projects (less than a hundred shots), it is often easier to just have a single sequence. The list of projects is available and can be managed in the Ramses Client Application , under the administration panel (for administrator users) , and by default each project is represented by a folder in the Ramses Tree as shown below. \u250c Ramses Folder \u2502 \u2514\u2500\u252c\u2500 Projects # Project files \u2502 # The name of the project folders are their individual ID \u2502 \u251c\u2500\u2500\u2500 TI # A project (ID) \u2502 \u251c\u2500\u2500\u2500 PPB # Another project (ID) \u2502 \u2514\u2500\u2500\u2500 ... Tip Without using the Ramses Client Application , you can create projects by creating their folder in the default location in the Ramses Tree . Each project is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The projects also have the characteristics of the final video ( width and height in pixels, framerate , duration \u2026). They also have a deadline defining the date when the project has to be finished and delivered. Users can be assigned to specific projects. \u25b9 Project management in the Ramses Client Application .","title":"Projects"},{"location":"pipeline/pipeline/","text":"Pipeline The pipeline editor, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . The pipeline describes the way the production of the assets and the shots goes through each step . It actually describes each connection, each pipe between each step, keeping important information like the file type used and its color space for example. In combination with the Ramses Add-ons which integrate Ramses in your favorite creative software, Ramses is able to automate your pipeline , managing the versionning of the files, the exports, imports and all these manual tasks a robot could do for you. The pipeline is made of Steps which are connected together with Pipes . The pipeline also handles your Applications and File types . In the future, Ramses will handle color spaces too. For each pipe, each connection, you can define precisely which file types are to be used, so that the Ramses Add-ons can use this information to automate all exports and imports. The pipes are also used in Production tracking . Ramses Add-ons are also in charge of versionning and creating preview images and videos to be used in other components. The pipeline relies on the Ramses Tree to automatically manage the files and folders. A working folder All working folders should contain a few predefined subfolders, so that Ramses can efficiently handle the versionning and production tracking of all files, assets, and shots. This is a typical working folder (files are not shown): \u250c projectID_A_AssetID_StepID # The working folder, for an asset in this example \u2502 \u251c\u2500\u2500\u2500 _versions # The versionning folder, handled by Ramses. \u2502 # Contains the history and all versions \u251c\u2500\u2500\u2500 _published \u2502 # Contains the published files, to be imported by the next steps \u2514\u2500\u2500\u2500 _preview # Contains media files to be used to preview the work on this step (videos, images...) Ramses Add-ons automatically create and sort the files in these folders when working on an item, but you can manually create and use them, especially the _published and _preview subfolder. Any file added in these folders will be automatically detected and managed by Ramses . Even when not using a Ramses Add-on it is recommended to use this folder structure. All files inside these folders should be correctly named and respect all Ramses naming conventions . \u25b9 More information: The Ramses Tree . Creating a pipeline The creation of a pipeline is better made using the Ramses Client Application and its nodal Pipeline Editor , although it is also possible to use basic pipelines only with Ramses Add-ons or more complex ones thanks to the Add-on API and Ramses extensibility for developpers. A pipeline can be built quite quickly by following these steps: List the applications which are going to be used. Create the steps (from scratch or using templates). Assign applications to the steps. Connect the steps with pipes. (optional) Set the file types to be used through the pipes. (optional) Create Templates for the steps. (optional) Develop extensions for the Add-ons if you have specific needs for an advanced pipeline with a lot of automations. \u25b9 Pipeline editor in the Ramses Client Application . An example Add-on for Autodesk Maya is available to show how an advanced pipeline can be created, with or without the Ramses Client Application , using the Ramses Python API . Note This Autodesk Maya Add-on has been developped for the production of the graduation movies at the school Rubika / Supinfocom in Valenciennes, France. It\u2019s more than just an example and can be used in production. \u25b9 Add-on API for the extension or development of new Add-ons . Applications In order to manage the assets and the files they use, Ramses keeps track of the Applications used in the production. For each Application , Ramses keeps also three lists of file types : Native types are the file types used natively by the applications; the ones which type can be created with a save command and which store data in a lossless manner. Import types are all the file types the application can import. Export types are all the file types the application can create, usually with an export or bake command for example. The Ramses client can open applications and open files in applications; Ramses Add-ons should be able to save and manage the versionning in an application, as long as import and export assets. \u25b9 Application management in the Ramses Client Application . File types In order to manage the assets and the files they use, Ramses keeps track of the File Types used in the production. Specific file types can be marked as preview types , which means they\u2019re light and standard and can be used to display or preview an asset, but can store data in a lossy manner. File types can be associated with specific applications and pipes . \u25b9 File type management in the Ramses Client Application . Steps Steps represent the stages the assets and shots have to go through before completion, for example Modeling , Rigging , Animation , Lighting \u2026 There are 4 different types of steps: Pre-Production includes all the steps of the work which has to be done to prepare and develop the project, but which will not actually be included in the project (for example: the storyboard, the script, etc.). Pre-production steps aren\u2019t linked to assets nor shots, but work on the project as a whole. Asset Production steps are the steps building assets which are needed to finalize the shots of the project (for example: the characters, props, sets, etc.) Shot Production steps are the steps where shots are built using assets (for example: animation, lighting, compositing, etc.) Post-Production includes all the steps from the edit to the delivery, where the work is made on the whole edit and not individual shots (for example: editing, sound design, music, etc.) The list of steps is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each step is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Project Root folder \u2502 \u251c\u2500\u252c\u2500 01-PRE-PROD \u2502 \u251c\u2500\u2500\u2500 PROJECTID_G_SCRIPT # Pre production step \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_STORYBOARD \u2502 \u251c\u2500\u252c\u2500 02-PROD \u2502 \u251c\u2500\u252c\u2500 PROJECTID_G_MOD # Common files for the mod step \u2502 \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the mod step \u2502 \u2514\u2500\u252c\u2500 PROJECTID_G_RIG # Common files for the rig step \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the rig step \u2502 \u2514\u2500\u252c\u2500 03-POST-PROD \u2514\u2500\u2500\u2500 PROJECTID_G_EDIT # Post production step Note These folders are not where the working files are stored ; they contain the common files, like libraries, examples, references, and the Templates used for the creation of new assets and shots. Working files are stored in the Assets and Shots subfolder of the project in the Ramses Tree . Tip Without using the Ramses Client Application , you can create steps by creating their folder in the default location in the project subfolder of the Ramses Tree . Each step is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The folder names for the steps respect the Ramses Naming Scheme : ProjectID_G_stepID . Steps are also associated with the applications used to produce the assets and shots (read below). They also have default values for production estimations (read the Planning section for more information). Step folders contain a Templates subfolder which contains the template files to be used when creating a new asset or a new shot . This can be done directly from assets and shots tables in the Ramses Client Application or from Ramses Add-ons . The Templates subfolder is a standard working folder, and templates can have versions, a preview subfolder, and must be published to be used. Tip You can manually add files in the Templates subfolder; if you also copy them in the _published folder, Ramses will automatically detect and use them for asset and shot creation (see the section above entitled \u201c A working folder \u201d). \u25b9 Step management in the Ramses Client Application . \u25b9 Template Step management in the Ramses Client Application . Pipes Each pipe is a connection between two steps. It keeps the file types used to export from and import to these steps, as long as the color space of the files. Ramses Add-ons can use this information to automate the process. Tip Configuring pipes and passing the information to the Ramses Add-ons makes the pipeline very customizable and modular, but it is not mandatory when extending or developping an Add-on to use this information. Pipes also handle triggers which run scripts in your applications when a status changes in the production tracking of the corresponding steps (when a file runs through the pipe ). Pipes also automate the production management and are able to automatically update statuses, notify users of changes and of the disponibility of new materials for example. \u25b9 Pipeline editor in the Ramses Client Application .","title":"Pipeline"},{"location":"pipeline/pipeline/#pipeline","text":"The pipeline editor, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . The pipeline describes the way the production of the assets and the shots goes through each step . It actually describes each connection, each pipe between each step, keeping important information like the file type used and its color space for example. In combination with the Ramses Add-ons which integrate Ramses in your favorite creative software, Ramses is able to automate your pipeline , managing the versionning of the files, the exports, imports and all these manual tasks a robot could do for you. The pipeline is made of Steps which are connected together with Pipes . The pipeline also handles your Applications and File types . In the future, Ramses will handle color spaces too. For each pipe, each connection, you can define precisely which file types are to be used, so that the Ramses Add-ons can use this information to automate all exports and imports. The pipes are also used in Production tracking . Ramses Add-ons are also in charge of versionning and creating preview images and videos to be used in other components. The pipeline relies on the Ramses Tree to automatically manage the files and folders.","title":"Pipeline"},{"location":"pipeline/pipeline/#a-working-folder","text":"All working folders should contain a few predefined subfolders, so that Ramses can efficiently handle the versionning and production tracking of all files, assets, and shots. This is a typical working folder (files are not shown): \u250c projectID_A_AssetID_StepID # The working folder, for an asset in this example \u2502 \u251c\u2500\u2500\u2500 _versions # The versionning folder, handled by Ramses. \u2502 # Contains the history and all versions \u251c\u2500\u2500\u2500 _published \u2502 # Contains the published files, to be imported by the next steps \u2514\u2500\u2500\u2500 _preview # Contains media files to be used to preview the work on this step (videos, images...) Ramses Add-ons automatically create and sort the files in these folders when working on an item, but you can manually create and use them, especially the _published and _preview subfolder. Any file added in these folders will be automatically detected and managed by Ramses . Even when not using a Ramses Add-on it is recommended to use this folder structure. All files inside these folders should be correctly named and respect all Ramses naming conventions . \u25b9 More information: The Ramses Tree .","title":"A working folder"},{"location":"pipeline/pipeline/#creating-a-pipeline","text":"The creation of a pipeline is better made using the Ramses Client Application and its nodal Pipeline Editor , although it is also possible to use basic pipelines only with Ramses Add-ons or more complex ones thanks to the Add-on API and Ramses extensibility for developpers. A pipeline can be built quite quickly by following these steps: List the applications which are going to be used. Create the steps (from scratch or using templates). Assign applications to the steps. Connect the steps with pipes. (optional) Set the file types to be used through the pipes. (optional) Create Templates for the steps. (optional) Develop extensions for the Add-ons if you have specific needs for an advanced pipeline with a lot of automations. \u25b9 Pipeline editor in the Ramses Client Application . An example Add-on for Autodesk Maya is available to show how an advanced pipeline can be created, with or without the Ramses Client Application , using the Ramses Python API . Note This Autodesk Maya Add-on has been developped for the production of the graduation movies at the school Rubika / Supinfocom in Valenciennes, France. It\u2019s more than just an example and can be used in production. \u25b9 Add-on API for the extension or development of new Add-ons .","title":"Creating a pipeline"},{"location":"pipeline/pipeline/#applications","text":"In order to manage the assets and the files they use, Ramses keeps track of the Applications used in the production. For each Application , Ramses keeps also three lists of file types : Native types are the file types used natively by the applications; the ones which type can be created with a save command and which store data in a lossless manner. Import types are all the file types the application can import. Export types are all the file types the application can create, usually with an export or bake command for example. The Ramses client can open applications and open files in applications; Ramses Add-ons should be able to save and manage the versionning in an application, as long as import and export assets. \u25b9 Application management in the Ramses Client Application .","title":"Applications"},{"location":"pipeline/pipeline/#file-types","text":"In order to manage the assets and the files they use, Ramses keeps track of the File Types used in the production. Specific file types can be marked as preview types , which means they\u2019re light and standard and can be used to display or preview an asset, but can store data in a lossy manner. File types can be associated with specific applications and pipes . \u25b9 File type management in the Ramses Client Application .","title":"File types"},{"location":"pipeline/pipeline/#steps","text":"Steps represent the stages the assets and shots have to go through before completion, for example Modeling , Rigging , Animation , Lighting \u2026 There are 4 different types of steps: Pre-Production includes all the steps of the work which has to be done to prepare and develop the project, but which will not actually be included in the project (for example: the storyboard, the script, etc.). Pre-production steps aren\u2019t linked to assets nor shots, but work on the project as a whole. Asset Production steps are the steps building assets which are needed to finalize the shots of the project (for example: the characters, props, sets, etc.) Shot Production steps are the steps where shots are built using assets (for example: animation, lighting, compositing, etc.) Post-Production includes all the steps from the edit to the delivery, where the work is made on the whole edit and not individual shots (for example: editing, sound design, music, etc.) The list of steps is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each step is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Project Root folder \u2502 \u251c\u2500\u252c\u2500 01-PRE-PROD \u2502 \u251c\u2500\u2500\u2500 PROJECTID_G_SCRIPT # Pre production step \u2502 \u2514\u2500\u2500\u2500 PROJECTID_G_STORYBOARD \u2502 \u251c\u2500\u252c\u2500 02-PROD \u2502 \u251c\u2500\u252c\u2500 PROJECTID_G_MOD # Common files for the mod step \u2502 \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the mod step \u2502 \u2514\u2500\u252c\u2500 PROJECTID_G_RIG # Common files for the rig step \u2502 \u2514\u2500\u2500\u2500 Templates # Template files for the rig step \u2502 \u2514\u2500\u252c\u2500 03-POST-PROD \u2514\u2500\u2500\u2500 PROJECTID_G_EDIT # Post production step Note These folders are not where the working files are stored ; they contain the common files, like libraries, examples, references, and the Templates used for the creation of new assets and shots. Working files are stored in the Assets and Shots subfolder of the project in the Ramses Tree . Tip Without using the Ramses Client Application , you can create steps by creating their folder in the default location in the project subfolder of the Ramses Tree . Each step is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. The folder names for the steps respect the Ramses Naming Scheme : ProjectID_G_stepID . Steps are also associated with the applications used to produce the assets and shots (read below). They also have default values for production estimations (read the Planning section for more information). Step folders contain a Templates subfolder which contains the template files to be used when creating a new asset or a new shot . This can be done directly from assets and shots tables in the Ramses Client Application or from Ramses Add-ons . The Templates subfolder is a standard working folder, and templates can have versions, a preview subfolder, and must be published to be used. Tip You can manually add files in the Templates subfolder; if you also copy them in the _published folder, Ramses will automatically detect and use them for asset and shot creation (see the section above entitled \u201c A working folder \u201d). \u25b9 Step management in the Ramses Client Application . \u25b9 Template Step management in the Ramses Client Application .","title":"Steps"},{"location":"pipeline/pipeline/#pipes","text":"Each pipe is a connection between two steps. It keeps the file types used to export from and import to these steps, as long as the color space of the files. Ramses Add-ons can use this information to automate the process. Tip Configuring pipes and passing the information to the Ramses Add-ons makes the pipeline very customizable and modular, but it is not mandatory when extending or developping an Add-on to use this information. Pipes also handle triggers which run scripts in your applications when a status changes in the production tracking of the corresponding steps (when a file runs through the pipe ). Pipes also automate the production management and are able to automatically update statuses, notify users of changes and of the disponibility of new materials for example. \u25b9 Pipeline editor in the Ramses Client Application .","title":"Pipes"},{"location":"pipeline/planning/","text":"Production Planning The schedule table, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . As Ramses is able to (automatically) estimate the time needed for the production of the individual assets and shots , it can help you plan the production, and keep track of the time needed to produce any project. At the step level, default estimations can be set to be used on shots and assets, depending on the difficulty of their productions. Then, each individual estimation can be customized for a finer evaluation of the time needed for the production. Estimations To establish a realistic schedule, it is important to be able to estimate the time needed to produce the project, as well as tracking the production to adjust these estimations if needed. Ramses helps you to quickly estimate this time needed, and then helps you to make it as precise as you need. The unit used for estimations by Ramses is the day (which can be divided into smaller parts of a day if you need). Counting in days is precise enough for planning a production, and this way you don\u2019t need to know exactly how many hours are (actually) worked in a day. But when Ramses tracks the production , the data it gathers is actually in\u2026 Seconds. To make things simpler, the time spent on each task is actually displayed and calculated in hours . Time tracking can\u2019t be done in days like the estimation, as the user may work on many different tasks the same day. Consequently, Ramses needs to be able to convert the actual hours spent on a task to days to be able to compare this value with the estimation (and warn you if you\u2019re late). As it would not really make sense to define an arbitrary number of hours per work day (as Ramses measures actual time spent, but never knows if the user is eating, going to the toilets, sick or just working as he should without any break (that\u2019s a joke)), Ramses rounds all that data to fractionnal days; this makes the measurement of the time spent less precise for individual tasks, but works quite well globally for the whole project, and thus to compare with estimations; the algorithm should work no matter what the official duration of a working day is (if it\u2019s more than 5-6 hours and less than 12). Note There\u2019s no way with Ramses to link the production tracking data to individual users (meaning that there\u2019s no easy way to build statistics about users or compare their productivity). That\u2019s by design, don\u2019t ask for it. Step estimations For each step, it is possible to set a default estimation which will be used for all assets and shots. This estimation, usually set in days of work, can vary with the difficulty for the production of each specific asset or shot; Ramses lets you define an estimation for five predefined levels of difficulty: very easy , easy , medium , hard , very hard . This default estimation is used to automatically evaluate the time needed for the production of the whole step, depending on the assets or shots which have to be produced, at first based on a medium difficulty. Adjusting the difficulty per shot or asset will then automatically update the global estimation to raise the precision. For the production of shots , the estimations can also be optionnaly and automatically multiplied by the duration of the shot, so that the estimation can be made per second instead of per shot , and also by the number of assets used by the shot , for example to multiply the estimation by the number of characters in the shot. \u25b9 Step management in the Ramses Client Application . Asset and shots estimations The estimation set by default by the step and automatically computed based on the number of assets, the duration and the difficulty can always be individually overriden for each shot and asset, for a more precise control on the estimations. This is done through the Production Tracking \u25b9 Production tracking in the Ramses Client Application . Schedule Based on the estimations, Ramses evaluates the number of days of work needed to complete the work on each step for all assets and shots. It is then easier to prepare the production planning and establish a schedule, by assigning days of work to users and steps . Ramses will keep track of the number of days already assigned and missing (or extra) days to help you plan the production. In case of lateness on the production of a step (shown by Ramses ), it means the quantity or the diffuclty of the work was underestimated; all that needs to be done is then to adjust the estimations at the step level to update all assets and shots estimations, then check if the schedule can still be respected, or assign more users or days of work to the step. \u25b9 Schedule panel in the Ramses Client Application .","title":"Planning"},{"location":"pipeline/planning/#production-planning","text":"The schedule table, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . As Ramses is able to (automatically) estimate the time needed for the production of the individual assets and shots , it can help you plan the production, and keep track of the time needed to produce any project. At the step level, default estimations can be set to be used on shots and assets, depending on the difficulty of their productions. Then, each individual estimation can be customized for a finer evaluation of the time needed for the production.","title":"Production Planning"},{"location":"pipeline/planning/#estimations","text":"To establish a realistic schedule, it is important to be able to estimate the time needed to produce the project, as well as tracking the production to adjust these estimations if needed. Ramses helps you to quickly estimate this time needed, and then helps you to make it as precise as you need. The unit used for estimations by Ramses is the day (which can be divided into smaller parts of a day if you need). Counting in days is precise enough for planning a production, and this way you don\u2019t need to know exactly how many hours are (actually) worked in a day. But when Ramses tracks the production , the data it gathers is actually in\u2026 Seconds. To make things simpler, the time spent on each task is actually displayed and calculated in hours . Time tracking can\u2019t be done in days like the estimation, as the user may work on many different tasks the same day. Consequently, Ramses needs to be able to convert the actual hours spent on a task to days to be able to compare this value with the estimation (and warn you if you\u2019re late). As it would not really make sense to define an arbitrary number of hours per work day (as Ramses measures actual time spent, but never knows if the user is eating, going to the toilets, sick or just working as he should without any break (that\u2019s a joke)), Ramses rounds all that data to fractionnal days; this makes the measurement of the time spent less precise for individual tasks, but works quite well globally for the whole project, and thus to compare with estimations; the algorithm should work no matter what the official duration of a working day is (if it\u2019s more than 5-6 hours and less than 12). Note There\u2019s no way with Ramses to link the production tracking data to individual users (meaning that there\u2019s no easy way to build statistics about users or compare their productivity). That\u2019s by design, don\u2019t ask for it.","title":"Estimations"},{"location":"pipeline/planning/#step-estimations","text":"For each step, it is possible to set a default estimation which will be used for all assets and shots. This estimation, usually set in days of work, can vary with the difficulty for the production of each specific asset or shot; Ramses lets you define an estimation for five predefined levels of difficulty: very easy , easy , medium , hard , very hard . This default estimation is used to automatically evaluate the time needed for the production of the whole step, depending on the assets or shots which have to be produced, at first based on a medium difficulty. Adjusting the difficulty per shot or asset will then automatically update the global estimation to raise the precision. For the production of shots , the estimations can also be optionnaly and automatically multiplied by the duration of the shot, so that the estimation can be made per second instead of per shot , and also by the number of assets used by the shot , for example to multiply the estimation by the number of characters in the shot. \u25b9 Step management in the Ramses Client Application .","title":"Step estimations"},{"location":"pipeline/planning/#asset-and-shots-estimations","text":"The estimation set by default by the step and automatically computed based on the number of assets, the duration and the difficulty can always be individually overriden for each shot and asset, for a more precise control on the estimations. This is done through the Production Tracking \u25b9 Production tracking in the Ramses Client Application .","title":"Asset and shots estimations"},{"location":"pipeline/planning/#schedule","text":"Based on the estimations, Ramses evaluates the number of days of work needed to complete the work on each step for all assets and shots. It is then easier to prepare the production planning and establish a schedule, by assigning days of work to users and steps . Ramses will keep track of the number of days already assigned and missing (or extra) days to help you plan the production. In case of lateness on the production of a step (shown by Ramses ), it means the quantity or the diffuclty of the work was underestimated; all that needs to be done is then to adjust the estimations at the step level to update all assets and shots estimations, then check if the schedule can still be respected, or assign more users or days of work to the step. \u25b9 Schedule panel in the Ramses Client Application .","title":"Schedule"},{"location":"pipeline/production/","text":"Production Tracking The asset table, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . Ramses keeps track of the whole production for you, by tracking each asset and each shot at each step of the production. This allows for a precise information about the production of the whole project, and Ramses can summarize all this information in nice graphics. Ramses measures the time spent on the production of each asset and each shot, and the user can set a completion ratio along with setting the state of the production for each step. These values are closely related to the estimations used for production planning and Ramses is able to measure the lateness of the production in real time. To help users track the production, users can comment each task, and each task can be assigned to a specific user . States States are part of assets and shots status , along with comments and estimations . They also define a percentage of completion of the work for the corresponding step , to be used by default when setting a production status to the specific state. They can be configured globally to be used everywhere there\u2019s a need to show a statuss. Each state is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. They also have a color to be used to display them in the user interface. By default, Ramses includes a few predefined states, and some of them cannot be removed as they are needed by Ramses automations. Others are examples and can be customized or removed. These are the predefined states: ID Name Completion Mandatory Description NO Nothing to do 0% Yes There\u2019s nothing to do at this step. STB Stand by 0% Yes Something is missing, let\u2019s wait a bit. TODO Ready to do 0% Yes This step is ready, one can work on this. QST Question 20% No More information is needed to continue working on this. WIP Work in progress 50% Yes This is currently in production. CHK Waiting for approval 80% No This is ready to be reviewed. RDR Rendering 90% No This is currently rendering, soon we\u2019ll be able to watch this beautiful work! CBB Could be better 95% No This works like that, but if possible it can still be improved. OK Finished 100% Yes This has been reviewed and validated. \u25b9 State management in the Ramses Client Application . Assets An Asset is produced independently from the shots and can be used in several shots. They are the characters, sets, props, and any other re-usable item in the production. The list of assets is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each asset is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Root \u2502 \u2514\u2500\u252c\u2500 04-ASSETS \u251c\u2500\u252c\u2500 Characters # An asset group \u2502 \u2502 \u2502 \u251c\u2500\u252c\u2500 PROJECTID_A_TRISTAN # An Asset \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_DESIGN # An asset production step \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_RIG \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_TEX \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_ISOLDE # An Asset \u2502 \u251c\u2500\u2500\u2500 Props # A Group of Assets \u2502 \u2514\u2500\u2500\u2500 Sets # A Group of Assets Tip Without using the Ramses Client Application , you can create assets by creating their folder in the default location in the project subfolder of the Ramses Tree . Each asset is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. They\u2019re grouped in Asset Groups to make them easier to sort, and produced through Asset Production Steps . They also have tags to be able to search for specific assets. \u25b9 Asset management in the Ramses Client Application . Shots A Shot is produced using assets and stored in a Sequence . The list of shots is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each shot is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Root \u2502 \u2514\u2500\u252c\u2500 05-SHOTS \u2502 \u251c\u2500\u252c\u2500 PROJECTID_S_01-001 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_ANIM # A shot production step \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_LIGHT \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_01-001_COMP \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-002 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-003 # A Shot \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_02-001 # A Shot Tip Without using the Ramses Client Application , you can create shots by creating their folder in the default location in the project subfolder of the Ramses Tree . Each shot is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. Each shot contains a list of assets which are needed for its production. Shots have a duration , usually shown either in seconds or frames, and the addition of all their duration is the duration of the project. \u25b9 Shot management in the Ramses Client Application . Production status of assets and shots All assets and shots have a production status, which is summarized in an asset table and a shot table in the Ramses Client Application . This status consists of a state , a comment and a completion ratio . Ramses also associates the time spent for the production of the item and the estimation to the status (read the Planning section for more information about estimations). All this information is added and summarized at the step level to show the completion for each step, each asset and each shot. Ramses also keeps track of the whole production at the project level with general statistics. Note There\u2019s no way with Ramses to link the production tracking data to individual users (meaning that there\u2019s no easy way to build statistics about users or compare their productivity). That\u2019s by design, don\u2019t ask for it. Ramses is also able to extract a lateness value from all the available information, available at all levels (shots, assets, steps and whole project). All the history of successive states, comments, completion ratio, etc. is always available. The combination of an asset or a shot and a step can be assigned to a specific user . For use with pipeline automations , status are also associated with specific versions of the files, and store the publication status. When using Ramses Add-ons , the state of a specific version is kept in the file name of the corresponding version file, thanks to the Ramses naming scheme \u25b9 Production tracking in the Ramses Client Application .","title":"Production tracking"},{"location":"pipeline/production/#production-tracking","text":"The asset table, as shown in the Ramses Client Application . Warning Ramses is still under active development , and this documentation is still being written. We strongly invite you to read the changelog to know what\u2019s going on, and especially to have a look at the known issues . Ramses keeps track of the whole production for you, by tracking each asset and each shot at each step of the production. This allows for a precise information about the production of the whole project, and Ramses can summarize all this information in nice graphics. Ramses measures the time spent on the production of each asset and each shot, and the user can set a completion ratio along with setting the state of the production for each step. These values are closely related to the estimations used for production planning and Ramses is able to measure the lateness of the production in real time. To help users track the production, users can comment each task, and each task can be assigned to a specific user .","title":"Production Tracking"},{"location":"pipeline/production/#states","text":"States are part of assets and shots status , along with comments and estimations . They also define a percentage of completion of the work for the corresponding step , to be used by default when setting a production status to the specific state. They can be configured globally to be used everywhere there\u2019s a need to show a statuss. Each state is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. They also have a color to be used to display them in the user interface. By default, Ramses includes a few predefined states, and some of them cannot be removed as they are needed by Ramses automations. Others are examples and can be customized or removed. These are the predefined states: ID Name Completion Mandatory Description NO Nothing to do 0% Yes There\u2019s nothing to do at this step. STB Stand by 0% Yes Something is missing, let\u2019s wait a bit. TODO Ready to do 0% Yes This step is ready, one can work on this. QST Question 20% No More information is needed to continue working on this. WIP Work in progress 50% Yes This is currently in production. CHK Waiting for approval 80% No This is ready to be reviewed. RDR Rendering 90% No This is currently rendering, soon we\u2019ll be able to watch this beautiful work! CBB Could be better 95% No This works like that, but if possible it can still be improved. OK Finished 100% Yes This has been reviewed and validated. \u25b9 State management in the Ramses Client Application .","title":"States"},{"location":"pipeline/production/#assets","text":"An Asset is produced independently from the shots and can be used in several shots. They are the characters, sets, props, and any other re-usable item in the production. The list of assets is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each asset is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Root \u2502 \u2514\u2500\u252c\u2500 04-ASSETS \u251c\u2500\u252c\u2500 Characters # An asset group \u2502 \u2502 \u2502 \u251c\u2500\u252c\u2500 PROJECTID_A_TRISTAN # An Asset \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_DESIGN # An asset production step \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_MOD \u2502 \u2502 \u251c\u2500\u2500\u2500 PROJECTID_A_TRISTAN_RIG \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_TRISTAN_TEX \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 PROJECTID_A_ISOLDE # An Asset \u2502 \u251c\u2500\u2500\u2500 Props # A Group of Assets \u2502 \u2514\u2500\u2500\u2500 Sets # A Group of Assets Tip Without using the Ramses Client Application , you can create assets by creating their folder in the default location in the project subfolder of the Ramses Tree . Each asset is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. They\u2019re grouped in Asset Groups to make them easier to sort, and produced through Asset Production Steps . They also have tags to be able to search for specific assets. \u25b9 Asset management in the Ramses Client Application .","title":"Assets"},{"location":"pipeline/production/#shots","text":"A Shot is produced using assets and stored in a Sequence . The list of shots is available and can be managed in the Ramses Client Application , under the project panel (for project admin users) , and by default each shot is represented by a folder in the Ramses Tree as shown below. # (inside the \"Projects\" folder of the Ramses main folder) \u250c PROJECTID # Root \u2502 \u2514\u2500\u252c\u2500 05-SHOTS \u2502 \u251c\u2500\u252c\u2500 PROJECTID_S_01-001 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_ANIM # A shot production step \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-001_LIGHT \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_01-001_COMP \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-002 # A Shot \u2502 \u251c\u2500\u2500\u2500 PROJECTID_S_01-003 # A Shot \u2502 \u2514\u2500\u2500\u2500 PROJECTID_S_02-001 # A Shot Tip Without using the Ramses Client Application , you can create shots by creating their folder in the default location in the project subfolder of the Ramses Tree . Each shot is represented by its name and ID . The ID is used in file and folder names in the Ramses Tree , while the name is used in the user interface. Each shot contains a list of assets which are needed for its production. Shots have a duration , usually shown either in seconds or frames, and the addition of all their duration is the duration of the project. \u25b9 Shot management in the Ramses Client Application .","title":"Shots"},{"location":"pipeline/production/#production-status-of-assets-and-shots","text":"All assets and shots have a production status, which is summarized in an asset table and a shot table in the Ramses Client Application . This status consists of a state , a comment and a completion ratio . Ramses also associates the time spent for the production of the item and the estimation to the status (read the Planning section for more information about estimations). All this information is added and summarized at the step level to show the completion for each step, each asset and each shot. Ramses also keeps track of the whole production at the project level with general statistics. Note There\u2019s no way with Ramses to link the production tracking data to individual users (meaning that there\u2019s no easy way to build statistics about users or compare their productivity). That\u2019s by design, don\u2019t ask for it. Ramses is also able to extract a lateness value from all the available information, available at all levels (shots, assets, steps and whole project). All the history of successive states, comments, completion ratio, etc. is always available. The combination of an asset or a shot and a step can be assigned to a specific user . For use with pipeline automations , status are also associated with specific versions of the files, and store the publication status. When using Ramses Add-ons , the state of a specific version is kept in the file name of the corresponding version file, thanks to the Ramses naming scheme \u25b9 Production tracking in the Ramses Client Application .","title":"Production status of assets and shots"}]}