{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ramses - The Rainbox Asset Management System Ramses is still under active development, and this documentation is still being written. See the source on GitHub . Ramses - The Rainbox Asset Management System Table of Contents License Software Icons and other graphical elements This Documentation Table of Contents Introduction (this page) Ramses Components Installation Ramses Server General Help Ramses Users Projects Steps Asset Groups Assets Sequences Shots Status History Status States File Types Applications Pipeline Ramses Tree : Files and Folders Naming scheme Folder structure Ramses Add-ons Development Introduction Files and folders Scripting API (Add-ons) Daemon API Server API Credits Changelog Licenses GNU GPL v3 GNU Free Documentation License Software The software this documentation is referring to is licensed under the GNU General Public License . Copyright (C) 2020 Nicolas Dufresne and Contributors. This program is free software; you can redistribute them and/or modify them under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program . If not, see http://www.gnu.org/licenses/ . Icons and other graphical elements All graphical elements, especially icons, are from RxUI by Nicolas Dufresne and RxLaboratory are licensed under CC BY-NC-SA 4.0 . Copyright (C) 2021 Nicolas Dufresne and Contributors. This Documentation Copyright (C) 2020 Nicolas Dufresne and Contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \u201c Documentation License \u201d.","title":"Ramses"},{"location":"#ramses-the-rainbox-asset-management-system","text":"Ramses is still under active development, and this documentation is still being written. See the source on GitHub . Ramses - The Rainbox Asset Management System Table of Contents License Software Icons and other graphical elements This Documentation","title":"Ramses - The Rainbox Asset Management System"},{"location":"#table-of-contents","text":"Introduction (this page) Ramses Components Installation Ramses Server General Help Ramses Users Projects Steps Asset Groups Assets Sequences Shots Status History Status States File Types Applications Pipeline Ramses Tree : Files and Folders Naming scheme Folder structure Ramses Add-ons Development Introduction Files and folders Scripting API (Add-ons) Daemon API Server API Credits Changelog Licenses GNU GPL v3 GNU Free Documentation","title":"Table of Contents"},{"location":"#license","text":"","title":"License"},{"location":"#software","text":"The software this documentation is referring to is licensed under the GNU General Public License . Copyright (C) 2020 Nicolas Dufresne and Contributors. This program is free software; you can redistribute them and/or modify them under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program . If not, see http://www.gnu.org/licenses/ .","title":"Software"},{"location":"#icons-and-other-graphical-elements","text":"All graphical elements, especially icons, are from RxUI by Nicolas Dufresne and RxLaboratory are licensed under CC BY-NC-SA 4.0 . Copyright (C) 2021 Nicolas Dufresne and Contributors.","title":"Icons and other graphical elements"},{"location":"#this-documentation","text":"Copyright (C) 2020 Nicolas Dufresne and Contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \u201c Documentation License \u201d.","title":"This Documentation"},{"location":"changelog/","text":"Changelog 0.0.0 Under active development\u2026","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#000","text":"Under active development\u2026","title":"0.0.0"},{"location":"credits/","text":"Credits Development Lead developpers Nicolas \u201cDuduf\u201d Dufresne Developpers and code contributors Lisa Lain\u00e9 Translations Third-party libraries and other code Documentation Text Nicolas Dufresne Pictures and Media Files Funding","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#development","text":"","title":"Development"},{"location":"credits/#lead-developpers","text":"Nicolas \u201cDuduf\u201d Dufresne","title":"Lead developpers"},{"location":"credits/#developpers-and-code-contributors","text":"Lisa Lain\u00e9","title":"Developpers and code contributors"},{"location":"credits/#translations","text":"","title":"Translations"},{"location":"credits/#third-party-libraries-and-other-code","text":"","title":"Third-party libraries and other code"},{"location":"credits/#documentation","text":"","title":"Documentation"},{"location":"credits/#text","text":"Nicolas Dufresne","title":"Text"},{"location":"credits/#pictures-and-media-files","text":"","title":"Pictures and Media Files"},{"location":"credits/#funding","text":"","title":"Funding"},{"location":"addons/","text":"Add-ons Ramses comes with some add-ons to be used in your creative applications ( Blender , Maya , After Effects \u2026). They are basic add-ons to demonstrate some capabilities of Ramses for file versionning and asset management, and can be used as templates to develop your own add-ons working with Ramses. They will be developed one after each other, and you\u2019re welcome to contribute with your own! Here are some guidelines and descriptions about how these add-ons should work. We\u2019re trying to apply the same guidelines to all host applications for a unified experience. These add-ons should use the provided Scripting API available at first in Python and Adobe ExtendsScript . Add-ons Introduction Available Commands Open Save Save new version Publish Retrieve version Publish as template Open template Import template Settings Open Ramses UI / UX Integrated commands UI Panel Settings Introduction Although the add-ons are primarily meant to be used in conjunction with the Ramses Client Application (which in turn may be connected to the Ramses Server ), they can also be used on their own. In which case not all functionnalities will be available; the differences are mentionned in this documentation. Available Commands Some of these commands manage files in the Ramses Tree , see the corresponding documentation . All commands except open Ramses and Settings should first: If the add-on is not set to offline by the user (in the settings) AND the path to the Client executable file is valid: Ping the Daemon (which answers with its version and some other information). If the ping did not work: Set to offline Try to launch the client. If the Daemon is accessible: Set to online If the daemon is not accessible: warn the user If the ping worked: set to online Open // TODO Save If the file is not a working file, but a version coming from the ramses_version subfolder (named restore-vXX ), runs Save new version instead of Save . If the file is a template (\u201ctemplate\u201d in the resource name, and in a temp dir) Asks for the name of the new asset/shot, its group, its sequence Creates the corresponding folder, Saves (as new version if the asset/shot already exists, with a warning) Else If the file is in the ramses_version folder or if its resource name contains restore-vXX . Runs Save new version . Else Saves the current file. Copies it to the ramses_versions subfolder, appending the current state and version number. If online Send the new status of the asset/shot for this step (version, date, state, comment, completion ratio) to the Ramses Client . See the naming scheme and folder structure for more information. Save new version If the file is in the ramses_version folder or if its resource name contains restore-vXX . Copies the current working file into the version folder, appending the state got from the Ramses client if available, or else just \u201cv\u201d, and the incremented version number. Saves the current file as the working file (in the working folder, and removing restore-XX from the resource name) Removes the current file (version file, keeps only the new working file) if it was not in a ramses_versions subfolder Else Saves the current file. Copies the current file to the ramses_versions subfolder, appending the current state and the incremented version number. If the client is available : sends the update command to the client, with the date, state and version of the current asset/shot. Publish Saves the current file. Copies it to the ramses_versions subfolder, appending the current state and the incremented version number. Saves as a new file into the published subfolder. If the client is available : sends the publish command to the client, with the date, state and version of the current asset/shot. Retrieve version Gets a specific version back from the ramses_versions subfolder. Copies the file to the asset/shot folder, adds restore-vXX to the resource name, where XX is the restored version number. Opens it. It is only when the file will be saved that this new copied file will be removed and the working file will be overwritten to a new version. Publish as template Saves the file in the corresponding step folder (in a \u201ctemplates\u201d subfolder), using a specific naming: PROJECTID_G_stepID_template-resourceName.ext (asks for overwrite if the file exists) Saves the file in a temp folder (to never overwrite a template when Ctrl+S) Open template Lists the available templates Opens the selected one Saves it in a temp folder Import template Lists the available templates Imports the selected one Settings Opens the settings editor of the Add-on. Open Ramses Opens the Ramses Client if available. Try to connect to the Daemon . Warns the user if not available/cannot connect to the Daemon . If the Daemon is available, sets the mode to \u201conline\u201d. If not, sets to \u201coffline\u201d. UI / UX Depending on the host application, the implementation and User Interface / User Experience of the add-ons may vary, but they should follow these guidelines as closely as possible. Integrated commands When possible, the commands should be integrated as seamlessly as possible in the host application, e.g. by adding or even replacing menu items for saving files, saving as., etc. Especially for the save command, the default save shortcut (generally [Ctrl] + [S] ) should be replaced by the save command for Ramses . Other save command shortcuts should be added, preferably the same for all add-ons: Save : [Ctrl] + [S] Save new version : [Ctrl] + [Alt] + [S] Publish : [Ctrl] + [Shift] + [P] These shortcuts have been chosen to avoid conflicts in most host applications but can be changed to something else if they\u2019re still conflicting with something important. UI Panel If possible, each Ramses Add-on should provide a UI panel integrated into the host software, but organized similarly in all add-ons, with specific variations to respect the host software UI guidelines. The panel must display buttons for all available commands. The panel must also provide a way to quickly set the current Project and Step , and show the opened asset or shot information: state, version, date, comment, completion ratio\u2026 This information is retrieved from the client application if available, or from the Ramses Tree if not. The panel and this information must be updated as soon as the opened file changes, or at least when the user interacts with it. Information available in the panel: Current user (online only) Current project Step Current shot or asset Containing asset group or sequence (sequence available only if online) Date of latest version (read only) Current state Current resource name Current version (read only) Completion ratio Is template (read only) If the client application is not available, the Project and Step information is displayed but cannot be changed. Comment is not available. Settings If the host application provides a way to display the settings of its add-ons, the settings should be located there (and the settings command should open this location if possible). If it does not, the Add-on must provide a dialog or a panel to let the user change the settings. These settings are: Location of the Ramses Client executable file ( .exe on Windows , .app on MacOS , .appimage or binary on Linux ) Listening port of the Ramses Daemon Note: the settings are saved in a shared location (user documents folder ?) between all add-ons so that they\u2019re configured only once. They\u2019re in an easy-to-edit JSON text file.","title":"Add-ons in applications"},{"location":"addons/#add-ons","text":"Ramses comes with some add-ons to be used in your creative applications ( Blender , Maya , After Effects \u2026). They are basic add-ons to demonstrate some capabilities of Ramses for file versionning and asset management, and can be used as templates to develop your own add-ons working with Ramses. They will be developed one after each other, and you\u2019re welcome to contribute with your own! Here are some guidelines and descriptions about how these add-ons should work. We\u2019re trying to apply the same guidelines to all host applications for a unified experience. These add-ons should use the provided Scripting API available at first in Python and Adobe ExtendsScript . Add-ons Introduction Available Commands Open Save Save new version Publish Retrieve version Publish as template Open template Import template Settings Open Ramses UI / UX Integrated commands UI Panel Settings","title":"Add-ons"},{"location":"addons/#introduction","text":"Although the add-ons are primarily meant to be used in conjunction with the Ramses Client Application (which in turn may be connected to the Ramses Server ), they can also be used on their own. In which case not all functionnalities will be available; the differences are mentionned in this documentation.","title":"Introduction"},{"location":"addons/#available-commands","text":"Some of these commands manage files in the Ramses Tree , see the corresponding documentation . All commands except open Ramses and Settings should first: If the add-on is not set to offline by the user (in the settings) AND the path to the Client executable file is valid: Ping the Daemon (which answers with its version and some other information). If the ping did not work: Set to offline Try to launch the client. If the Daemon is accessible: Set to online If the daemon is not accessible: warn the user If the ping worked: set to online","title":"Available Commands"},{"location":"addons/#open","text":"// TODO","title":"Open"},{"location":"addons/#save","text":"If the file is not a working file, but a version coming from the ramses_version subfolder (named restore-vXX ), runs Save new version instead of Save . If the file is a template (\u201ctemplate\u201d in the resource name, and in a temp dir) Asks for the name of the new asset/shot, its group, its sequence Creates the corresponding folder, Saves (as new version if the asset/shot already exists, with a warning) Else If the file is in the ramses_version folder or if its resource name contains restore-vXX . Runs Save new version . Else Saves the current file. Copies it to the ramses_versions subfolder, appending the current state and version number. If online Send the new status of the asset/shot for this step (version, date, state, comment, completion ratio) to the Ramses Client . See the naming scheme and folder structure for more information.","title":"Save"},{"location":"addons/#save-new-version","text":"If the file is in the ramses_version folder or if its resource name contains restore-vXX . Copies the current working file into the version folder, appending the state got from the Ramses client if available, or else just \u201cv\u201d, and the incremented version number. Saves the current file as the working file (in the working folder, and removing restore-XX from the resource name) Removes the current file (version file, keeps only the new working file) if it was not in a ramses_versions subfolder Else Saves the current file. Copies the current file to the ramses_versions subfolder, appending the current state and the incremented version number. If the client is available : sends the update command to the client, with the date, state and version of the current asset/shot.","title":"Save new version"},{"location":"addons/#publish","text":"Saves the current file. Copies it to the ramses_versions subfolder, appending the current state and the incremented version number. Saves as a new file into the published subfolder. If the client is available : sends the publish command to the client, with the date, state and version of the current asset/shot.","title":"Publish"},{"location":"addons/#retrieve-version","text":"Gets a specific version back from the ramses_versions subfolder. Copies the file to the asset/shot folder, adds restore-vXX to the resource name, where XX is the restored version number. Opens it. It is only when the file will be saved that this new copied file will be removed and the working file will be overwritten to a new version.","title":"Retrieve version"},{"location":"addons/#publish-as-template","text":"Saves the file in the corresponding step folder (in a \u201ctemplates\u201d subfolder), using a specific naming: PROJECTID_G_stepID_template-resourceName.ext (asks for overwrite if the file exists) Saves the file in a temp folder (to never overwrite a template when Ctrl+S)","title":"Publish as template"},{"location":"addons/#open-template","text":"Lists the available templates Opens the selected one Saves it in a temp folder","title":"Open template"},{"location":"addons/#import-template","text":"Lists the available templates Imports the selected one","title":"Import template"},{"location":"addons/#settings","text":"Opens the settings editor of the Add-on.","title":"Settings"},{"location":"addons/#open-ramses","text":"Opens the Ramses Client if available. Try to connect to the Daemon . Warns the user if not available/cannot connect to the Daemon . If the Daemon is available, sets the mode to \u201conline\u201d. If not, sets to \u201coffline\u201d.","title":"Open Ramses"},{"location":"addons/#ui-ux","text":"Depending on the host application, the implementation and User Interface / User Experience of the add-ons may vary, but they should follow these guidelines as closely as possible.","title":"UI / UX"},{"location":"addons/#integrated-commands","text":"When possible, the commands should be integrated as seamlessly as possible in the host application, e.g. by adding or even replacing menu items for saving files, saving as., etc. Especially for the save command, the default save shortcut (generally [Ctrl] + [S] ) should be replaced by the save command for Ramses . Other save command shortcuts should be added, preferably the same for all add-ons: Save : [Ctrl] + [S] Save new version : [Ctrl] + [Alt] + [S] Publish : [Ctrl] + [Shift] + [P] These shortcuts have been chosen to avoid conflicts in most host applications but can be changed to something else if they\u2019re still conflicting with something important.","title":"Integrated commands"},{"location":"addons/#ui-panel","text":"If possible, each Ramses Add-on should provide a UI panel integrated into the host software, but organized similarly in all add-ons, with specific variations to respect the host software UI guidelines. The panel must display buttons for all available commands. The panel must also provide a way to quickly set the current Project and Step , and show the opened asset or shot information: state, version, date, comment, completion ratio\u2026 This information is retrieved from the client application if available, or from the Ramses Tree if not. The panel and this information must be updated as soon as the opened file changes, or at least when the user interacts with it. Information available in the panel: Current user (online only) Current project Step Current shot or asset Containing asset group or sequence (sequence available only if online) Date of latest version (read only) Current state Current resource name Current version (read only) Completion ratio Is template (read only) If the client application is not available, the Project and Step information is displayed but cannot be changed. Comment is not available.","title":"UI Panel"},{"location":"addons/#settings_1","text":"If the host application provides a way to display the settings of its add-ons, the settings should be located there (and the settings command should open this location if possible). If it does not, the Add-on must provide a dialog or a panel to let the user change the settings. These settings are: Location of the Ramses Client executable file ( .exe on Windows , .app on MacOS , .appimage or binary on Linux ) Listening port of the Ramses Daemon Note: the settings are saved in a shared location (user documents folder ?) between all add-ons so that they\u2019re configured only once. They\u2019re in an easy-to-edit JSON text file.","title":"Settings"},{"location":"components/","text":"Ramses Components Ramses is a complete framework made of different components interacting together. This makes it very modular and scalable to any kind of production, from the freelancer working at home to the biggest studios. Ramses Components General Description Ramses Data Ramses Server Ramses Client and Daemon Ramses Add-ons Ramses Tree General Description The Ramses framework can be viewed as a hirerachical tree, going from the data stored by the Ramses Server up to the creative applications add-ons and the files and folder structure on the workstations. Ramses Data : all the meta-data is stored by Ramses in an SQL server. Ramses Server : this data is managed by a webserver, which reads and writes the data on demand from connected Ramses Clients . Ramses Client : the client is run on each workstation and is the central application and provides the main User Interface of Ramses . Ramses Daemon : the daemon is run by the client itself, and is a local server which is used as a bridge between creative applications and the client itself. It handles all communications and data with the applications add-ons. Ramses Add-ons : the add-ons are scripts to be used from inside the creative applications (e.g. Blender , Maya , After Effects \u2026) so that the artist does not have to leave his application to use Ramses . Ramses Tree : on the lowest level, Ramses manages the files and folder structure on the workstation (and/or clones on remote locations). The modularity of Ramses comes from the fact that children modules don\u2019t necessarily need the parent module, at least for their core functionnalities. For example, you can use the Ramses Client without the Ramses Server and Data , or you can even use the Ramses add-ons without the Ramses Client . But you can not skip levels, i.e. the Ramses Add-ons can not be used with the Ramses Server without having both the Ramses Client and Ramses Daemon . Ramses Data Most of the data used by Ramses is stored in SQL databases. When using the Ramses Server , the main data is stored in a remote SQL server; in its default implementation, the Ramses Server works with MySQL . The Ramses Client keeps a local copy of the data in a SQLite database. Ramses Server The Ramses Server is the interface between the client and the data. It is meant only to be used programmatically and it does not have any UI. It is a very standard REST web server written in PHP , exchanging data in JSON . This means the Ramses Server and its associated Ramses Data can be easily installed everywhere, on a workstation (with a standard web server), on a shared hosting or a private server, no matter the operating system. Installation of Ramses on a server is as simple as copying php files to the server, and adding a little information in the configuration file. Ramses Client and Daemon The client is the main Ramses application. It can be used without the Ramses Server , without losing any functionnality, apart from collaborative work. In this case, the data is stored locally. When the server is not available (e.g. loss of internet connection), the Ramses Client can still work offline, and synchronize the data as soon as it comes online later. The client is a native application ( Qt / C++ ), and is available on Linux , Windows and MacOS , which makes it fast and lightweight. It may be available later for Android . The client also runs the Ramses Daemon which is a local server which communicates with the Ramses Add-ons and shares the data with them. Ramses Add-ons The add-ons are scripts available inside the creative applications (e.g. Blender , Maya , After Effects \u2026). They could be used without the client, with limited functionnalities. In this case, data is retrieved from the Ramses Tree . The add-ons are in charge of file management and versionning, publishing, etc. Ramses Tree On the lowest level, Ramses handles all files and folders for the managed projects. It is able to retrieve missing data from the file structure, and missing files from clones on remote and backup locations. Both the Add-ons and the Client can manage the files and folders.","title":"Ramses components"},{"location":"components/#ramses-components","text":"Ramses is a complete framework made of different components interacting together. This makes it very modular and scalable to any kind of production, from the freelancer working at home to the biggest studios. Ramses Components General Description Ramses Data Ramses Server Ramses Client and Daemon Ramses Add-ons Ramses Tree","title":"Ramses Components"},{"location":"components/#general-description","text":"The Ramses framework can be viewed as a hirerachical tree, going from the data stored by the Ramses Server up to the creative applications add-ons and the files and folder structure on the workstations. Ramses Data : all the meta-data is stored by Ramses in an SQL server. Ramses Server : this data is managed by a webserver, which reads and writes the data on demand from connected Ramses Clients . Ramses Client : the client is run on each workstation and is the central application and provides the main User Interface of Ramses . Ramses Daemon : the daemon is run by the client itself, and is a local server which is used as a bridge between creative applications and the client itself. It handles all communications and data with the applications add-ons. Ramses Add-ons : the add-ons are scripts to be used from inside the creative applications (e.g. Blender , Maya , After Effects \u2026) so that the artist does not have to leave his application to use Ramses . Ramses Tree : on the lowest level, Ramses manages the files and folder structure on the workstation (and/or clones on remote locations). The modularity of Ramses comes from the fact that children modules don\u2019t necessarily need the parent module, at least for their core functionnalities. For example, you can use the Ramses Client without the Ramses Server and Data , or you can even use the Ramses add-ons without the Ramses Client . But you can not skip levels, i.e. the Ramses Add-ons can not be used with the Ramses Server without having both the Ramses Client and Ramses Daemon .","title":"General Description"},{"location":"components/#ramses-data","text":"Most of the data used by Ramses is stored in SQL databases. When using the Ramses Server , the main data is stored in a remote SQL server; in its default implementation, the Ramses Server works with MySQL . The Ramses Client keeps a local copy of the data in a SQLite database.","title":"Ramses Data"},{"location":"components/#ramses-server","text":"The Ramses Server is the interface between the client and the data. It is meant only to be used programmatically and it does not have any UI. It is a very standard REST web server written in PHP , exchanging data in JSON . This means the Ramses Server and its associated Ramses Data can be easily installed everywhere, on a workstation (with a standard web server), on a shared hosting or a private server, no matter the operating system. Installation of Ramses on a server is as simple as copying php files to the server, and adding a little information in the configuration file.","title":"Ramses Server"},{"location":"components/#ramses-client-and-daemon","text":"The client is the main Ramses application. It can be used without the Ramses Server , without losing any functionnality, apart from collaborative work. In this case, the data is stored locally. When the server is not available (e.g. loss of internet connection), the Ramses Client can still work offline, and synchronize the data as soon as it comes online later. The client is a native application ( Qt / C++ ), and is available on Linux , Windows and MacOS , which makes it fast and lightweight. It may be available later for Android . The client also runs the Ramses Daemon which is a local server which communicates with the Ramses Add-ons and shares the data with them.","title":"Ramses Client and Daemon"},{"location":"components/#ramses-add-ons","text":"The add-ons are scripts available inside the creative applications (e.g. Blender , Maya , After Effects \u2026). They could be used without the client, with limited functionnalities. In this case, data is retrieved from the Ramses Tree . The add-ons are in charge of file management and versionning, publishing, etc.","title":"Ramses Add-ons"},{"location":"components/#ramses-tree","text":"On the lowest level, Ramses handles all files and folders for the managed projects. It is able to retrieve missing data from the file structure, and missing files from clones on remote and backup locations. Both the Add-ons and the Client can manage the files and folders.","title":"Ramses Tree"},{"location":"dev/","text":"Developping and extending Ramses WIP Server Client Add-ons","title":"Introduction"},{"location":"dev/#developping-and-extending-ramses","text":"WIP Server Client Add-ons","title":"Developping and extending Ramses"},{"location":"dev/add-ons-reference/","text":"Scripting API reference Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. Scripting API reference Classes Implementation Include / Import Python Adobe ExtendScript Enumerated Values Python JavaScript / Adobe ExtendScript As this document is referring to different scripting languages, it uses general terms which may be different than what is actually used in specific languages. (TODO: ADD THE LINK TO THE GITHUB REPOS OF THE APIs / LINK TO GET THEM ON RXLAB.ORG) Classes This is the comprehensive list of available classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamAsset RamItem An asset. RamDaemonInterface The Class used to communicate with the Ramses Daemon RamFileType A File type (name and possible extensions) RamItem RamObject The base class for Shots and Assets. RamObject The base class for most of Ramses objects. RamPipe A pipe which connects two steps together in the production pipeline RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamSettings Gets and saves settings used by Ramses. RamShot RamItem A shot. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject A step in the production of the shots or assets of the project. RamUser RamObject The class representing users. Implementation Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API and may vary a bit. Include / Import Python Use your usual preferred way to import the module. Then, the unique Ramses instance is available as Ramses.instance . from ramses import * myRamses = Ramses . instance theSettings = myRamses . settings myShot = RamShot . getFromPath ( \"path/to/the/shot\" ) aNewStatus = RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ) myShot . setStatus ( aNewStatus , myRamses . currentStep ()) # or import ramses as ram myRamses = ram . Ramses . instance theSettings = myRamses . settings () myShot = ram . RamShot . getFromPath ( \"path/to/the/shot\" ) aNewStatus = ram . RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ) myShot . setStatus ( aNewStatus , myRamses . currentStep ()) Adobe ExtendScript Just include the file the usual way. Then, the unique Ramses instance is available as Ramses.instance . # include ramses . jsxinc var myRamses = Ramses . instance ; var theSettings = myRamses . settings (); var myShot = RamShot . getFromPath ( \"path/to/the/shot\" ); var aNewStatus = new RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ); myShot . setStatus ( aNewStatus , myRamses . currentStep ()); Enumerated Values Enumerated values (a.k.a. Constants ) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple color.RED , or shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). In the previous examples, one could have color.RED is [255,0,0] . Python Enumerated values are public static attributes of a containing class. They\u2019re declared like this: class Group (): VALUE_1 = 0 VALUE_2 = 1 VALUE_3 = 2 # Example: class Color (): RED = [ 255 , 0 , 0 ] GREEN = [ 0 , 255 , 0 ] BLUE = [ 0 , 0 , 255 ] And they\u2019re used like this: myVar = Group.VALUE_1 myColor = Color.RED JavaScript / Adobe ExtendScript Enumerated values are attributes in simple objects. They\u2019re declared like this: var Group = { VALUE_1 : 0 VALUE_2 : 1 VALUE_3 : 2 }; // Example: var Color = { RED : [ 255 , 0 , 0 ] GREEN : [ 0 , 255 , 0 ] BLUE : [ 0 , 0 , 255 ] }; And they\u2019re used like this: var myVar = Group.VALUE_1; var myColor = Color.RED;","title":"Reference"},{"location":"dev/add-ons-reference/#scripting-api-reference","text":"Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. Scripting API reference Classes Implementation Include / Import Python Adobe ExtendScript Enumerated Values Python JavaScript / Adobe ExtendScript As this document is referring to different scripting languages, it uses general terms which may be different than what is actually used in specific languages. (TODO: ADD THE LINK TO THE GITHUB REPOS OF THE APIs / LINK TO GET THEM ON RXLAB.ORG)","title":"Scripting API reference"},{"location":"dev/add-ons-reference/#classes","text":"This is the comprehensive list of available classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamAsset RamItem An asset. RamDaemonInterface The Class used to communicate with the Ramses Daemon RamFileType A File type (name and possible extensions) RamItem RamObject The base class for Shots and Assets. RamObject The base class for most of Ramses objects. RamPipe A pipe which connects two steps together in the production pipeline RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamSettings Gets and saves settings used by Ramses. RamShot RamItem A shot. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject A step in the production of the shots or assets of the project. RamUser RamObject The class representing users.","title":"Classes"},{"location":"dev/add-ons-reference/#implementation","text":"Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API and may vary a bit.","title":"Implementation"},{"location":"dev/add-ons-reference/#include-import","text":"","title":"Include / Import"},{"location":"dev/add-ons-reference/#python","text":"Use your usual preferred way to import the module. Then, the unique Ramses instance is available as Ramses.instance . from ramses import * myRamses = Ramses . instance theSettings = myRamses . settings myShot = RamShot . getFromPath ( \"path/to/the/shot\" ) aNewStatus = RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ) myShot . setStatus ( aNewStatus , myRamses . currentStep ()) # or import ramses as ram myRamses = ram . Ramses . instance theSettings = myRamses . settings () myShot = ram . RamShot . getFromPath ( \"path/to/the/shot\" ) aNewStatus = ram . RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ) myShot . setStatus ( aNewStatus , myRamses . currentStep ())","title":"Python"},{"location":"dev/add-ons-reference/#adobe-extendscript","text":"Just include the file the usual way. Then, the unique Ramses instance is available as Ramses.instance . # include ramses . jsxinc var myRamses = Ramses . instance ; var theSettings = myRamses . settings (); var myShot = RamShot . getFromPath ( \"path/to/the/shot\" ); var aNewStatus = new RamStatus ( myRamses . state ( \"WIP\" ), myRamses . currentUser (), \"A comment\" ); myShot . setStatus ( aNewStatus , myRamses . currentStep ());","title":"Adobe ExtendScript"},{"location":"dev/add-ons-reference/#enumerated-values","text":"Enumerated values (a.k.a. Constants ) are predefined sets of values to be used in specific methods. Their name is in CAPITAL_SNAKE_CASE, and they\u2019re grouped together by type (for exemple color.RED , or shape.RECTANGLE ). The value itself can be of any type (array, string, number\u2026). In the previous examples, one could have color.RED is [255,0,0] .","title":"Enumerated Values"},{"location":"dev/add-ons-reference/#python_1","text":"Enumerated values are public static attributes of a containing class. They\u2019re declared like this: class Group (): VALUE_1 = 0 VALUE_2 = 1 VALUE_3 = 2 # Example: class Color (): RED = [ 255 , 0 , 0 ] GREEN = [ 0 , 255 , 0 ] BLUE = [ 0 , 0 , 255 ] And they\u2019re used like this: myVar = Group.VALUE_1 myColor = Color.RED","title":"Python"},{"location":"dev/add-ons-reference/#javascript-adobe-extendscript","text":"Enumerated values are attributes in simple objects. They\u2019re declared like this: var Group = { VALUE_1 : 0 VALUE_2 : 1 VALUE_3 : 2 }; // Example: var Color = { RED : [ 255 , 0 , 0 ] GREEN : [ 0 , 255 , 0 ] BLUE : [ 0 , 0 , 255 ] }; And they\u2019re used like this: var myVar = Group.VALUE_1; var myColor = Color.RED;","title":"JavaScript / Adobe ExtendScript"},{"location":"dev/add-ons-reference/ram_asset/","text":"RamAsset A class representing an asset. Inherits: RamItem RamAsset Attributes Static Methods Methods API Dev notes Notes about the methods assetGroup() tags() Attributes Attribute Type Default Description Static Methods Method Arguments Description getFromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given path. The path can be any file or folder path from the asset (a version file, a preview file, etc) Methods Method Arguments Description constructor string : assetName , string : assetShortName , string : assetFolder , string : assetGroup = \"\" , string : tags = \"\" tags \u25b9 list of string Some tags describing the asset. An empty string if the Daemon is not available. group \u25b9 string The name of group containing this asset. API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Notes about the methods assetGroup() The asset group should always be retrived from the folders; only if for any reason the group name can\u2019t be retrived from the folders, the private attribute _group is returned. This private attribute is set by the constructor, passed to it from the data got by the Daemon . tags() Tags are not available when the Daemon is offline. In this case, the method should return an empty string. The implementation is simple: tags are stored in the private _tags attrbibute by the constructor: the tags should be passed to the constructor when the asset is constructed from the Daemon data.","title":"RamAsset"},{"location":"dev/add-ons-reference/ram_asset/#ramasset","text":"A class representing an asset. Inherits: RamItem RamAsset Attributes Static Methods Methods API Dev notes Notes about the methods assetGroup() tags()","title":"RamAsset"},{"location":"dev/add-ons-reference/ram_asset/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_asset/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given path. The path can be any file or folder path from the asset (a version file, a preview file, etc)","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_asset/#methods","text":"Method Arguments Description constructor string : assetName , string : assetShortName , string : assetFolder , string : assetGroup = \"\" , string : tags = \"\" tags \u25b9 list of string Some tags describing the asset. An empty string if the Daemon is not available. group \u25b9 string The name of group containing this asset.","title":"Methods"},{"location":"dev/add-ons-reference/ram_asset/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_asset/#notes-about-the-methods","text":"","title":"Notes about the methods"},{"location":"dev/add-ons-reference/ram_asset/#assetgroup","text":"The asset group should always be retrived from the folders; only if for any reason the group name can\u2019t be retrived from the folders, the private attribute _group is returned. This private attribute is set by the constructor, passed to it from the data got by the Daemon .","title":"assetGroup()"},{"location":"dev/add-ons-reference/ram_asset/#tags","text":"Tags are not available when the Daemon is offline. In this case, the method should return an empty string. The implementation is simple: tags are stored in the private _tags attrbibute by the constructor: the tags should be passed to the constructor when the asset is constructed from the Daemon data.","title":"tags()"},{"location":"dev/add-ons-reference/ram_daemon_interface/","text":"RamDaemonInterface The low-level Class used to communicate with the Ramses Daemon. This is a simple wrapper for the Daemon API . Note You should not need this class as all communications are automatically handled by the other classes. There should be only one instance of the Daemon Interface , available with the Ramses.instance.daemonInterface() method. RamDaemonInterface Attributes Static Methods Examples Methods Implementation Python JavaScript / ExtendScript Attributes Attribute Type Default Description port integer 18185 Listening port of the Ramses Daemon . Set by RamSettings address string \"localhost\" The IP or host name of the Ramses Daemon . Should never be changed unless you know what you\u2019re doing. By default, the Daemon only listens to localhost / 127.0.01 Static Methods Method Arguments Description Dev Notes ckeckReply \u25b9 boolean dict : reply Checks if the reply returned by a RamDaemonInterface instance is accepted, successful and has some content. Examples checkReply # Python daemon = Ramses . instance . daemonInterface () reply = daemon . getProjects () # Call from the instance if RamDaemonInterface . checkReply ( reply ): # Call from the class, it's a static method doSomething ( reply [ 'content' ]) else : print ( reply [ 'message' ]) // JavaScript var daemon = Ramses . instance . daemonInterface (); var reply = daemon . getProjects (); // Call from the instance if ( RamDaemonInterface . checkReply ( reply ) ) { // Call from the class, it's a static method doSomething ( reply [ 'content' ]); } else { alert ( reply [ 'message' ]); } Methods Please refer to the Daemon API reference for more information about these methods. These methods return the reply of the Daemon converted from JSON to an object, dict, structure, or whatever best suits the language in which the add-on is implemented. Method Arguments Description Dev Notes constructor integer : port = 18185 daemonVersion \u25b9 string The current version of the Daemon TODO: change the ping method to store the version in a private attribute getAssets \u25b9 Object / Dict Gets the list of the assets for the current project getAssetGroups \u25b9 Object / Dict* Gets the list of the asset groups for the current project TODO Daemon getCurrentProject \u25b9 Object / Dict Gets the current project getCurrentStatus \u25b9 Object / Dict string : itemShortName , string : itemName , string : itemType = \"SHOT\" Gets the list of status (one per step) for the item. itemType must be one of: \"SHOT\" or \"ASSET\" TODO Daemon getCurrentUser \u25b9 Object / Dict Gets the current user getProjects \u25b9 Object / Dict Gets the list of available projects getPipes \u25b9 Object / Dict Gets the list of pipes for the current project TODO getShots \u25b9 Object / Dict string : filter = \"\" Gets the list of the shots for the current project. Filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard \"*\" TODO Daemon getStates \u25b9 Object / Dict Gets the list of available states getSteps \u25b9 Object / Dict Gets the list of the steps for the current project online \u25b9 boolean True if the Daemon is available ping \u25b9 Object / Dict Gets the version and current user of the Ramses Daemon publishAsset \u25b9 Object / Dict TODO publishShot \u25b9 Object / Dict TODO raiseWindow Raises the Ramses Client application main window setCurrentProject \u25b9 Object / Dict string : shortName Sets the current project updateShotStatus \u25b9 Object / Dict TODO updateAssetStatus \u25b9 Object / Dict TODO Implementation Python In Python, the methods from this class return a dict as constructed from the JSON reply of the Daemon using the standard json.loads( str ) method. JavaScript / ExtendScript In JS, the methods from this class return a standard JS object as constructed from the JSON reply of the Daemon using the standard json2 library.","title":"RamDaemonInterface"},{"location":"dev/add-ons-reference/ram_daemon_interface/#ramdaemoninterface","text":"The low-level Class used to communicate with the Ramses Daemon. This is a simple wrapper for the Daemon API . Note You should not need this class as all communications are automatically handled by the other classes. There should be only one instance of the Daemon Interface , available with the Ramses.instance.daemonInterface() method. RamDaemonInterface Attributes Static Methods Examples Methods Implementation Python JavaScript / ExtendScript","title":"RamDaemonInterface"},{"location":"dev/add-ons-reference/ram_daemon_interface/#attributes","text":"Attribute Type Default Description port integer 18185 Listening port of the Ramses Daemon . Set by RamSettings address string \"localhost\" The IP or host name of the Ramses Daemon . Should never be changed unless you know what you\u2019re doing. By default, the Daemon only listens to localhost / 127.0.01","title":"Attributes"},{"location":"dev/add-ons-reference/ram_daemon_interface/#static-methods","text":"Method Arguments Description Dev Notes ckeckReply \u25b9 boolean dict : reply Checks if the reply returned by a RamDaemonInterface instance is accepted, successful and has some content.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_daemon_interface/#examples","text":"checkReply # Python daemon = Ramses . instance . daemonInterface () reply = daemon . getProjects () # Call from the instance if RamDaemonInterface . checkReply ( reply ): # Call from the class, it's a static method doSomething ( reply [ 'content' ]) else : print ( reply [ 'message' ]) // JavaScript var daemon = Ramses . instance . daemonInterface (); var reply = daemon . getProjects (); // Call from the instance if ( RamDaemonInterface . checkReply ( reply ) ) { // Call from the class, it's a static method doSomething ( reply [ 'content' ]); } else { alert ( reply [ 'message' ]); }","title":"Examples"},{"location":"dev/add-ons-reference/ram_daemon_interface/#methods","text":"Please refer to the Daemon API reference for more information about these methods. These methods return the reply of the Daemon converted from JSON to an object, dict, structure, or whatever best suits the language in which the add-on is implemented. Method Arguments Description Dev Notes constructor integer : port = 18185 daemonVersion \u25b9 string The current version of the Daemon TODO: change the ping method to store the version in a private attribute getAssets \u25b9 Object / Dict Gets the list of the assets for the current project getAssetGroups \u25b9 Object / Dict* Gets the list of the asset groups for the current project TODO Daemon getCurrentProject \u25b9 Object / Dict Gets the current project getCurrentStatus \u25b9 Object / Dict string : itemShortName , string : itemName , string : itemType = \"SHOT\" Gets the list of status (one per step) for the item. itemType must be one of: \"SHOT\" or \"ASSET\" TODO Daemon getCurrentUser \u25b9 Object / Dict Gets the current user getProjects \u25b9 Object / Dict Gets the list of available projects getPipes \u25b9 Object / Dict Gets the list of pipes for the current project TODO getShots \u25b9 Object / Dict string : filter = \"\" Gets the list of the shots for the current project. Filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard \"*\" TODO Daemon getStates \u25b9 Object / Dict Gets the list of available states getSteps \u25b9 Object / Dict Gets the list of the steps for the current project online \u25b9 boolean True if the Daemon is available ping \u25b9 Object / Dict Gets the version and current user of the Ramses Daemon publishAsset \u25b9 Object / Dict TODO publishShot \u25b9 Object / Dict TODO raiseWindow Raises the Ramses Client application main window setCurrentProject \u25b9 Object / Dict string : shortName Sets the current project updateShotStatus \u25b9 Object / Dict TODO updateAssetStatus \u25b9 Object / Dict TODO","title":"Methods"},{"location":"dev/add-ons-reference/ram_daemon_interface/#implementation","text":"","title":"Implementation"},{"location":"dev/add-ons-reference/ram_daemon_interface/#python","text":"In Python, the methods from this class return a dict as constructed from the JSON reply of the Daemon using the standard json.loads( str ) method.","title":"Python"},{"location":"dev/add-ons-reference/ram_daemon_interface/#javascript-extendscript","text":"In JS, the methods from this class return a standard JS object as constructed from the JSON reply of the Daemon using the standard json2 library.","title":"JavaScript / ExtendScript"},{"location":"dev/add-ons-reference/ram_filetype/","text":"RamFileType A File type. File types are typically used with RamPipe . Inherits: RamObject RamFileType Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : name , string : shortName , list of strings : extensions extensions \u25b9 list of string The extensions which can be used for this file type, including the \u201c.\u201d ____","title":"RamFileType"},{"location":"dev/add-ons-reference/ram_filetype/#ramfiletype","text":"A File type. File types are typically used with RamPipe . Inherits: RamObject RamFileType Attributes Methods","title":"RamFileType"},{"location":"dev/add-ons-reference/ram_filetype/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_filetype/#methods","text":"Method Arguments Description constructor string : name , string : shortName , list of strings : extensions extensions \u25b9 list of string The extensions which can be used for this file type, including the \u201c.\u201d ____","title":"Methods"},{"location":"dev/add-ons-reference/ram_item/","text":"RamItem Base class for RamAsset and RamShot . An item of the project, either an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset RamItem Attributes Methods API Dev notes Notes about the methods folderPath() Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : itemName string : itemShortName string : itemFolder = \"\" currentStatus \u25b9 RamStatus RamStep or string : step string : resource = \"\" The current status for the given step folderPath \u25b9 string RamStep or string : step = \"\" The absolute path to the folder containing the asset, or to the step subfolder if provided latestVersion \u25b9 integer RamStep or string : step string : resource = \"\" string : stateId = wip Returns the highest version number for the given state (wip, pub\u2026). previewFolderPath \u25b9 string RamStep or string : step Gets the path to the preview folder. Paths are relative to the root of the item folder. previewFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the preview folder. Paths are relative to the root of the item folder. publishedFolderPath \u25b9 string RamStep or string : step Gets the path to the publish folder. Paths are relative to the root of the item folder. publishedFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. versionFolderPath \u25b9 string RamStep : step Path to the version folder relative to the item root folder versionFilePath \u25b9 string RamStep : step string : resource = \"\" Latest version file path relative to the item root folder wipFolderPath \u25b9 string RamStep or string : step Path to the WIP folder relative to the item root folder wipFilePath \u25b9 string RamStep or string : step string : resource = \"\" Current wip file path relative to the item root folder isPublished \u25b9 bool RamStep : step string : resource = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.publishedFilePaths(step, resource)) > 0 setStatus RamStatus : status RamStep : step Sets the current status for the given step status \u25b9 RamStatus RamStep : step Gets the current status for the given step API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Notes about the methods folderPath() The folderPath methods checks if the folder is already available in the private attribute _folderPath . If so, it is simply returned. If _folderPath is an empty string, it has to be set before it is returned: the path has to be built from the step short name, the item short name, and the project folder (given by the Ramses instance if it is available).","title":"RamItem"},{"location":"dev/add-ons-reference/ram_item/#ramitem","text":"Base class for RamAsset and RamShot . An item of the project, either an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset RamItem Attributes Methods API Dev notes Notes about the methods folderPath()","title":"RamItem"},{"location":"dev/add-ons-reference/ram_item/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_item/#methods","text":"Method Arguments Description constructor string : itemName string : itemShortName string : itemFolder = \"\" currentStatus \u25b9 RamStatus RamStep or string : step string : resource = \"\" The current status for the given step folderPath \u25b9 string RamStep or string : step = \"\" The absolute path to the folder containing the asset, or to the step subfolder if provided latestVersion \u25b9 integer RamStep or string : step string : resource = \"\" string : stateId = wip Returns the highest version number for the given state (wip, pub\u2026). previewFolderPath \u25b9 string RamStep or string : step Gets the path to the preview folder. Paths are relative to the root of the item folder. previewFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the preview folder. Paths are relative to the root of the item folder. publishedFolderPath \u25b9 string RamStep or string : step Gets the path to the publish folder. Paths are relative to the root of the item folder. publishedFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. versionFolderPath \u25b9 string RamStep : step Path to the version folder relative to the item root folder versionFilePath \u25b9 string RamStep : step string : resource = \"\" Latest version file path relative to the item root folder wipFolderPath \u25b9 string RamStep or string : step Path to the WIP folder relative to the item root folder wipFilePath \u25b9 string RamStep or string : step string : resource = \"\" Current wip file path relative to the item root folder isPublished \u25b9 bool RamStep : step string : resource = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.publishedFilePaths(step, resource)) > 0 setStatus RamStatus : status RamStep : step Sets the current status for the given step status \u25b9 RamStatus RamStep : step Gets the current status for the given step","title":"Methods"},{"location":"dev/add-ons-reference/ram_item/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_item/#notes-about-the-methods","text":"","title":"Notes about the methods"},{"location":"dev/add-ons-reference/ram_item/#folderpath","text":"The folderPath methods checks if the folder is already available in the private attribute _folderPath . If so, it is simply returned. If _folderPath is an empty string, it has to be set before it is returned: the path has to be built from the step short name, the item short name, and the project folder (given by the Ramses instance if it is available).","title":"folderPath()"},{"location":"dev/add-ons-reference/ram_object/","text":"RamObject The base class for most of Ramses objects. Inherited by: RamItem , RamProject , RamState , RamStep , RamUser RamObject Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : objectName string : objectShortName name \u25b9 string shortName \u25b9 string","title":"RamObject"},{"location":"dev/add-ons-reference/ram_object/#ramobject","text":"The base class for most of Ramses objects. Inherited by: RamItem , RamProject , RamState , RamStep , RamUser RamObject Attributes Methods","title":"RamObject"},{"location":"dev/add-ons-reference/ram_object/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_object/#methods","text":"Method Arguments Description constructor string : objectName string : objectShortName name \u25b9 string shortName \u25b9 string","title":"Methods"},{"location":"dev/add-ons-reference/ram_pipe/","text":"RamPipe A pipe which connects two steps together in the production pipeline. The pipe goes from the output step (which exports data into a specific file type) to the input step (which imports that data). RamPipe Attributes Methods API Dev notes Private Static Methods Examples Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : inputStepShortName , string : outputStepShortName , RamFileType : fileType inputStepShortName \u25b9 string The short name of the input step outputStepShortName \u25b9 string The short name of the output step fileType \u25b9 RamFileType The file type used through the pipe API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Private Static Methods Method Arguments Description createFromDaemonObj \u25b9 RamPipe dict : daemonReplyObj Use this method to construct a RamPipe with an object got from the Daemon listFromDaemonReply \u25b9 list of RamPipe list : daemonReplyContent Use this method to construct the list of RamPipe got from the Daemon reply content using RamDaemonInterface.getPipes() This methods just loops through all objects in the list given as an argument, and use createFromDaemonObj(obj) on them. Examples # Python ramses = Ramses . instance daemonReply = ramses . daemonInterface () . getPipes () content = daemonReply [ 'content' ] pipes = RamPipe . listFromDaemonReply ( content ) # A list of RamPipe aPipe = pipes [ 0 ] # The first RamPipe","title":"RamPipe"},{"location":"dev/add-ons-reference/ram_pipe/#rampipe","text":"A pipe which connects two steps together in the production pipeline. The pipe goes from the output step (which exports data into a specific file type) to the input step (which imports that data). RamPipe Attributes Methods API Dev notes Private Static Methods Examples","title":"RamPipe"},{"location":"dev/add-ons-reference/ram_pipe/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_pipe/#methods","text":"Method Arguments Description constructor string : inputStepShortName , string : outputStepShortName , RamFileType : fileType inputStepShortName \u25b9 string The short name of the input step outputStepShortName \u25b9 string The short name of the output step fileType \u25b9 RamFileType The file type used through the pipe","title":"Methods"},{"location":"dev/add-ons-reference/ram_pipe/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_pipe/#private-static-methods","text":"Method Arguments Description createFromDaemonObj \u25b9 RamPipe dict : daemonReplyObj Use this method to construct a RamPipe with an object got from the Daemon listFromDaemonReply \u25b9 list of RamPipe list : daemonReplyContent Use this method to construct the list of RamPipe got from the Daemon reply content using RamDaemonInterface.getPipes() This methods just loops through all objects in the list given as an argument, and use createFromDaemonObj(obj) on them.","title":"Private Static Methods"},{"location":"dev/add-ons-reference/ram_pipe/#examples","text":"# Python ramses = Ramses . instance daemonReply = ramses . daemonInterface () . getPipes () content = daemonReply [ 'content' ] pipes = RamPipe . listFromDaemonReply ( content ) # A list of RamPipe aPipe = pipes [ 0 ] # The first RamPipe","title":"Examples"},{"location":"dev/add-ons-reference/ram_project/","text":"RamProject A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject RamProject Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : projectName string : projectShortName string : projectPath absolutePath \u25b9 str string : relativePath Builds an absolute path from a path relative to the project path asset \u25b9 RamAsset string : assetShortName Gets an asset with its short name. assets \u25b9 list of RamAsset string : groupName = \"\" Available assets in this project and group. If groupName is an empty string, returns all assets. assetGroups \u25b9 list of string Available asset groups in this project pipes \u25b9 list of RamPipe Available pipes in this project inputPipes \u25b9 list of RamPipe string : inputStepShortName Gets all pipes using this step as input outputPipes \u25b9 list of RamPipe string : outputStepShortName Gets all pipes using this step as output shot \u25b9 RamShot string : shotShortName Gets a shot with its short name. shots \u25b9 RamShot Available shots in this project step \u25b9 RamStep string : stepShortName Gets a step with its short name. steps \u25b9 list of RamStep enumerated value : type = RamStep.ALL Available steps in this project. Use type to filter the results. One of: RamStep.ALL , RamStep.ASSET_PODUCTION , RamStep.SHOT_PRODUCTION , RamStep.PRE_PRODUCTION , RamStep.PRODUCTION , RamStep.POST_PRODUCTION . RamStep.PRODUCTION represents a combination of SHOT and ASSET","title":"RamProject"},{"location":"dev/add-ons-reference/ram_project/#ramproject","text":"A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject RamProject Attributes Methods","title":"RamProject"},{"location":"dev/add-ons-reference/ram_project/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_project/#methods","text":"Method Arguments Description constructor string : projectName string : projectShortName string : projectPath absolutePath \u25b9 str string : relativePath Builds an absolute path from a path relative to the project path asset \u25b9 RamAsset string : assetShortName Gets an asset with its short name. assets \u25b9 list of RamAsset string : groupName = \"\" Available assets in this project and group. If groupName is an empty string, returns all assets. assetGroups \u25b9 list of string Available asset groups in this project pipes \u25b9 list of RamPipe Available pipes in this project inputPipes \u25b9 list of RamPipe string : inputStepShortName Gets all pipes using this step as input outputPipes \u25b9 list of RamPipe string : outputStepShortName Gets all pipes using this step as output shot \u25b9 RamShot string : shotShortName Gets a shot with its short name. shots \u25b9 RamShot Available shots in this project step \u25b9 RamStep string : stepShortName Gets a step with its short name. steps \u25b9 list of RamStep enumerated value : type = RamStep.ALL Available steps in this project. Use type to filter the results. One of: RamStep.ALL , RamStep.ASSET_PODUCTION , RamStep.SHOT_PRODUCTION , RamStep.PRE_PRODUCTION , RamStep.PRODUCTION , RamStep.POST_PRODUCTION . RamStep.PRODUCTION represents a combination of SHOT and ASSET","title":"Methods"},{"location":"dev/add-ons-reference/ram_settings/","text":"RamSettings Gets and saves settings used by Ramses. To get a setting, just get the corresponding attribute. To change a setting temporarily, just set the corresponding attribute. If you want the change to be permanent (i.e. keep the setting for the next sessions), call the save() method. By default, settings are saved in a ramses_addons_settings.json file, in the user\u2019s OS specific settings folder: Linux: ~/.config/RxLaboratory/Ramses/ Windows: %appdata%/RxLaboratory/Ramses/ MacOS: ? There is only one instance of RamSettings, available with the Ramses.instance.settings() method RamSettings Attributes Methods API Dev notes Private Attributes FolderNames Attributes Examples Attributes Attribute Type Default Description autoConnect boolean true Wether to always try to (re)connect to the Daemon if offline. ramsesClientPath string os-specific Location of the Ramses Client executable file (.exe on Windows, .app on MacOS, .appimage or binary on Linux) ramsesClientPort integer 18185 Listening port of the Ramses Daemon folderPath string os-specific Read-only. The folder path to the settings filePath string os-specific Read-only. The file path to the settings Methods Method Arguments Description save Saves the current settings to the disk. API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Private Attributes Attribute Type Default Description folderNames FolderNames A simple class containing the common names for subfolders. defaultStates list of RamState The list of states to use if the Daemon is not available. FolderNames Attributes FolderNames is a simple class which contains common names for subfolders. Attribute Type Default Description preview string \u201d_preview\u201d publish string \u201d_published\u201d versions string \u201d_versions\u201d userConfig string \u201cConfig\u201d stepTemplates string \u201cTemplates\u201d Examples ramses = Ramses . instance settings = ramses . settings theAsset = RamAsset ( \"thing\" , \"stuff\" ) thePreviewFolder = theAsset . folderPath () + \"/\" + settings . folderNames . preview","title":"RamSettings"},{"location":"dev/add-ons-reference/ram_settings/#ramsettings","text":"Gets and saves settings used by Ramses. To get a setting, just get the corresponding attribute. To change a setting temporarily, just set the corresponding attribute. If you want the change to be permanent (i.e. keep the setting for the next sessions), call the save() method. By default, settings are saved in a ramses_addons_settings.json file, in the user\u2019s OS specific settings folder: Linux: ~/.config/RxLaboratory/Ramses/ Windows: %appdata%/RxLaboratory/Ramses/ MacOS: ? There is only one instance of RamSettings, available with the Ramses.instance.settings() method RamSettings Attributes Methods API Dev notes Private Attributes FolderNames Attributes Examples","title":"RamSettings"},{"location":"dev/add-ons-reference/ram_settings/#attributes","text":"Attribute Type Default Description autoConnect boolean true Wether to always try to (re)connect to the Daemon if offline. ramsesClientPath string os-specific Location of the Ramses Client executable file (.exe on Windows, .app on MacOS, .appimage or binary on Linux) ramsesClientPort integer 18185 Listening port of the Ramses Daemon folderPath string os-specific Read-only. The folder path to the settings filePath string os-specific Read-only. The file path to the settings","title":"Attributes"},{"location":"dev/add-ons-reference/ram_settings/#methods","text":"Method Arguments Description save Saves the current settings to the disk.","title":"Methods"},{"location":"dev/add-ons-reference/ram_settings/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_settings/#private-attributes","text":"Attribute Type Default Description folderNames FolderNames A simple class containing the common names for subfolders. defaultStates list of RamState The list of states to use if the Daemon is not available.","title":"Private Attributes"},{"location":"dev/add-ons-reference/ram_settings/#foldernames-attributes","text":"FolderNames is a simple class which contains common names for subfolders. Attribute Type Default Description preview string \u201d_preview\u201d publish string \u201d_published\u201d versions string \u201d_versions\u201d userConfig string \u201cConfig\u201d stepTemplates string \u201cTemplates\u201d","title":"FolderNames Attributes"},{"location":"dev/add-ons-reference/ram_settings/#examples","text":"ramses = Ramses . instance settings = ramses . settings theAsset = RamAsset ( \"thing\" , \"stuff\" ) thePreviewFolder = theAsset . folderPath () + \"/\" + settings . folderNames . preview","title":"Examples"},{"location":"dev/add-ons-reference/ram_shot/","text":"RamShot A shot. Inherits: RamItem RamShot Attributes Static Methods Methods API Dev notes Notes about the methods duration() Attributes Attribute Type Default Description Static Methods Method Arguments Description getFromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc) Methods Method Arguments Description constructor string : shotName , string : shotShortName , string : shotFolderPath , float : duration = 0.0 duration \u25b9 float The shot duration, in seconds API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Notes about the methods duration() The duration is not available when the Daemon is offline. In this case, the method should return 0.0 . The implementation is simple: the duration is stored in the private _duration attrbibute by the constructor: the duration should be passed to the constructor when the shot is constructed from the Daemon data.","title":"RamShot"},{"location":"dev/add-ons-reference/ram_shot/#ramshot","text":"A shot. Inherits: RamItem RamShot Attributes Static Methods Methods API Dev notes Notes about the methods duration()","title":"RamShot"},{"location":"dev/add-ons-reference/ram_shot/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_shot/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. The path can be any file or folder path from the asset (a version file, a preview file, etc)","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_shot/#methods","text":"Method Arguments Description constructor string : shotName , string : shotShortName , string : shotFolderPath , float : duration = 0.0 duration \u25b9 float The shot duration, in seconds","title":"Methods"},{"location":"dev/add-ons-reference/ram_shot/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_shot/#notes-about-the-methods","text":"","title":"Notes about the methods"},{"location":"dev/add-ons-reference/ram_shot/#duration","text":"The duration is not available when the Daemon is offline. In this case, the method should return 0.0 . The implementation is simple: the duration is stored in the private _duration attrbibute by the constructor: the duration should be passed to the constructor when the shot is constructed from the Daemon data.","title":"duration()"},{"location":"dev/add-ons-reference/ram_state/","text":"RamState Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject RamState Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : stateName string : stateShortName float : completionRatio completionRatio \u25b9 integer The ratio of completion of this state in the range [0, 100] . color \u25b9 array of integers The color for this state, [R, G, B] in the range [0, 255] .","title":"RamState"},{"location":"dev/add-ons-reference/ram_state/#ramstate","text":"Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject RamState Attributes Methods","title":"RamState"},{"location":"dev/add-ons-reference/ram_state/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_state/#methods","text":"Method Arguments Description constructor string : stateName string : stateShortName float : completionRatio completionRatio \u25b9 integer The ratio of completion of this state in the range [0, 100] . color \u25b9 array of integers The color for this state, [R, G, B] in the range [0, 255] .","title":"Methods"},{"location":"dev/add-ons-reference/ram_status/","text":"RamStatus A state associated to a comment, the user who changed the state, etc. RamStatus Attributes Static Methods Methods Attributes Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file. Static Methods Method Arguments Description getFromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path. Methods Method Arguments Description constructor RamState : state RamUser : user = None string : comment = \"\" integer : version = 0 datetime : stateDate = None float : completionRation = None","title":"RamStatus"},{"location":"dev/add-ons-reference/ram_status/#ramstatus","text":"A state associated to a comment, the user who changed the state, etc. RamStatus Attributes Static Methods Methods","title":"RamStatus"},{"location":"dev/add-ons-reference/ram_status/#attributes","text":"Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file.","title":"Attributes"},{"location":"dev/add-ons-reference/ram_status/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path.","title":"Static Methods"},{"location":"dev/add-ons-reference/ram_status/#methods","text":"Method Arguments Description constructor RamState : state RamUser : user = None string : comment = \"\" integer : version = 0 datetime : stateDate = None float : completionRation = None","title":"Methods"},{"location":"dev/add-ons-reference/ram_step/","text":"RamStep A step in the production of the shots or assets of the project. Inherits: RamObject RamStep Constants (enumerated values) StepType Attributes Methods API Dev notes Notes about the methods commonFolderPath() stepType() Constants (enumerated values) StepType The type of the step. Usually used to filter available steps. Name Value Description StepType. PRE_PRODUCTION 'PRE_PRODUCTION' StepType. ASSET_PRODUCTION 'ASSET_PRODUCTION' StepType. SHOT_PRODUCTION 'SHOT_PRODUCTION' StepType. POST_PRODUCTION 'POST_PRODUCTION' StepType. PRODUCTION 'PRODUCTION' Use for ASSET AND SHOT production. StepType. ALL 'ALL' Use for all steps. Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : stepName , string : stepShortName , string : stepFolderPath = \"\" , StepType : stepType = \"\" At least the folder or the type must be provided, but one is enough as the other info can be gotten from the Ramses Tree commonFolderPath \u25b9 string The absolute path to the folder containing the common files for this step templatesFolderPath \u25b9 string The path to the template files of this step, relative to the common folder stepType \u25b9 enumerated value The type of this step, one of StepType.PRE_PRODUCTION , StepType.SHOT_PRODUCTION , StepType.ASSET_PRODUCTION , StepType.POST_PRODUCTION API Dev notes Note These section is for the development of the API only; you should not need these when developping your add-on using the API. Notes about the methods commonFolderPath() The commonFolderPath methods checks if the folder is already available in the private attribute _folderPath . If so, it is simply returned. If _folderPath is an empty string, it has to be set before it is returned: the path has to be built from the project folder (given by the Ramses instance if it is available), the step type, the step short name. stepType() If the private attribute _type is not an empty string, it is returned. Otherwise, the type can be retrived from the parent folder of the folder returned by commonFolderPath() (if it\u2019s not also an empty string). See the Ramses Tree for more info about the way this parent folder is named. If found, the type is stored in the private attribute _type and then returned.","title":"RamStep"},{"location":"dev/add-ons-reference/ram_step/#ramstep","text":"A step in the production of the shots or assets of the project. Inherits: RamObject RamStep Constants (enumerated values) StepType Attributes Methods API Dev notes Notes about the methods commonFolderPath() stepType()","title":"RamStep"},{"location":"dev/add-ons-reference/ram_step/#constants-enumerated-values","text":"","title":"Constants (enumerated values)"},{"location":"dev/add-ons-reference/ram_step/#steptype","text":"The type of the step. Usually used to filter available steps. Name Value Description StepType. PRE_PRODUCTION 'PRE_PRODUCTION' StepType. ASSET_PRODUCTION 'ASSET_PRODUCTION' StepType. SHOT_PRODUCTION 'SHOT_PRODUCTION' StepType. POST_PRODUCTION 'POST_PRODUCTION' StepType. PRODUCTION 'PRODUCTION' Use for ASSET AND SHOT production. StepType. ALL 'ALL' Use for all steps.","title":"StepType"},{"location":"dev/add-ons-reference/ram_step/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_step/#methods","text":"Method Arguments Description constructor string : stepName , string : stepShortName , string : stepFolderPath = \"\" , StepType : stepType = \"\" At least the folder or the type must be provided, but one is enough as the other info can be gotten from the Ramses Tree commonFolderPath \u25b9 string The absolute path to the folder containing the common files for this step templatesFolderPath \u25b9 string The path to the template files of this step, relative to the common folder stepType \u25b9 enumerated value The type of this step, one of StepType.PRE_PRODUCTION , StepType.SHOT_PRODUCTION , StepType.ASSET_PRODUCTION , StepType.POST_PRODUCTION","title":"Methods"},{"location":"dev/add-ons-reference/ram_step/#api-dev-notes","text":"Note These section is for the development of the API only; you should not need these when developping your add-on using the API.","title":"API Dev notes"},{"location":"dev/add-ons-reference/ram_step/#notes-about-the-methods","text":"","title":"Notes about the methods"},{"location":"dev/add-ons-reference/ram_step/#commonfolderpath","text":"The commonFolderPath methods checks if the folder is already available in the private attribute _folderPath . If so, it is simply returned. If _folderPath is an empty string, it has to be set before it is returned: the path has to be built from the project folder (given by the Ramses instance if it is available), the step type, the step short name.","title":"commonFolderPath()"},{"location":"dev/add-ons-reference/ram_step/#steptype_1","text":"If the private attribute _type is not an empty string, it is returned. Otherwise, the type can be retrived from the parent folder of the folder returned by commonFolderPath() (if it\u2019s not also an empty string). See the Ramses Tree for more info about the way this parent folder is named. If found, the type is stored in the private attribute _type and then returned.","title":"stepType()"},{"location":"dev/add-ons-reference/ram_user/","text":"RamUser The class representing users. Inherits: RamObject RamUser Constants (enumerated values) UserRole Attributes Methods Constants (enumerated values) UserRole The role of the user (i.e. its administration rights). Name Value Description UserRole. ADMIN 3 UserRole. PROJECT_ADMIN 2 UserRole. LEAD 1 UserRole. STANDARD 0 Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : userName , string : userShortName , string : userFolderPath = \"\" , UserRole : role = UserRole.STANDARD configPath \u25b9 string The path to the Config folder relative to the user folder folderPath \u25b9 string The absolute path to the user folder role \u25b9 enumerated value One of UserRole.ADMIN , UserRole.PROJECT_ADMIN , UserRole.LEAD or UserRole.STANDARD","title":"RamUser"},{"location":"dev/add-ons-reference/ram_user/#ramuser","text":"The class representing users. Inherits: RamObject RamUser Constants (enumerated values) UserRole Attributes Methods","title":"RamUser"},{"location":"dev/add-ons-reference/ram_user/#constants-enumerated-values","text":"","title":"Constants (enumerated values)"},{"location":"dev/add-ons-reference/ram_user/#userrole","text":"The role of the user (i.e. its administration rights). Name Value Description UserRole. ADMIN 3 UserRole. PROJECT_ADMIN 2 UserRole. LEAD 1 UserRole. STANDARD 0","title":"UserRole"},{"location":"dev/add-ons-reference/ram_user/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/ram_user/#methods","text":"Method Arguments Description constructor string : userName , string : userShortName , string : userFolderPath = \"\" , UserRole : role = UserRole.STANDARD configPath \u25b9 string The path to the Config folder relative to the user folder folderPath \u25b9 string The absolute path to the user folder role \u25b9 enumerated value One of UserRole.ADMIN , UserRole.PROJECT_ADMIN , UserRole.LEAD or UserRole.STANDARD","title":"Methods"},{"location":"dev/add-ons-reference/ramses/","text":"Ramses The main class. One (and only one) instance globally available (Ramses is a singleton ), instantiated during init time. Ramses Static Attributes Examples Methods Static Attributes Attribute Type Default Description instance Ramses The unique Ramses instance Examples # Python # import the Ramses class from ramses import Ramses # Get the instance, which has already been initiated during import ramses = Ramses . instance // ExtendScript // include the Ramses lib # include ramses . jsxinc // Get the instance, which has already been initiated in include var ramses = Ramses . instance ; Methods Method Arguments Description constructor integer : port = 18185 boolean : connect = true If connect is true, will launch the client if needed and then tries to connect to it. alternativeFolderPaths \u25b9 string list A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. backupFolderPath \u25b9 string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks Daemon availability and initiates the connection. Returns success. currentProject \u25b9 RamProject or None The current project. currentStep \u25b9 RamStep or None The current step. currentUser \u25b9 RamUser or None The current user. daemonInterface \u25b9 RamDaemonInterface The Daemon interface. disconnect \u25b9 boolean Gets back to offline mode. folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 projects \u25b9 list of RamProject The list of available projects. project \u25b9 RamProject string : projectShortName Gets a specific project. states \u25b9 list of RamState The list of available states. state \u25b9 RamState string : stateShortName = WIP Gets a specific state. online \u25b9 boolean True if connected to the Daemon and the Daemon is responding. showClient Raises the Ramses Client window, launches the client if it is not already running. settings RamSettings version \u25b9 string The current version of this API","title":"Ramses"},{"location":"dev/add-ons-reference/ramses/#ramses","text":"The main class. One (and only one) instance globally available (Ramses is a singleton ), instantiated during init time. Ramses Static Attributes Examples Methods","title":"Ramses"},{"location":"dev/add-ons-reference/ramses/#static-attributes","text":"Attribute Type Default Description instance Ramses The unique Ramses instance","title":"Static Attributes"},{"location":"dev/add-ons-reference/ramses/#examples","text":"# Python # import the Ramses class from ramses import Ramses # Get the instance, which has already been initiated during import ramses = Ramses . instance // ExtendScript // include the Ramses lib # include ramses . jsxinc // Get the instance, which has already been initiated in include var ramses = Ramses . instance ;","title":"Examples"},{"location":"dev/add-ons-reference/ramses/#methods","text":"Method Arguments Description constructor integer : port = 18185 boolean : connect = true If connect is true, will launch the client if needed and then tries to connect to it. alternativeFolderPaths \u25b9 string list A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. backupFolderPath \u25b9 string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks Daemon availability and initiates the connection. Returns success. currentProject \u25b9 RamProject or None The current project. currentStep \u25b9 RamStep or None The current step. currentUser \u25b9 RamUser or None The current user. daemonInterface \u25b9 RamDaemonInterface The Daemon interface. disconnect \u25b9 boolean Gets back to offline mode. folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 projects \u25b9 list of RamProject The list of available projects. project \u25b9 RamProject string : projectShortName Gets a specific project. states \u25b9 list of RamState The list of available states. state \u25b9 RamState string : stateShortName = WIP Gets a specific state. online \u25b9 boolean True if connected to the Daemon and the Daemon is responding. showClient Raises the Ramses Client window, launches the client if it is not already running. settings RamSettings version \u25b9 string The current version of this API","title":"Methods"},{"location":"dev/add-ons-reference/old/","text":"Scripting API reference Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. Scripting API reference Classes Implementation Enumerated Values Python and ExtendScript As this document is referring to different languages, it uses general terms which may be different than what is usually used in specific languages. Classes This is the comprehensive list of available classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamApplication RamObject A class representing an application used in the pipeline (like Blender , Nuke , Krita , Photoshop \u2026). RamAsset RamItem An asset. RamAssetStep RamStep A step in the production of the assets of the project. RamFileType RamObject A class representing file types and their association with RamApplications . RamItem RamObject Base class for RamAsset and RamShot . An item of the project, either a general item, an asset or a shot. RamObject The base class for most of Ramses objects. RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamShot RamItem A shot. RamShotStep RamStep A step in the production of the shots of the project. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject Base class for RamAsset and RamShot . A step in the production of the shots or assets of the project. RamStepStatus A history of RamStatus for a given step. RamUser RamObject The class representing users. Implementation Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API. Enumerated Values Python and ExtendScript Should be a string with the name of the value, enclosed in single quotes to differenciate them from other strings. Example: 'ADMIN' , 'STANDARD' .","title":"Scripting API reference"},{"location":"dev/add-ons-reference/old/#scripting-api-reference","text":"Rainbox Laboratory provides a reference implementation of the API in Python and Adobe ExtendScript . Other APIs may be developped, in which case all these APIs on all programming/scripting language should implement this reference, with the same classes, attributes and methods. Scripting API reference Classes Implementation Enumerated Values Python and ExtendScript As this document is referring to different languages, it uses general terms which may be different than what is usually used in specific languages.","title":"Scripting API reference"},{"location":"dev/add-ons-reference/old/#classes","text":"This is the comprehensive list of available classes. Class Inheritance Description Ramses The main class. One (and only one) instance globally available, instantiated during init time. RamApplication RamObject A class representing an application used in the pipeline (like Blender , Nuke , Krita , Photoshop \u2026). RamAsset RamItem An asset. RamAssetStep RamStep A step in the production of the assets of the project. RamFileType RamObject A class representing file types and their association with RamApplications . RamItem RamObject Base class for RamAsset and RamShot . An item of the project, either a general item, an asset or a shot. RamObject The base class for most of Ramses objects. RamProject RamObject A project handled by Ramses. Projects contains general items, assets and shots. RamShot RamItem A shot. RamShotStep RamStep A step in the production of the shots of the project. RamState RamObject The state of a step (like \u201cWaiting for approval\u201d, \u201cApproved\u201d, etc.). RamStatus A state associated to a comment, the user who changed the state, etc. RamStep RamObject Base class for RamAsset and RamShot . A step in the production of the shots or assets of the project. RamStepStatus A history of RamStatus for a given step. RamUser RamObject The class representing users.","title":"Classes"},{"location":"dev/add-ons-reference/old/#implementation","text":"Some of the elements described in this documentation have to be interpreted depending on the language used in the implementations of the Ramses API.","title":"Implementation"},{"location":"dev/add-ons-reference/old/#enumerated-values","text":"","title":"Enumerated Values"},{"location":"dev/add-ons-reference/old/#python-and-extendscript","text":"Should be a string with the name of the value, enclosed in single quotes to differenciate them from other strings. Example: 'ADMIN' , 'STANDARD' .","title":"Python and ExtendScript"},{"location":"dev/add-ons-reference/old/ram_application/","text":"RamApplication A class representing an application used in the pipeline (like Blender, Nuke, Krita, Photoshop\u2026). Inherits: RamObject RamApplication Attributes Methods Attributes Attribute Type Default Description executableFilePath string '' Path to the executable file of the application. exportTypes list of RamFileType [] File types the app can export. importTypes list of RamFileType [] File types the app can import. nativeTypes list of RamFileType [] File types the app supports natively. Methods Method Arguments Description constructor string : appName string : appShortName string : execFilePath =\u201d\u201c","title":"RamApplication"},{"location":"dev/add-ons-reference/old/ram_application/#ramapplication","text":"A class representing an application used in the pipeline (like Blender, Nuke, Krita, Photoshop\u2026). Inherits: RamObject RamApplication Attributes Methods","title":"RamApplication"},{"location":"dev/add-ons-reference/old/ram_application/#attributes","text":"Attribute Type Default Description executableFilePath string '' Path to the executable file of the application. exportTypes list of RamFileType [] File types the app can export. importTypes list of RamFileType [] File types the app can import. nativeTypes list of RamFileType [] File types the app supports natively.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_application/#methods","text":"Method Arguments Description constructor string : appName string : appShortName string : execFilePath =\u201d\u201c","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_asset/","text":"RamAsset A class representing an asset. Inherits: RamObject RamAsset Attributes Static Methods Methods Attributes Attribute Type Default Description Static Methods Method Arguments Description getFromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given folder path. getAssetFolder \u25b9 string string : filePath Gets the folder path for the asset the file belongs to. Methods Method Arguments Description constructor string : assetName string : assetShortName getTags \u25b9 list of string Some tags describing the asset. getGroup \u25b9 string The group containing this asset.","title":"RamAsset"},{"location":"dev/add-ons-reference/old/ram_asset/#ramasset","text":"A class representing an asset. Inherits: RamObject RamAsset Attributes Static Methods Methods","title":"RamAsset"},{"location":"dev/add-ons-reference/old/ram_asset/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_asset/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamAsset string : folderPath Returns a RamAsset instance built using the given folder path. getAssetFolder \u25b9 string string : filePath Gets the folder path for the asset the file belongs to.","title":"Static Methods"},{"location":"dev/add-ons-reference/old/ram_asset/#methods","text":"Method Arguments Description constructor string : assetName string : assetShortName getTags \u25b9 list of string Some tags describing the asset. getGroup \u25b9 string The group containing this asset.","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_assetstep/","text":"RamAssetStep A step in the production of the assets of the project. Inherits: RamStep RamAssetStep Attributes Methods Attributes Attribute Type Default Description dependsOn list of RamAssetStep [] The steps this step depends on. Methods Method Arguments Description constructor string : stepName string : stepShortName","title":"RamAssetStep"},{"location":"dev/add-ons-reference/old/ram_assetstep/#ramassetstep","text":"A step in the production of the assets of the project. Inherits: RamStep RamAssetStep Attributes Methods","title":"RamAssetStep"},{"location":"dev/add-ons-reference/old/ram_assetstep/#attributes","text":"Attribute Type Default Description dependsOn list of RamAssetStep [] The steps this step depends on.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_assetstep/#methods","text":"Method Arguments Description constructor string : stepName string : stepShortName","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_filetype/","text":"RamFileType A class representing file types and their association with RamApplications . Inherits: RamObject RamFileType Attributes Methods Attributes Attribute Type Default Description defaultApplication RamApplication extension string Methods Method Arguments Description constructor string : typeName string : typeShortName string : ext RamApplication : defaultApp","title":"RamFileType"},{"location":"dev/add-ons-reference/old/ram_filetype/#ramfiletype","text":"A class representing file types and their association with RamApplications . Inherits: RamObject RamFileType Attributes Methods","title":"RamFileType"},{"location":"dev/add-ons-reference/old/ram_filetype/#attributes","text":"Attribute Type Default Description defaultApplication RamApplication extension string","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_filetype/#methods","text":"Method Arguments Description constructor string : typeName string : typeShortName string : ext RamApplication : defaultApp","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_item/","text":"RamItem Base class for RamAsset and RamShot . An item of the project, either a general item, an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset RamItem Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : itemName string : itemShortName string : itemFolder = \"\" getCurrentStatus \u25b9 RamStatus RamStep or string : step string : resource = \"\" getLatestVersion \u25b9 integer RamStep : step string : resource = \"\" string : stateId = wip Returns the highest version number for the given state (wip, pub\u2026). getPublishedFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. getStepHistory \u25b9 list of RamStatus RamStep or string : step string : resource = \"\" Gets the history of statuses for a given step and resource. getVersionFilePath \u25b9 string RamStep : step string : resource = \"\" Latest version file path relative to the item root folder getWIPFilePath \u25b9 string RamStep or string : step string : resource = \"\" Current wip file path relative to the item root folder isPublished \u25b9 bool RamStep : step string : resource = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.getPublishedFilePaths(step, resource)) > 0 setStepStatus RamStatus : status RamStep : step Adds a new status in stepStatuses for the given step","title":"RamItem"},{"location":"dev/add-ons-reference/old/ram_item/#ramitem","text":"Base class for RamAsset and RamShot . An item of the project, either a general item, an asset or a shot. Inherits: RamObject Inherited by: RamShot , RamAsset RamItem Attributes Methods","title":"RamItem"},{"location":"dev/add-ons-reference/old/ram_item/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_item/#methods","text":"Method Arguments Description constructor string : itemName string : itemShortName string : itemFolder = \"\" getCurrentStatus \u25b9 RamStatus RamStep or string : step string : resource = \"\" getLatestVersion \u25b9 integer RamStep : step string : resource = \"\" string : stateId = wip Returns the highest version number for the given state (wip, pub\u2026). getPublishedFilePaths \u25b9 list of string RamStep or string : step string : resource = \"\" Gets the list of file paths in the publish folder. Paths are relative to the root of the item folder. getStepHistory \u25b9 list of RamStatus RamStep or string : step string : resource = \"\" Gets the history of statuses for a given step and resource. getVersionFilePath \u25b9 string RamStep : step string : resource = \"\" Latest version file path relative to the item root folder getWIPFilePath \u25b9 string RamStep or string : step string : resource = \"\" Current wip file path relative to the item root folder isPublished \u25b9 bool RamStep : step string : resource = \"\" Convenience function to check if there are published files in the publish folder. Equivalent to len(self.getPublishedFilePaths(step, resource)) > 0 setStepStatus RamStatus : status RamStep : step Adds a new status in stepStatuses for the given step","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_object/","text":"RamObject The base class for most of Ramses objects. Inherited by: RamApplication , RamFileType , RamItem , RamShot , RamItem , RamProject , RamState , RamStep , RamShotStep , RamAssetStep , RamUser RamObject Attributes Methods Attributes Attribute Type Default Description name string May contain spaces, [a-z] ,[A-Z], [0-9], [+-]. shortName string Used for compact display and folder names, limited to 10 characters, must not contain spaces, may contain [a-z] ,[A-Z], [0-9], [+-]. folderPath string The path relative to a project or the main Ramses folder, containing all files in relation to this object. Methods Method Arguments Description constructor string : objectName string : objectShortName string : objectFolder = \"\"","title":"RamObject"},{"location":"dev/add-ons-reference/old/ram_object/#ramobject","text":"The base class for most of Ramses objects. Inherited by: RamApplication , RamFileType , RamItem , RamShot , RamItem , RamProject , RamState , RamStep , RamShotStep , RamAssetStep , RamUser RamObject Attributes Methods","title":"RamObject"},{"location":"dev/add-ons-reference/old/ram_object/#attributes","text":"Attribute Type Default Description name string May contain spaces, [a-z] ,[A-Z], [0-9], [+-]. shortName string Used for compact display and folder names, limited to 10 characters, must not contain spaces, may contain [a-z] ,[A-Z], [0-9], [+-]. folderPath string The path relative to a project or the main Ramses folder, containing all files in relation to this object.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_object/#methods","text":"Method Arguments Description constructor string : objectName string : objectShortName string : objectFolder = \"\"","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_project/","text":"RamProject A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject RamProject Attributes Methods Attributes Attribute Type Default Description Methods Method Arguments Description constructor string : projectName string : projectShortName string : projectPath getAbsolutePath \u25b9 str string : relativePath getAssets \u25b9 list of RamAsset string : groupName = \"\" If groupName is an empty string, returns all assets. getAssetGroups \u25b9 list of string getShots \u25b9 list of RamShot string : filter = \"*\" A filter to be applied to the name of the shots, using \u201c*\u201d as a wildcard. getSteps \u25b9 list of RamStep enumerated value : typeOrCat = ALL Use typeOrCat to filter the results. One of: ALL , ASSET , SHOT , PRE-PROD , PROD , POST-PROD . PROD represents a combination of SHOT and ASSET","title":"RamProject"},{"location":"dev/add-ons-reference/old/ram_project/#ramproject","text":"A project handled by Ramses. Projects contains general items, assets and shots. Inherits: RamObject RamProject Attributes Methods","title":"RamProject"},{"location":"dev/add-ons-reference/old/ram_project/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_project/#methods","text":"Method Arguments Description constructor string : projectName string : projectShortName string : projectPath getAbsolutePath \u25b9 str string : relativePath getAssets \u25b9 list of RamAsset string : groupName = \"\" If groupName is an empty string, returns all assets. getAssetGroups \u25b9 list of string getShots \u25b9 list of RamShot string : filter = \"*\" A filter to be applied to the name of the shots, using \u201c*\u201d as a wildcard. getSteps \u25b9 list of RamStep enumerated value : typeOrCat = ALL Use typeOrCat to filter the results. One of: ALL , ASSET , SHOT , PRE-PROD , PROD , POST-PROD . PROD represents a combination of SHOT and ASSET","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_shot/","text":"RamShot A shot. Inherits: RamItem RamShot Attributes Static Methods Methods Attributes Attribute Type Default Description Static Methods Method Arguments Description getFromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. getShotFolder \u25b9 string string : filePath Gets the folder path for the shot the file belongs to. Methods Method Arguments Description constructor string : shotName string : shotShortName","title":"RamShot"},{"location":"dev/add-ons-reference/old/ram_shot/#ramshot","text":"A shot. Inherits: RamItem RamShot Attributes Static Methods Methods","title":"RamShot"},{"location":"dev/add-ons-reference/old/ram_shot/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_shot/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamShot string : folderPath Returns a RamShot instance built using the given folder path. getShotFolder \u25b9 string string : filePath Gets the folder path for the shot the file belongs to.","title":"Static Methods"},{"location":"dev/add-ons-reference/old/ram_shot/#methods","text":"Method Arguments Description constructor string : shotName string : shotShortName","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_shotstep/","text":"RamShotStep A step in the production of the shots of the project. Inherits: RamStep RamShotStep Attributes Methods Attributes Attribute Type Default Description dependsOn list of RamStep [] The steps this step depends on. Methods Method Arguments Description constructor string : stepName string : stepShortName","title":"RamShotStep"},{"location":"dev/add-ons-reference/old/ram_shotstep/#ramshotstep","text":"A step in the production of the shots of the project. Inherits: RamStep RamShotStep Attributes Methods","title":"RamShotStep"},{"location":"dev/add-ons-reference/old/ram_shotstep/#attributes","text":"Attribute Type Default Description dependsOn list of RamStep [] The steps this step depends on.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_shotstep/#methods","text":"Method Arguments Description constructor string : stepName string : stepShortName","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_state/","text":"RamState Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject RamState Attributes Methods Attributes Attribute Type Default Description completionRatio float The ratio of completion of this status. Methods Method Arguments Description constructor string : stateName string : stateShortName float : completionRatio","title":"RamState"},{"location":"dev/add-ons-reference/old/ram_state/#ramstate","text":"Represents a state used in a status, like \u201cCHK\u201d (To be checked), \u201cOK\u201d (ok), \u201cTODO\u201d, etc. Inherits: RamObject RamState Attributes Methods","title":"RamState"},{"location":"dev/add-ons-reference/old/ram_state/#attributes","text":"Attribute Type Default Description completionRatio float The ratio of completion of this status.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_state/#methods","text":"Method Arguments Description constructor string : stateName string : stateShortName float : completionRatio","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_status/","text":"RamStatus A state associated to a comment, the user who changed the state, etc. RamStatus Attributes Static Methods Methods Attributes Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file. Static Methods Method Arguments Description getFromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path. Methods Method Arguments Description constructor RamState : state RamUser : user = None string : comment = \"\" integer : version = 0 datetime : stateDate = None","title":"RamStatus"},{"location":"dev/add-ons-reference/old/ram_status/#ramstatus","text":"A state associated to a comment, the user who changed the state, etc. RamStatus Attributes Static Methods Methods","title":"RamStatus"},{"location":"dev/add-ons-reference/old/ram_status/#attributes","text":"Attribute Type Default Description comment string A user comment. completionRatio float The ratio of completion of this status. date datetime The date at which this status was created. state RamState The corresponding state. user RamUser The user who created this status. version integer The version of the corresponding working file.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_status/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamStatus string : filePath Returns a RamStatus instance built using the given file path.","title":"Static Methods"},{"location":"dev/add-ons-reference/old/ram_status/#methods","text":"Method Arguments Description constructor RamState : state RamUser : user = None string : comment = \"\" integer : version = 0 datetime : stateDate = None","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_step/","text":"RamStep Base class for RamAsset and RamShot . A step in the production of the shots or assets of the project. Inherits: RamObject Inherited by: RamAsset , RamShot RamStep Attributes Methods Attributes Attribute Type Default Description assignedUsers list of RamUser [] Users working on this step. fileType RamFileType None The main file type used for working on this step. leads list of RamUser Users leading (i.e. with admin rights and validating assets) this step. publishFileTypes list of RamFileType The file types published by this step. secondaryFileTypes list of RamFileType Other file types which may be used when working on this step. Methods Method Arguments Description constructor string : stepName string : stepShortName","title":"RamStep"},{"location":"dev/add-ons-reference/old/ram_step/#ramstep","text":"Base class for RamAsset and RamShot . A step in the production of the shots or assets of the project. Inherits: RamObject Inherited by: RamAsset , RamShot RamStep Attributes Methods","title":"RamStep"},{"location":"dev/add-ons-reference/old/ram_step/#attributes","text":"Attribute Type Default Description assignedUsers list of RamUser [] Users working on this step. fileType RamFileType None The main file type used for working on this step. leads list of RamUser Users leading (i.e. with admin rights and validating assets) this step. publishFileTypes list of RamFileType The file types published by this step. secondaryFileTypes list of RamFileType Other file types which may be used when working on this step.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_step/#methods","text":"Method Arguments Description constructor string : stepName string : stepShortName","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_stepstatus/","text":"RamStepStatus A history of RamStatus for a given step. RamStepStatus Attributes Static Methods Methods Attributes Attribute Type Default Description Static Methods Method Arguments Description getFromPath \u25b9 RamStepStatus string : filePath Returns a RamStepStatus instance built using the given file path. Methods Method Arguments Description constructor getHistory \u25b9 list of RamStatus string : filePath = \"\" setStatus RamStatus : status Adds a new status to the history","title":"RamStepStatus"},{"location":"dev/add-ons-reference/old/ram_stepstatus/#ramstepstatus","text":"A history of RamStatus for a given step. RamStepStatus Attributes Static Methods Methods","title":"RamStepStatus"},{"location":"dev/add-ons-reference/old/ram_stepstatus/#attributes","text":"Attribute Type Default Description","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_stepstatus/#static-methods","text":"Method Arguments Description getFromPath \u25b9 RamStepStatus string : filePath Returns a RamStepStatus instance built using the given file path.","title":"Static Methods"},{"location":"dev/add-ons-reference/old/ram_stepstatus/#methods","text":"Method Arguments Description constructor getHistory \u25b9 list of RamStatus string : filePath = \"\" setStatus RamStatus : status Adds a new status to the history","title":"Methods"},{"location":"dev/add-ons-reference/old/ram_user/","text":"RamUser The class representing users. Inherits: RamObject RamUser Attributes Methods Attributes Attribute Type Default Description role Read-only enumerated value STANDARD One of ADMIN , LEAD or STANDARD Methods Method Arguments Description constructor string : userName string : userShortName string : userFolderPath = \"\" login \u25b9 boolean string : password Logs the user in. Returns success. logout \u25b9 boolean Logs the user out.","title":"RamUser"},{"location":"dev/add-ons-reference/old/ram_user/#ramuser","text":"The class representing users. Inherits: RamObject RamUser Attributes Methods","title":"RamUser"},{"location":"dev/add-ons-reference/old/ram_user/#attributes","text":"Attribute Type Default Description role Read-only enumerated value STANDARD One of ADMIN , LEAD or STANDARD","title":"Attributes"},{"location":"dev/add-ons-reference/old/ram_user/#methods","text":"Method Arguments Description constructor string : userName string : userShortName string : userFolderPath = \"\" login \u25b9 boolean string : password Logs the user in. Returns success. logout \u25b9 boolean Logs the user out.","title":"Methods"},{"location":"dev/add-ons-reference/old/ramses/","text":"Ramses The main class. One (and only one) instance globally available, instantiated during init time. Ramses Attributes Methods Attributes Attribute Type Default Description autoConnect boolean true Wether to always try to (re)connect if offline. clientPort integer 1818 The port used to connect to the client. currentProject Read-only RamProject The current project. currentUser Read-only RamUser The current user. online Read-only boolean True if connected to the client and the client is responding. Methods Method Arguments Description constructor integer : port = 1818 boolean : connect = true If connect is true, will launch the client if needed and then tries to connect to it. backupFolderPath \u25b9 string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks server or client availability and initiates the connection. Returns success. disconnect \u25b9 boolean Gets back to offline mode. getAlternativeFolderPaths \u25b9 string list A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. getProjects \u25b9 list of RamProject The list of available projects. getStates \u25b9 list of RamState The list of available states. getState \u25b9 RamState string : stateShortName = WIP getSteps \u25b9 list of RamStep enumerated value : typeOrCat = ALL Use typeOrCat to filter the results. One of: ALL , ASSET , SHOT , PRE-PROD , PROD , POST-PROD . PROD represents a combination of SHOT and ASSET getUsers \u25b9 list of RamUser The list of available users. getUser \u25b9 RamUser string : userShortName = \"\" Gets a specific user. folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 launchClient \u25b9 boolean boolean : connect = true Launches the Ramses client and tries to connect to it. Returns success login \u25b9 boolean string : userPassword RamUser : user = currentUser Logs the user in. Launches and connect to the client if necessary. Returns success. request \u25b9 None or dict dict : request Posts a request to the connected client. logout Logs the user out. setCurrentProject RamProject : project setCurrentUser RamUser : user","title":"Ramses"},{"location":"dev/add-ons-reference/old/ramses/#ramses","text":"The main class. One (and only one) instance globally available, instantiated during init time. Ramses Attributes Methods","title":"Ramses"},{"location":"dev/add-ons-reference/old/ramses/#attributes","text":"Attribute Type Default Description autoConnect boolean true Wether to always try to (re)connect if offline. clientPort integer 1818 The port used to connect to the client. currentProject Read-only RamProject The current project. currentUser Read-only RamUser The current user. online Read-only boolean True if connected to the client and the client is responding.","title":"Attributes"},{"location":"dev/add-ons-reference/old/ramses/#methods","text":"Method Arguments Description constructor integer : port = 1818 boolean : connect = true If connect is true, will launch the client if needed and then tries to connect to it. backupFolderPath \u25b9 string A copy of the main folder where all files are stored. connect \u25b9 boolean Checks server or client availability and initiates the connection. Returns success. disconnect \u25b9 boolean Gets back to offline mode. getAlternativeFolderPaths \u25b9 string list A list of alternative absolute paths to the main Ramses folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. getProjects \u25b9 list of RamProject The list of available projects. getStates \u25b9 list of RamState The list of available states. getState \u25b9 RamState string : stateShortName = WIP getSteps \u25b9 list of RamStep enumerated value : typeOrCat = ALL Use typeOrCat to filter the results. One of: ALL , ASSET , SHOT , PRE-PROD , PROD , POST-PROD . PROD represents a combination of SHOT and ASSET getUsers \u25b9 list of RamUser The list of available users. getUser \u25b9 RamUser string : userShortName = \"\" Gets a specific user. folderPath \u25b9 string The absolute path to main Ramses folder, containing projects by default, config files, user folders, admin files\u2026 launchClient \u25b9 boolean boolean : connect = true Launches the Ramses client and tries to connect to it. Returns success login \u25b9 boolean string : userPassword RamUser : user = currentUser Logs the user in. Launches and connect to the client if necessary. Returns success. request \u25b9 None or dict dict : request Posts a request to the connected client. logout Logs the user out. setCurrentProject RamProject : project setCurrentUser RamUser : user","title":"Methods"},{"location":"dev/daemon-reference/","text":"Ramses Daemon API The Ramses Daemon is a local server used by the Ramses Add-ons to get and set data to the client (which in turn communicates with the Ramses Server to store the shared data) and the whole system. Ramses Daemon API Connecting to the Daemon Communicating with the Daemon Queries Replies The Ramses Daemon is automatically run by the Ramses client , the native application which is the heart of Ramses . Connecting to the Daemon Add-ons can communicate with the Daemon through a standard TCP Socket . The Daemon listens on port 18185 1 by default (but this can be adjusted in the Ramses Client settings), and is automatically started by the Ramses client . It is terminated when the client quits. Most of Ramses data can only be accessed if a user is logged-in in the Ramses Client , thus before communicating with the Daemon , a Ramses Add-on must check if the Client (and its Daemon ) is running (or start it), and if a user is logged-in. The initial connection to the Daemon usually follows these steps: Check if the Daemon is running by sending the ping query. If the Daemon replies, connection is ready Else, try to start the client and ping again. Check the version of the Daemon which is part of the reply to the ping . Check if the user is logged-in; if not, show an alert and raise the Ramses Client window. Communicating with the Daemon Queries Add-ons can post queries which use the form of the attributes part of a standard URL query; they are a single-line string of key=value pairs (the value may be optional) seperated by the & character. They should be encoded in UTF-8 , and special characters should use a standard URL percent-encoding . There\u2019s no need to enclose strings in quotes. Example queries: ping setCurrentProject&shortName=PROJ&name=The Project Replies The Daemon replies with a JSON object (encoded in UTF-8 ) which contains the following attributes: accepted : boolean . True if the Daemon has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the Daemon has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the Add-on . It contains explanation about the error, if any. query : string . The query that was made that the Daemon is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Note Replies are a single-line string, but they\u2019re prettyfied in this documentation for the sake of readabiliy Example Replies: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Hi, this is the Ramses Daemon.\" , \"content\" : { \"version\" : \"0.0.1\" , \"ramses\" : \"Ramses\" , \"userName\" : \"John Doe\" , \"userShortName\" : \"J.Doe\" , \"logged-in\" : true } } { \"accepted\" : true , \"query\" : \"setCurrentProject\" , \"success\" : true , \"message\" : \"Current project set to: The Project.\" , \"content\" : { \"name\" : \"The Project\" , \"shortName\" : \"PROJ\" , \"path\" : \"/home/user/Ramses/PROJECTS/The Project\" , \"uuid\" : \"12456abc\" } } This port was chosen in memory of Karl Marx, whose birth date was 05/05/1818. \u21a9","title":"Reference"},{"location":"dev/daemon-reference/#ramses-daemon-api","text":"The Ramses Daemon is a local server used by the Ramses Add-ons to get and set data to the client (which in turn communicates with the Ramses Server to store the shared data) and the whole system. Ramses Daemon API Connecting to the Daemon Communicating with the Daemon Queries Replies The Ramses Daemon is automatically run by the Ramses client , the native application which is the heart of Ramses .","title":"Ramses Daemon API"},{"location":"dev/daemon-reference/#connecting-to-the-daemon","text":"Add-ons can communicate with the Daemon through a standard TCP Socket . The Daemon listens on port 18185 1 by default (but this can be adjusted in the Ramses Client settings), and is automatically started by the Ramses client . It is terminated when the client quits. Most of Ramses data can only be accessed if a user is logged-in in the Ramses Client , thus before communicating with the Daemon , a Ramses Add-on must check if the Client (and its Daemon ) is running (or start it), and if a user is logged-in. The initial connection to the Daemon usually follows these steps: Check if the Daemon is running by sending the ping query. If the Daemon replies, connection is ready Else, try to start the client and ping again. Check the version of the Daemon which is part of the reply to the ping . Check if the user is logged-in; if not, show an alert and raise the Ramses Client window.","title":"Connecting to the Daemon"},{"location":"dev/daemon-reference/#communicating-with-the-daemon","text":"","title":"Communicating with the Daemon"},{"location":"dev/daemon-reference/#queries","text":"Add-ons can post queries which use the form of the attributes part of a standard URL query; they are a single-line string of key=value pairs (the value may be optional) seperated by the & character. They should be encoded in UTF-8 , and special characters should use a standard URL percent-encoding . There\u2019s no need to enclose strings in quotes. Example queries: ping setCurrentProject&shortName=PROJ&name=The Project","title":"Queries"},{"location":"dev/daemon-reference/#replies","text":"The Daemon replies with a JSON object (encoded in UTF-8 ) which contains the following attributes: accepted : boolean . True if the Daemon has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the Daemon has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the Add-on . It contains explanation about the error, if any. query : string . The query that was made that the Daemon is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Note Replies are a single-line string, but they\u2019re prettyfied in this documentation for the sake of readabiliy Example Replies: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Hi, this is the Ramses Daemon.\" , \"content\" : { \"version\" : \"0.0.1\" , \"ramses\" : \"Ramses\" , \"userName\" : \"John Doe\" , \"userShortName\" : \"J.Doe\" , \"logged-in\" : true } } { \"accepted\" : true , \"query\" : \"setCurrentProject\" , \"success\" : true , \"message\" : \"Current project set to: The Project.\" , \"content\" : { \"name\" : \"The Project\" , \"shortName\" : \"PROJ\" , \"path\" : \"/home/user/Ramses/PROJECTS/The Project\" , \"uuid\" : \"12456abc\" } } This port was chosen in memory of Karl Marx, whose birth date was 05/05/1818. \u21a9","title":"Replies"},{"location":"dev/daemon-reference/queries/","text":"Ramses Daemon: query reference Ramses Daemon: query reference ping Query attributes Reply content Example raise Query attributes Reply content Example getAssets Query attributes Reply content Example getAssetGroups Query attributes Reply content Example getCurrentProject Query attributes Reply content Example getCurrentStatus Query attributes Reply content Example getCurrentUser Query attributes Reply content Example getPipes Query attributes Reply content Example getProjects Query attributes Reply content Example getShots Query attributes Reply content Example getStates Query attributes Reply content Example getSteps Query attributes Reply content Example setCurrentProject Query attributes Reply content Example ping Checks if the Daemon is running, and gets its version and current user information. Query attributes ping Reply content The Daemon replies with its version and information about the current user. version : string . The version of the client/daemon. ramses : string . The name of the client, should be \u201cRamses\u201d for the official client. userName : string . The name of the user. Empty string if there\u2019s no logged-in user. userShortName : string . The short name of the user. Empty string if there\u2019s no logged-in user. logged-in :: boolean . True if a user is logged-in. Example Query: ping Reply: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Hi, this is the Ramses Daemon.\" , \"content\" : { \"version\" : \"0.0.1\" , \"ramses\" : \"Ramses\" , \"userName\" : \"John Doe\" , \"userShortName\" : \"J.Doe\" , \"logged-in\" : true } } raise Raises the client application main window. Query attributes raise Reply content None Example Query: raise getAssets Returns the list of assets for the current project. Query attributes getAssets Reply content The Daemon replies with the list of assets. assets : array of objects . The assets. Each asset is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name. Example Query: getAssets Reply: { \"accepted\" : true , \"query\" : \"getAssets\" , \"success\" : true , \"message\" : \"Asset list retrived.\" , \"content\" : { \"assets\" : [ { \"shortName\" : \"A1\" , \"name\" : \"Asset 01\" , \"folder\" : \"/path/to/A1\" , \"tags\" : [ \"tag1\" , \"tag2\" , \"tag3\" ], \"group\" : \"Asset Group\" }, { \"shortName\" : \"A2\" , \"name\" : \"Asset 02\" , \"folder\" : \"/path/to/A2\" , \"tags\" : [ \"tag1\" , \"tag2\" , \"tag3\" ], \"group\" : \"Asset Group\" } ] } } getAssetGroups Returns the list of asset groups for the current project. Query attributes getAssetGroups Reply content The Daemon replies with the list of asset groups. assetGroups : array of objects . The asset groups. Each asset group is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. Example Query: getAssetGroups Reply: { \"accepted\" : true , \"query\" : \"getAgetAssetGroupsssets\" , \"success\" : true , \"message\" : \"Asset group list retrived.\" , \"content\" : { \"assets\" : [ { \"shortName\" : \"CHAR\" , \"name\" : \"Characters\" , \"folder\" : \"/path/to/CHAR\" }, { \"shortName\" : \"PROPS\" , \"name\" : \"Props\" , \"folder\" : \"/path/to/PROPS\" }, { \"shortName\" : \"SETS\" , \"name\" : \"Sets\" , \"folder\" : \"/path/to/SETS\" } ] } } getCurrentProject Returns the current project. Query attributes getCurrentProject Reply content The Daemon replies with the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: getCurrentProject Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Current project is: Project 01.\" , \"content\" : { \"shortName\" : \"P1\" , \"name\" : \"Project 01\" , \"width\" : 2048 , \"height\" : 858 , \"framerate\" : 24.0 , \"folder\" : \"/path/to/P1\" } } getCurrentStatus Returns the current status list (one per step) for a given item (shot or asset). Query attributes getCurrentStatus shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" . Reply content The Daemon replies with the list of status. status : array of objects . The status. Each status is an object with: step : string . The short name of the associated step. comment : string . The comment. *completionRatio: int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version. Example Query: getCurrentStatus&shortName=TRI&name=Tristan&type=ASSET Reply: { \"accepted\" : true , \"query\" : \"getCurrentUser\" , \"success\" : true , \"message\" : \"Current user is: John Doe.\" , \"content\" : { \"status\" : [ { \"step\" : \"RIG\" , \"comment\" : \"Working on it!\" , \"completionRatio\" : 75 , \"date\" : \"2021-04-12 10:55:23\" , \"state\" : \"WIP\" , \"user\" : \"Duduf\" , \"version\" : 12 }, { \"step\" : \"MOD\" , \"comment\" : \"Finished\" , \"completionRatio\" : 100 , \"date\" : \"2021-04-12 10:55:23\" , \"state\" : \"OK\" , \"user\" : \"Duduf\" , \"version\" : 5 } ] } } getCurrentUser Returns the current user. Query attributes getCurrentUser Reply content The Daemon replies with the user. shortName : string . The short name of the user. name : string . The name of the user. role : string . The role of the user, one of 'STANDARD' , 'LEAD' , 'PROJECT_ADMIN' , 'ADMIN' . folderPath : string . The absolute path to the user folder. Example Query: getCurrentUser Reply: { \"accepted\" : true , \"query\" : \"getCurrentUser\" , \"success\" : true , \"message\" : \"Current user is: John Doe.\" , \"content\" : { \"shortName\" : \"John\" , \"name\" : \"John Doe\" , \"role\" : \"LEAD\" , \"folderPath\" : \"/home/john/Ramses/Users/John\" } } getPipes Returns the list of pipes for the current project. Query attributes getPipes Reply content The Daemon replies with the list of Pipes. pipes : array of objects . The pipes. Each pipe is an object with: inputStepShortName : string . The short name of the input step. outputStepShortName : string . The short name of the output step. fileType : object . The file type, an object with: name : string . The name of the file type shortName : string . The short name of the file type. extensions : array of string . The extensions, including the leading . . Example Query: getPipes Reply: { \"accepted\" : true , \"query\" : \"getPipes\" , \"success\" : true , \"message\" : \"Pipeline retrieved.\" , \"content\" : { \"pipes\" : [ { \"inputStepShortName\" : \"TEX\" , \"outputStepShortName\" : \"MOD\" , \"fileType\" : { \"name\" : \"Alembic geometry data\" , \"shortName\" : \"abc\" , \"extensions\" : [ \".abc\" ] } }, { \"inputStepShortName\" : \"STORY\" , \"outputStepShortName\" : \"CD\" , \"fileType\" : { \"name\" : \"JPEG Image\" , \"shortName\" : \"jpg\" , \"extensions\" : [ \".jpg\" , \".jpeg\" ] } } ] } } getProjects Returns the list of available projects. Query attributes getProjects Reply content The Daemon replies with the list of projects. projects : array of objects . The projects. Each project is an object with: shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project. Example Query: getProjects Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Project list retrived.\" , \"content\" : { \"projects\" : [ { \"shortName\" : \"P1\" , \"name\" : \"Project 01\" , \"width\" : 2048 , \"height\" : 858 , \"framerate\" : 24.0 , \"folder\" : \"/path/to/P1\" }, { \"shortName\" : \"P2\" , \"name\" : \"Project 02\" , \"width\" : 1998 , \"height\" : 1080 , \"framerate\" : 60.0 , \"folder\" : \"/path/to/P2\" } ] } } getShots Returns the list of assets for the current project. Query attributes getShots filter : string . The filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard * Reply content The Daemon replies with the list of Shots. shots : array of objects . The shots. Each shot is an object with: shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds Example Query: getShots&filter=Seq01-* Reply: { \"accepted\" : true , \"query\" : \"getShots\" , \"success\" : true , \"message\" : \"Shot list retrived.\" , \"content\" : { \"shots\" : [ { \"shortName\" : \"Seq01-S1\" , \"name\" : \"Shot 01\" , \"folder\" : \"/path/to/S1\" , \"duration\" : 1.25 }, { \"shortName\" : \"Seq01-S2\" , \"name\" : \"Shot 02\" , \"folder\" : \"/path/to/S2\" , \"duration\" : 2.4 } ] } } getStates Returns the list of available states. Query attributes getStates Reply content The Daemon replies with the list of States. states : array of objects . The states. Each states is an object with: shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] . Example Query: getStates Reply: { \"accepted\" : true , \"query\" : \"getStates\" , \"success\" : true , \"message\" : \"State list retrived.\" , \"content\" : { \"states\" : [ { \"shortName\" : \"TODO\" , \"name\" : \"Waiting...\" , \"completionRatio\" : 0 , \"color\" : [ 50 , 50 , 50 ] }, { \"shortName\" : \"WIP\" , \"name\" : \"Work In Progress\" , \"completionRatio\" : 50 , \"color\" : [ 255 , 0 , 0 ] }, { \"shortName\" : \"OK\" , \"name\" : \"Finished and approved\" , \"completionRatio\" : 100 , \"color\" : [ 0 , 255 , 0 ] } ] } } getSteps Returns the list of available steps for the current project. Query attributes getSteps Reply content The Daemon replies with the list of Steps. steps : array of objects . The steps. Each step is an object with: shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" . Example Query: getSteps Reply: { \"accepted\" : true , \"query\" : \"getSteps\" , \"success\" : true , \"message\" : \"Step list retrived.\" , \"content\" : { \"steps\" : [ { \"shortName\" : \"RIG\" , \"name\" : \"Rigging\" , \"folder\" : \"/path/to/RIG\" , \"type\" : \"ASSET_PRODUCTION\" }, { \"shortName\" : \"ANIM\" , \"name\" : \"Animation\" , \"folder\" : \"/path/to/ANIM\" , \"type\" : \"SHOT_PRODUCTION\" } ] } } setCurrentProject Sets the current project Query attributes setCurrentProject shortName : string . The short name (or the uuid) of the project. Reply content The Daemon replies with more information about the project. name : string . The name of the project. shortName : string . The short name of the project. path : string . The absolute path to the project. uuid : boolean . The internal unique identifier of the project. Example Query: setCurrentProject&name=The Project&shortName=PROJ Reply: { \"accepted\" : true , \"query\" : \"setCurrentProject\" , \"success\" : true , \"message\" : \"Current project set to: The Project.\" , \"content\" : { \"name\" : \"The Project\" , \"shortName\" : \"PROJ\" , \"path\" : \"/home/user/Ramses/PROJECTS/The Project\" , \"uuid\" : \"12456abc\" } }","title":"Queries"},{"location":"dev/daemon-reference/queries/#ramses-daemon-query-reference","text":"Ramses Daemon: query reference ping Query attributes Reply content Example raise Query attributes Reply content Example getAssets Query attributes Reply content Example getAssetGroups Query attributes Reply content Example getCurrentProject Query attributes Reply content Example getCurrentStatus Query attributes Reply content Example getCurrentUser Query attributes Reply content Example getPipes Query attributes Reply content Example getProjects Query attributes Reply content Example getShots Query attributes Reply content Example getStates Query attributes Reply content Example getSteps Query attributes Reply content Example setCurrentProject Query attributes Reply content Example","title":"Ramses Daemon: query reference"},{"location":"dev/daemon-reference/queries/#ping","text":"Checks if the Daemon is running, and gets its version and current user information.","title":"ping"},{"location":"dev/daemon-reference/queries/#query-attributes","text":"ping","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content","text":"The Daemon replies with its version and information about the current user. version : string . The version of the client/daemon. ramses : string . The name of the client, should be \u201cRamses\u201d for the official client. userName : string . The name of the user. Empty string if there\u2019s no logged-in user. userShortName : string . The short name of the user. Empty string if there\u2019s no logged-in user. logged-in :: boolean . True if a user is logged-in.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example","text":"Query: ping Reply: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Hi, this is the Ramses Daemon.\" , \"content\" : { \"version\" : \"0.0.1\" , \"ramses\" : \"Ramses\" , \"userName\" : \"John Doe\" , \"userShortName\" : \"J.Doe\" , \"logged-in\" : true } }","title":"Example"},{"location":"dev/daemon-reference/queries/#raise","text":"Raises the client application main window.","title":"raise"},{"location":"dev/daemon-reference/queries/#query-attributes_1","text":"raise","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_1","text":"None","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_1","text":"Query: raise","title":"Example"},{"location":"dev/daemon-reference/queries/#getassets","text":"Returns the list of assets for the current project.","title":"getAssets"},{"location":"dev/daemon-reference/queries/#query-attributes_2","text":"getAssets","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_2","text":"The Daemon replies with the list of assets. assets : array of objects . The assets. Each asset is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset. tags : array of strings . The tags group : string . The containing group name.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_2","text":"Query: getAssets Reply: { \"accepted\" : true , \"query\" : \"getAssets\" , \"success\" : true , \"message\" : \"Asset list retrived.\" , \"content\" : { \"assets\" : [ { \"shortName\" : \"A1\" , \"name\" : \"Asset 01\" , \"folder\" : \"/path/to/A1\" , \"tags\" : [ \"tag1\" , \"tag2\" , \"tag3\" ], \"group\" : \"Asset Group\" }, { \"shortName\" : \"A2\" , \"name\" : \"Asset 02\" , \"folder\" : \"/path/to/A2\" , \"tags\" : [ \"tag1\" , \"tag2\" , \"tag3\" ], \"group\" : \"Asset Group\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getassetgroups","text":"Returns the list of asset groups for the current project.","title":"getAssetGroups"},{"location":"dev/daemon-reference/queries/#query-attributes_3","text":"getAssetGroups","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_3","text":"The Daemon replies with the list of asset groups. assetGroups : array of objects . The asset groups. Each asset group is an object with: shortName : string . The short name of the asset. name : string . The name of the asset. folder : string . The absolute path of the folder containing the asset.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_3","text":"Query: getAssetGroups Reply: { \"accepted\" : true , \"query\" : \"getAgetAssetGroupsssets\" , \"success\" : true , \"message\" : \"Asset group list retrived.\" , \"content\" : { \"assets\" : [ { \"shortName\" : \"CHAR\" , \"name\" : \"Characters\" , \"folder\" : \"/path/to/CHAR\" }, { \"shortName\" : \"PROPS\" , \"name\" : \"Props\" , \"folder\" : \"/path/to/PROPS\" }, { \"shortName\" : \"SETS\" , \"name\" : \"Sets\" , \"folder\" : \"/path/to/SETS\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getcurrentproject","text":"Returns the current project.","title":"getCurrentProject"},{"location":"dev/daemon-reference/queries/#query-attributes_4","text":"getCurrentProject","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_4","text":"The Daemon replies with the project. shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_4","text":"Query: getCurrentProject Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Current project is: Project 01.\" , \"content\" : { \"shortName\" : \"P1\" , \"name\" : \"Project 01\" , \"width\" : 2048 , \"height\" : 858 , \"framerate\" : 24.0 , \"folder\" : \"/path/to/P1\" } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getcurrentstatus","text":"Returns the current status list (one per step) for a given item (shot or asset).","title":"getCurrentStatus"},{"location":"dev/daemon-reference/queries/#query-attributes_5","text":"getCurrentStatus shortName : string . The item short name. name : string . The item name. type : string . One of \"ASSET\" or \"SHOT\" .","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_5","text":"The Daemon replies with the list of status. status : array of objects . The status. Each status is an object with: step : string . The short name of the associated step. comment : string . The comment. *completionRatio: int . The completion ratio, in the range [0,100]. date : string . The date and time, in the format \u201cyyyy-MM-dd hh:mm:ss\u201d. state : string . The state short name. user : string . The user short name. version : int . The version.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_5","text":"Query: getCurrentStatus&shortName=TRI&name=Tristan&type=ASSET Reply: { \"accepted\" : true , \"query\" : \"getCurrentUser\" , \"success\" : true , \"message\" : \"Current user is: John Doe.\" , \"content\" : { \"status\" : [ { \"step\" : \"RIG\" , \"comment\" : \"Working on it!\" , \"completionRatio\" : 75 , \"date\" : \"2021-04-12 10:55:23\" , \"state\" : \"WIP\" , \"user\" : \"Duduf\" , \"version\" : 12 }, { \"step\" : \"MOD\" , \"comment\" : \"Finished\" , \"completionRatio\" : 100 , \"date\" : \"2021-04-12 10:55:23\" , \"state\" : \"OK\" , \"user\" : \"Duduf\" , \"version\" : 5 } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getcurrentuser","text":"Returns the current user.","title":"getCurrentUser"},{"location":"dev/daemon-reference/queries/#query-attributes_6","text":"getCurrentUser","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_6","text":"The Daemon replies with the user. shortName : string . The short name of the user. name : string . The name of the user. role : string . The role of the user, one of 'STANDARD' , 'LEAD' , 'PROJECT_ADMIN' , 'ADMIN' . folderPath : string . The absolute path to the user folder.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_6","text":"Query: getCurrentUser Reply: { \"accepted\" : true , \"query\" : \"getCurrentUser\" , \"success\" : true , \"message\" : \"Current user is: John Doe.\" , \"content\" : { \"shortName\" : \"John\" , \"name\" : \"John Doe\" , \"role\" : \"LEAD\" , \"folderPath\" : \"/home/john/Ramses/Users/John\" } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getpipes","text":"Returns the list of pipes for the current project.","title":"getPipes"},{"location":"dev/daemon-reference/queries/#query-attributes_7","text":"getPipes","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_7","text":"The Daemon replies with the list of Pipes. pipes : array of objects . The pipes. Each pipe is an object with: inputStepShortName : string . The short name of the input step. outputStepShortName : string . The short name of the output step. fileType : object . The file type, an object with: name : string . The name of the file type shortName : string . The short name of the file type. extensions : array of string . The extensions, including the leading . .","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_7","text":"Query: getPipes Reply: { \"accepted\" : true , \"query\" : \"getPipes\" , \"success\" : true , \"message\" : \"Pipeline retrieved.\" , \"content\" : { \"pipes\" : [ { \"inputStepShortName\" : \"TEX\" , \"outputStepShortName\" : \"MOD\" , \"fileType\" : { \"name\" : \"Alembic geometry data\" , \"shortName\" : \"abc\" , \"extensions\" : [ \".abc\" ] } }, { \"inputStepShortName\" : \"STORY\" , \"outputStepShortName\" : \"CD\" , \"fileType\" : { \"name\" : \"JPEG Image\" , \"shortName\" : \"jpg\" , \"extensions\" : [ \".jpg\" , \".jpeg\" ] } } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getprojects","text":"Returns the list of available projects.","title":"getProjects"},{"location":"dev/daemon-reference/queries/#query-attributes_8","text":"getProjects","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_8","text":"The Daemon replies with the list of projects. projects : array of objects . The projects. Each project is an object with: shortName : string . The short name of the project. name : string . The name of the project. width : int . The width of the project in pixels. height : int . The width of the project in pixels. framerate : float . The framerate of the project. folder : string . The absolute path of the folder containing the project.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_8","text":"Query: getProjects Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Project list retrived.\" , \"content\" : { \"projects\" : [ { \"shortName\" : \"P1\" , \"name\" : \"Project 01\" , \"width\" : 2048 , \"height\" : 858 , \"framerate\" : 24.0 , \"folder\" : \"/path/to/P1\" }, { \"shortName\" : \"P2\" , \"name\" : \"Project 02\" , \"width\" : 1998 , \"height\" : 1080 , \"framerate\" : 60.0 , \"folder\" : \"/path/to/P2\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getshots","text":"Returns the list of assets for the current project.","title":"getShots"},{"location":"dev/daemon-reference/queries/#query-attributes_9","text":"getShots filter : string . The filter is a way to get a subset of the shots: the daemon will return only shots containing the filter in their name or short name. The filter can contain a wildcard *","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_9","text":"The Daemon replies with the list of Shots. shots : array of objects . The shots. Each shot is an object with: shortName : string . The short name of the shot. name : string . The name of the shot. folder : string . The absolute path of the folder containing the shot. duration : float . The duration of the shot, in seconds","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_9","text":"Query: getShots&filter=Seq01-* Reply: { \"accepted\" : true , \"query\" : \"getShots\" , \"success\" : true , \"message\" : \"Shot list retrived.\" , \"content\" : { \"shots\" : [ { \"shortName\" : \"Seq01-S1\" , \"name\" : \"Shot 01\" , \"folder\" : \"/path/to/S1\" , \"duration\" : 1.25 }, { \"shortName\" : \"Seq01-S2\" , \"name\" : \"Shot 02\" , \"folder\" : \"/path/to/S2\" , \"duration\" : 2.4 } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getstates","text":"Returns the list of available states.","title":"getStates"},{"location":"dev/daemon-reference/queries/#query-attributes_10","text":"getStates","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_10","text":"The Daemon replies with the list of States. states : array of objects . The states. Each states is an object with: shortName : string . The short name of the state. name : string . The name of the state. completionRatio : float . The completion ratio of the state, in the range [0, 100] . color : array of integers . The color for this state, [R, G, B] in the range [0, 255] .","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_10","text":"Query: getStates Reply: { \"accepted\" : true , \"query\" : \"getStates\" , \"success\" : true , \"message\" : \"State list retrived.\" , \"content\" : { \"states\" : [ { \"shortName\" : \"TODO\" , \"name\" : \"Waiting...\" , \"completionRatio\" : 0 , \"color\" : [ 50 , 50 , 50 ] }, { \"shortName\" : \"WIP\" , \"name\" : \"Work In Progress\" , \"completionRatio\" : 50 , \"color\" : [ 255 , 0 , 0 ] }, { \"shortName\" : \"OK\" , \"name\" : \"Finished and approved\" , \"completionRatio\" : 100 , \"color\" : [ 0 , 255 , 0 ] } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#getsteps","text":"Returns the list of available steps for the current project.","title":"getSteps"},{"location":"dev/daemon-reference/queries/#query-attributes_11","text":"getSteps","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_11","text":"The Daemon replies with the list of Steps. steps : array of objects . The steps. Each step is an object with: shortName : string . The short name of the step. name : string . The name of the step. folder : string . The absolute path to the common folder of the step. type : string . One of \"PRE_PRODUCTION\" , \"ASSET_PRODUCTION\" , \"SHOT_PRODUCTION\" , \"POST_PRODUCTION\" .","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_11","text":"Query: getSteps Reply: { \"accepted\" : true , \"query\" : \"getSteps\" , \"success\" : true , \"message\" : \"Step list retrived.\" , \"content\" : { \"steps\" : [ { \"shortName\" : \"RIG\" , \"name\" : \"Rigging\" , \"folder\" : \"/path/to/RIG\" , \"type\" : \"ASSET_PRODUCTION\" }, { \"shortName\" : \"ANIM\" , \"name\" : \"Animation\" , \"folder\" : \"/path/to/ANIM\" , \"type\" : \"SHOT_PRODUCTION\" } ] } }","title":"Example"},{"location":"dev/daemon-reference/queries/#setcurrentproject","text":"Sets the current project","title":"setCurrentProject"},{"location":"dev/daemon-reference/queries/#query-attributes_12","text":"setCurrentProject shortName : string . The short name (or the uuid) of the project.","title":"Query attributes"},{"location":"dev/daemon-reference/queries/#reply-content_12","text":"The Daemon replies with more information about the project. name : string . The name of the project. shortName : string . The short name of the project. path : string . The absolute path to the project. uuid : boolean . The internal unique identifier of the project.","title":"Reply content"},{"location":"dev/daemon-reference/queries/#example_12","text":"Query: setCurrentProject&name=The Project&shortName=PROJ Reply: { \"accepted\" : true , \"query\" : \"setCurrentProject\" , \"success\" : true , \"message\" : \"Current project set to: The Project.\" , \"content\" : { \"name\" : \"The Project\" , \"shortName\" : \"PROJ\" , \"path\" : \"/home/user/Ramses/PROJECTS/The Project\" , \"uuid\" : \"12456abc\" } }","title":"Example"},{"location":"dev/files/naming/","text":"Regular Expressions for files and folder naming. Ramses uses specific file and folder naming conventions . Here are useful regular expressions to manipulate them. Note All names used by Ramses should be compated ignoring the case. Thus all regular expressions should use the i flag. Regular Expressions for files and folder naming. Short Names (IDs) Status and versions Resource names File names Master media file names Short Names (IDs) /[a-z0-9+-]{1,10}/gi Short names , or ID s are made exclusively of a-z , 0-1 and +- characters, and cannot be more than 10 characters. Status and versions /(PUB|WIP|V)?([0-9]+)/gi The first matching group contains the status (and may be empty), and the second group is the version number. Note The string in the first matching group should be dynamically built using the list of available status ID s ( short names ). By default, it should at least contain the three strings shown in this example: WIP , PUB , and V . Resource names /(?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+/gi Resource names can be made of a-z , 0-9 , +- and white spaces but must not start with a version scheme. File names This is the regular expression for validating, matching and decomposing file names. /^([a-z0-9+-]{1,10})_(?:([AS])_([a-z0-9+-]{1,10})|(G))_([a-z0-9+-]{1,10})(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+))?(?:_(PUB|WIP|V)?([0-9]+))?\\.([a-z0-9.]+)$/gi Here is the list of matching groups: Project ID Type: A (Asset) or S (Shot) or empty (for general items) Asset or Shot ID or empty (for general items) Type: G (General) or empty Step ID Resource name or empty Status or empty Version number or empty Extension or empty If any string does not match this regular expression, it means it does not follow the Ramses naming scheme. Master media file names /^ ([ a - z0 - 9 +- ]{ 1 , 10 }) _ ([ a - z0 - 9 ]{ 1 , 10 })( ?:- ([ a - z0 - 9 ]{ 1 , 10 }) ? ) _ ( \\d+ ) x ( \\d+ )( i | p ) ? _ ( \\d+\\.?\\d* )( ?:fps ) ? ( ?: _ ([ a - z ] + )) ? ( ?: _ ([ a - z ] + ) st ) \\. ([ a - z0 - 9. ] + ) / gi Here is the list of matching groups: Project ID Codec ID Colorspace ID Width Height p (progressive), i (interlaced), or empty Framerate Language or empty Subtitles language or empty Extension","title":"Naming"},{"location":"dev/files/naming/#regular-expressions-for-files-and-folder-naming","text":"Ramses uses specific file and folder naming conventions . Here are useful regular expressions to manipulate them. Note All names used by Ramses should be compated ignoring the case. Thus all regular expressions should use the i flag. Regular Expressions for files and folder naming. Short Names (IDs) Status and versions Resource names File names Master media file names","title":"Regular Expressions for files and folder naming."},{"location":"dev/files/naming/#short-names-ids","text":"/[a-z0-9+-]{1,10}/gi Short names , or ID s are made exclusively of a-z , 0-1 and +- characters, and cannot be more than 10 characters.","title":"Short Names (IDs)"},{"location":"dev/files/naming/#status-and-versions","text":"/(PUB|WIP|V)?([0-9]+)/gi The first matching group contains the status (and may be empty), and the second group is the version number. Note The string in the first matching group should be dynamically built using the list of available status ID s ( short names ). By default, it should at least contain the three strings shown in this example: WIP , PUB , and V .","title":"Status and versions"},{"location":"dev/files/naming/#resource-names","text":"/(?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+/gi Resource names can be made of a-z , 0-9 , +- and white spaces but must not start with a version scheme.","title":"Resource names"},{"location":"dev/files/naming/#file-names","text":"This is the regular expression for validating, matching and decomposing file names. /^([a-z0-9+-]{1,10})_(?:([AS])_([a-z0-9+-]{1,10})|(G))_([a-z0-9+-]{1,10})(?:_((?!(?:PUB|WIP|V)?[0-9]+)[a-z0-9+\\s-]+))?(?:_(PUB|WIP|V)?([0-9]+))?\\.([a-z0-9.]+)$/gi Here is the list of matching groups: Project ID Type: A (Asset) or S (Shot) or empty (for general items) Asset or Shot ID or empty (for general items) Type: G (General) or empty Step ID Resource name or empty Status or empty Version number or empty Extension or empty If any string does not match this regular expression, it means it does not follow the Ramses naming scheme.","title":"File names"},{"location":"dev/files/naming/#master-media-file-names","text":"/^ ([ a - z0 - 9 +- ]{ 1 , 10 }) _ ([ a - z0 - 9 ]{ 1 , 10 })( ?:- ([ a - z0 - 9 ]{ 1 , 10 }) ? ) _ ( \\d+ ) x ( \\d+ )( i | p ) ? _ ( \\d+\\.?\\d* )( ?:fps ) ? ( ?: _ ([ a - z ] + )) ? ( ?: _ ([ a - z ] + ) st ) \\. ([ a - z0 - 9. ] + ) / gi Here is the list of matching groups: Project ID Codec ID Colorspace ID Width Height p (progressive), i (interlaced), or empty Framerate Language or empty Subtitles language or empty Extension","title":"Master media file names"},{"location":"dev/server-reference/","text":"Ramses Server API The Ramses server provides a standard http(s) REST API . If you\u2019re developping your own client (or contributing to Ramses Client ), you can easily exchange data with the server using this reference. Queries are made by building a URI containing all information, and the server replies with a JSON object in the body. For almost all queries (i.e. all but ping and login ) you\u2019ll need to be logged in. Initiating a connection to the server usually follows these steps: ping to check if the server is available and check its version. login to authenticate yourself and get a session token. For the examples in this documentation, we assume the ramses server is available at http://your.server/ramses/ . For the sake of readability, the JSON replies are formatted with indentation and new lines in this documentation, but the server actually uses one-line replies. Server Replies The JSON objects sent by the server all have the same content: accepted : boolean . True if the server has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the server has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the client. query : string . The query that was made that the server is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details. Queries Note remove queries do not actually delete data from the database, but set a removed attribute to true, to prevent any data loss. For now, the only way to permanently delete data is to edit the database by yourself (using SQL queries or MySQL workbench or phpmyadmin, etc.) There is no query yet to restore data which has been removed, but using the create queries with the same name and shortname as the removed item will restore it. General ping login Users updateUser updatePassword getUsers createUser removeUser Projects createProject getProjects updateProject removeProject assignStep unassignStep Steps and Template Steps createStep updateStep removeStep assignUser unassignUser assignApplication unassignApplication Asset Groups and Template Asset Groups createAssetGroup updateAssetGroup removeAssetGroup Assets createAsset updateAsset removeAsset setAssetStatus Sequences createSequence updateSequence removeSequence Shots createShot updateShot moveShot removeShot setShotStatus States createState getStates updateState removeState File Types createFileType getFileTypes updateFileType removeFileType Applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType Pipes createPipe updatePipe removePipe Status updateStatus removeStatus","title":"Reference"},{"location":"dev/server-reference/#ramses-server-api","text":"The Ramses server provides a standard http(s) REST API . If you\u2019re developping your own client (or contributing to Ramses Client ), you can easily exchange data with the server using this reference. Queries are made by building a URI containing all information, and the server replies with a JSON object in the body. For almost all queries (i.e. all but ping and login ) you\u2019ll need to be logged in. Initiating a connection to the server usually follows these steps: ping to check if the server is available and check its version. login to authenticate yourself and get a session token. For the examples in this documentation, we assume the ramses server is available at http://your.server/ramses/ . For the sake of readability, the JSON replies are formatted with indentation and new lines in this documentation, but the server actually uses one-line replies.","title":"Ramses Server API"},{"location":"dev/server-reference/#server-replies","text":"The JSON objects sent by the server all have the same content: accepted : boolean . True if the server has recognized the query and accepted it. Will be False if the query does not exist. success : boolean . True if the server has successfully processed the query, False in case of any error. message : string . A short feedback about the result, which can be shown to the user by the client. query : string . The query that was made that the server is replying to. content : object . The actual content of the reply, which varies depending on the query. Read this reference for more details.","title":"Server Replies"},{"location":"dev/server-reference/#queries","text":"Note remove queries do not actually delete data from the database, but set a removed attribute to true, to prevent any data loss. For now, the only way to permanently delete data is to edit the database by yourself (using SQL queries or MySQL workbench or phpmyadmin, etc.) There is no query yet to restore data which has been removed, but using the create queries with the same name and shortname as the removed item will restore it. General ping login Users updateUser updatePassword getUsers createUser removeUser Projects createProject getProjects updateProject removeProject assignStep unassignStep Steps and Template Steps createStep updateStep removeStep assignUser unassignUser assignApplication unassignApplication Asset Groups and Template Asset Groups createAssetGroup updateAssetGroup removeAssetGroup Assets createAsset updateAsset removeAsset setAssetStatus Sequences createSequence updateSequence removeSequence Shots createShot updateShot moveShot removeShot setShotStatus States createState getStates updateState removeState File Types createFileType getFileTypes updateFileType removeFileType Applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType Pipes createPipe updatePipe removePipe Status updateStatus removeStatus","title":"Queries"},{"location":"dev/server-reference/applications/","text":"Queries for managing applications Queries for managing applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType createApplication Creates a new application e in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. executableFilePath : string . The path to the main executable binary of the application. Don\u2019t forget to encode / and \\ in the URL! uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createFileType&name=Autodesk Maya&shortName=Maya&executableFilePath=%2Fusr%2Fbin%2Fmaya&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createApplication\" , \"success\" : true , \"message\" : \"Application \\\"Maya\\\" created.\" , \"content\" : { } } getApplications Retrieves the list of all applications. Query attributes: None Reply content: The server replies an array of application information. Each application is an object with the following attributes: name : string . The name of the application. shortName : string . The short name of the application. executableFilePath : string . The path to the executable binary of the application. uuid : string . The Universal Unique Identifier of this application. Examples: Query: http://your.server/ramses/?getApplications&token=123 Reply: { \"accepted\" : true , \"query\" : \"getApplications\" , \"success\" : true , \"message\" : \"Applications list retrieved.\" , \"content\" : [ { \"name\" : \"Autodesk Maya\" , \"shortName\" : \"Maya\" , \"executableFilePath\" : \"/usr/bin/maya\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Blender\" , \"shortName\" : \"Blender\" , \"executableFilePath\" : \"/usr/bin/blender\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] } updateApplication Update application info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this file type. executableFilePath : string . The path to the executable binary of the application. Don\u2019t forget to encode / and \\ in the URL! token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateApplication&name=Autodesk Maya&shortName=Maya&executableFilePath=%2Fusr%2Fbin%2Fmaya&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateApplication\" , \"success\" : true , \"message\" : \"Application \\\"Maya\\\" updated.\" , \"content\" : { } } removeApplication Removes an application from the database. Query attributes: uuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeApplication&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeApplication\" , \"success\" : true , \"message\" : \"Application uuid123 removed.\" , \"content\" : { } } assignFileType Assigns a file type to an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . Default is native . token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignFileType&applicationUuid=123&fileTypeUuid=456&type=import&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignFileType\" , \"success\" : true , \"message\" : \"File type assigned to application as import type.\" , \"content\" : { } } unassignFileType Unassigns a file type from an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . If left empty, the file type is removed for all types. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignUser&applicationUuid=123&fileTypeUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignFileType\" , \"success\" : true , \"message\" : \"File type unassigned from application.\" , \"content\" : { } }","title":"Application queries"},{"location":"dev/server-reference/applications/#queries-for-managing-applications","text":"Queries for managing applications createApplication getApplications updateApplication removeApplication assignFileType unassignFileType","title":"Queries for managing applications"},{"location":"dev/server-reference/applications/#createapplication","text":"Creates a new application e in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. executableFilePath : string . The path to the main executable binary of the application. Don\u2019t forget to encode / and \\ in the URL! uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createFileType&name=Autodesk Maya&shortName=Maya&executableFilePath=%2Fusr%2Fbin%2Fmaya&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createApplication\" , \"success\" : true , \"message\" : \"Application \\\"Maya\\\" created.\" , \"content\" : { } }","title":"createApplication"},{"location":"dev/server-reference/applications/#getapplications","text":"Retrieves the list of all applications. Query attributes: None Reply content: The server replies an array of application information. Each application is an object with the following attributes: name : string . The name of the application. shortName : string . The short name of the application. executableFilePath : string . The path to the executable binary of the application. uuid : string . The Universal Unique Identifier of this application. Examples: Query: http://your.server/ramses/?getApplications&token=123 Reply: { \"accepted\" : true , \"query\" : \"getApplications\" , \"success\" : true , \"message\" : \"Applications list retrieved.\" , \"content\" : [ { \"name\" : \"Autodesk Maya\" , \"shortName\" : \"Maya\" , \"executableFilePath\" : \"/usr/bin/maya\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Blender\" , \"shortName\" : \"Blender\" , \"executableFilePath\" : \"/usr/bin/blender\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] }","title":"getApplications"},{"location":"dev/server-reference/applications/#updateapplication","text":"Update application info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this file type. executableFilePath : string . The path to the executable binary of the application. Don\u2019t forget to encode / and \\ in the URL! token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateApplication&name=Autodesk Maya&shortName=Maya&executableFilePath=%2Fusr%2Fbin%2Fmaya&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateApplication\" , \"success\" : true , \"message\" : \"Application \\\"Maya\\\" updated.\" , \"content\" : { } }","title":"updateApplication"},{"location":"dev/server-reference/applications/#removeapplication","text":"Removes an application from the database. Query attributes: uuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeApplication&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeApplication\" , \"success\" : true , \"message\" : \"Application uuid123 removed.\" , \"content\" : { } }","title":"removeApplication"},{"location":"dev/server-reference/applications/#assignfiletype","text":"Assigns a file type to an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . Default is native . token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignFileType&applicationUuid=123&fileTypeUuid=456&type=import&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignFileType\" , \"success\" : true , \"message\" : \"File type assigned to application as import type.\" , \"content\" : { } }","title":"assignFileType"},{"location":"dev/server-reference/applications/#unassignfiletype","text":"Unassigns a file type from an application. Query attributes: applicationUuid : string . The Applcation\u2019s Universal Unique Identifier. fileTypeUuid : string . The File Type\u2019s Universal Unique Identifier. type : string (optional). The type, an enumerated value in native , import , export . If left empty, the file type is removed for all types. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignUser&applicationUuid=123&fileTypeUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignFileType\" , \"success\" : true , \"message\" : \"File type unassigned from application.\" , \"content\" : { } }","title":"unassignFileType"},{"location":"dev/server-reference/assetgroups/","text":"Queries for managing asset groups Note The API also provides an access to \u201ctemplate asset groups\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateAssetGroup instead of createAssetGroup ) Hint There is no method to retrieve asset groups directly; asset groups are returned by the project method getProjects Queries for managing asset groups createAssetGroup updateAssetGroup removeAssetGroup createAssetGroup Creates a new asset group in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the asset group to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note When creating a template asset group with createTemplateAssetGroup , omit the projectUuid attribute. Reply content: Empty Examples: Query: http://your.server/ramses/?createAssetGroup&name=Rigging&shortName=RIG&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group \\\"CHAR\\\" created.\" , \"content\" : { } } updateAssetGroup Update asset group info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateAssetGroup&name=Rigging&shortName=RIG&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group \\\"CHAR\\\" updated.\" , \"content\" : { } } removeAssetGroup Removes an asset group from the database. Query attributes: uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeAssetGroup&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group uuid123 removed.\" , \"content\" : { } }","title":"Asset Group queries"},{"location":"dev/server-reference/assetgroups/#queries-for-managing-asset-groups","text":"Note The API also provides an access to \u201ctemplate asset groups\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateAssetGroup instead of createAssetGroup ) Hint There is no method to retrieve asset groups directly; asset groups are returned by the project method getProjects Queries for managing asset groups createAssetGroup updateAssetGroup removeAssetGroup","title":"Queries for managing asset groups"},{"location":"dev/server-reference/assetgroups/#createassetgroup","text":"Creates a new asset group in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the asset group to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note When creating a template asset group with createTemplateAssetGroup , omit the projectUuid attribute. Reply content: Empty Examples: Query: http://your.server/ramses/?createAssetGroup&name=Rigging&shortName=RIG&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group \\\"CHAR\\\" created.\" , \"content\" : { } }","title":"createAssetGroup"},{"location":"dev/server-reference/assetgroups/#updateassetgroup","text":"Update asset group info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateAssetGroup&name=Rigging&shortName=RIG&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group \\\"CHAR\\\" updated.\" , \"content\" : { } }","title":"updateAssetGroup"},{"location":"dev/server-reference/assetgroups/#removeassetgroup","text":"Removes an asset group from the database. Query attributes: uuid : string . The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeAssetGroup&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeAssetGroup\" , \"success\" : true , \"message\" : \"Asset Group uuid123 removed.\" , \"content\" : { } }","title":"removeAssetGroup"},{"location":"dev/server-reference/assets/","text":"Queries for managing assets Hint There is no method to retrieve assets directly; assets are returned by the project method getProjects Queries for managing assets createAsset updateAsset removeAsset setAssetStatus createAsset Creates a new asset in the database and assigns it to an asset group. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createAsset&name=Tristan&shortName=TRI&tags=Main, Warrior&assetGroupUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createAsset\" , \"success\" : true , \"message\" : \"Asset \\\"TRI\\\" created.\" , \"content\" : { } } updateAsset Update asset info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateAsset&name=Tristan&shortName=TRI&tags=Main, Warrior&assetGroupUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateAsset\" , \"success\" : true , \"message\" : \"Asset \\\"TRI\\\" updated.\" , \"content\" : { } } removeAsset Removes an asset group from the database. Query attributes: uuid : string . The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeAssetGroup&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeAsset\" , \"success\" : true , \"message\" : \"Asset uuid123 removed.\" , \"content\" : { } } setAssetStatus Sets a new status for an asset Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. assetUuid : string . The asset\u2019s Universal Unique Identifier. completionRation : int (optionnal). The current completion ratio in the range [0, 100]. userUuid : string (optionnal). The uuid of the user setting the status. Will use the currently connected user if not provided. stateUuid : string . The uuid of the associated state. comment : string (optionnal). A comment. version : int (optionnal). The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?setAssetStatus&uuid=123&assetUuid=123&completionRatio=50&userUuid=123&stateUuid=123&comment=A nice comment&version=12&stepUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"setAssetStatus\" , \"success\" : true , \"message\" : \"Asset status updated.\" , \"content\" : { } }","title":"Asset queries"},{"location":"dev/server-reference/assets/#queries-for-managing-assets","text":"Hint There is no method to retrieve assets directly; assets are returned by the project method getProjects Queries for managing assets createAsset updateAsset removeAsset setAssetStatus","title":"Queries for managing assets"},{"location":"dev/server-reference/assets/#createasset","text":"Creates a new asset in the database and assigns it to an asset group. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createAsset&name=Tristan&shortName=TRI&tags=Main, Warrior&assetGroupUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createAsset\" , \"success\" : true , \"message\" : \"Asset \\\"TRI\\\" created.\" , \"content\" : { } }","title":"createAsset"},{"location":"dev/server-reference/assets/#updateasset","text":"Update asset info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. assetGroupUuid : string . The UUID of the asset group to assign the asset to. tags : string . A comma separated list of tags. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateAsset&name=Tristan&shortName=TRI&tags=Main, Warrior&assetGroupUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateAsset\" , \"success\" : true , \"message\" : \"Asset \\\"TRI\\\" updated.\" , \"content\" : { } }","title":"updateAsset"},{"location":"dev/server-reference/assets/#removeasset","text":"Removes an asset group from the database. Query attributes: uuid : string . The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeAssetGroup&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeAsset\" , \"success\" : true , \"message\" : \"Asset uuid123 removed.\" , \"content\" : { } }","title":"removeAsset"},{"location":"dev/server-reference/assets/#setassetstatus","text":"Sets a new status for an asset Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. assetUuid : string . The asset\u2019s Universal Unique Identifier. completionRation : int (optionnal). The current completion ratio in the range [0, 100]. userUuid : string (optionnal). The uuid of the user setting the status. Will use the currently connected user if not provided. stateUuid : string . The uuid of the associated state. comment : string (optionnal). A comment. version : int (optionnal). The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?setAssetStatus&uuid=123&assetUuid=123&completionRatio=50&userUuid=123&stateUuid=123&comment=A nice comment&version=12&stepUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"setAssetStatus\" , \"success\" : true , \"message\" : \"Asset status updated.\" , \"content\" : { } }","title":"setAssetStatus"},{"location":"dev/server-reference/filetypes/","text":"Queries for managing file types Queries for managing file types createFileType getFileTypes updateFileType removeFileType createFileType Creates a new file type in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. This should be the default file extension. extensions : string . The extensions used by this type, a comma separated list. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createFileType&name=Maya Ascii&shortName=.ma&extensions=ma&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createFileType\" , \"success\" : true , \"message\" : \"File type \\\".ma\\\" created.\" , \"content\" : { } } getFileTypes Retrieves the list of all file types. Query attributes: None Reply content: The server replies an array of file type information. Each file type is an object with the following attributes: name : string . The name of the file type. shortName : string . The default extension. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. uuid : string . The Universal Unique Identifier of this file type. Examples: Query: http://your.server/ramses/?getFileTypes&token=123 Reply: { \"accepted\" : true , \"query\" : \"getFileTypes\" , \"success\" : true , \"message\" : \"File types list retrieved.\" , \"content\" : [ { \"name\" : \"Maya Ascii\" , \"shortName\" : \".ma\" , \"extensions\" : \"ma\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Maya Binary\" , \"shortName\" : \".mb\" , \"extensions\" : \"mb\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Image (Jpeg)\" , \"shortName\" : \".jpg\" , \"extensions\" : \"jpg,jpeg\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] } updateFileType Update file type info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this file type. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateFileType&name=Maya Ascii&shortName=.ma&extensions=ma&previewable=0&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateFileType\" , \"success\" : true , \"message\" : \"File type \\\".ma\\\" updated.\" , \"content\" : { } } removeFileType Removes a file type from the database. Query attributes: uuid : string . The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeFileType&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeFileType\" , \"success\" : true , \"message\" : \"File type uuid123 removed.\" , \"content\" : { } }","title":"File type queries"},{"location":"dev/server-reference/filetypes/#queries-for-managing-file-types","text":"Queries for managing file types createFileType getFileTypes updateFileType removeFileType","title":"Queries for managing file types"},{"location":"dev/server-reference/filetypes/#createfiletype","text":"Creates a new file type in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. This should be the default file extension. extensions : string . The extensions used by this type, a comma separated list. uuid : string (optionnal). The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createFileType&name=Maya Ascii&shortName=.ma&extensions=ma&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createFileType\" , \"success\" : true , \"message\" : \"File type \\\".ma\\\" created.\" , \"content\" : { } }","title":"createFileType"},{"location":"dev/server-reference/filetypes/#getfiletypes","text":"Retrieves the list of all file types. Query attributes: None Reply content: The server replies an array of file type information. Each file type is an object with the following attributes: name : string . The name of the file type. shortName : string . The default extension. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. uuid : string . The Universal Unique Identifier of this file type. Examples: Query: http://your.server/ramses/?getFileTypes&token=123 Reply: { \"accepted\" : true , \"query\" : \"getFileTypes\" , \"success\" : true , \"message\" : \"File types list retrieved.\" , \"content\" : [ { \"name\" : \"Maya Ascii\" , \"shortName\" : \".ma\" , \"extensions\" : \"ma\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Maya Binary\" , \"shortName\" : \".mb\" , \"extensions\" : \"mb\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" }, { \"name\" : \"Image (Jpeg)\" , \"shortName\" : \".jpg\" , \"extensions\" : \"jpg,jpeg\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" } ] }","title":"getFileTypes"},{"location":"dev/server-reference/filetypes/#updatefiletype","text":"Update file type info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this file type. extensions : string . The extensions used by this type, a comma separated list. previewable : int . Whether this file type is used for previews. 1 or 0. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateFileType&name=Maya Ascii&shortName=.ma&extensions=ma&previewable=0&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateFileType\" , \"success\" : true , \"message\" : \"File type \\\".ma\\\" updated.\" , \"content\" : { } }","title":"updateFileType"},{"location":"dev/server-reference/filetypes/#removefiletype","text":"Removes a file type from the database. Query attributes: uuid : string . The file type\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeFileType&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeFileType\" , \"success\" : true , \"message\" : \"File type uuid123 removed.\" , \"content\" : { } }","title":"removeFileType"},{"location":"dev/server-reference/general/","text":"General queries General queries ping login ping Use this query to test if the server is available before logging in. Reply content: version : string . The version of the current Ramses Server. installed : boolean . False if the server is not correctly installed (i.e. the install script has not been run). See the Server installatio section of this documentation. Examples: Query: http://your.server/ramses/?ping Reply: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Server Ready!\" , \"content\" : { \"version\" : \"0.0.1\" , \"installed\" : true } } login Logs in with a username and a (hashed) password. Query attributes: username : string . The username. password : string . The (hashed) password. Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: The server replies with the user which has logged in. Note that the content also includes the token you\u2019ll need for further requests. name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. token : string . The token to use for further requests. Examples: Query: http://your.server/ramses/?login&username=Duduf&password=123456 Reply: { \"accepted\" : true , \"query\" : \"login\" , \"success\" : true , \"message\" : \"Server Ready!\" , \"content\" : { \"name\" : \"Nicolas Dufresne\" , \"shortName\" : \"Duduf\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/duduf\" , \"role\" : \"admin\" , \"token\" : \"2f5d2e3d4e3af1a9d459c5731247abd1ee9a7123\" } }","title":"General queries"},{"location":"dev/server-reference/general/#general-queries","text":"General queries ping login","title":"General queries"},{"location":"dev/server-reference/general/#ping","text":"Use this query to test if the server is available before logging in. Reply content: version : string . The version of the current Ramses Server. installed : boolean . False if the server is not correctly installed (i.e. the install script has not been run). See the Server installatio section of this documentation. Examples: Query: http://your.server/ramses/?ping Reply: { \"accepted\" : true , \"query\" : \"ping\" , \"success\" : true , \"message\" : \"Server Ready!\" , \"content\" : { \"version\" : \"0.0.1\" , \"installed\" : true } }","title":"ping"},{"location":"dev/server-reference/general/#login","text":"Logs in with a username and a (hashed) password. Query attributes: username : string . The username. password : string . The (hashed) password. Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: The server replies with the user which has logged in. Note that the content also includes the token you\u2019ll need for further requests. name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. token : string . The token to use for further requests. Examples: Query: http://your.server/ramses/?login&username=Duduf&password=123456 Reply: { \"accepted\" : true , \"query\" : \"login\" , \"success\" : true , \"message\" : \"Server Ready!\" , \"content\" : { \"name\" : \"Nicolas Dufresne\" , \"shortName\" : \"Duduf\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/duduf\" , \"role\" : \"admin\" , \"token\" : \"2f5d2e3d4e3af1a9d459c5731247abd1ee9a7123\" } }","title":"login"},{"location":"dev/server-reference/pipes/","text":"Queries for managing pipes Pipes are the connections between Steps which form the pipeline. Hint There is no method to retrieve pipes directly; pipes are returned by the project method getProjects Queries for managing pipes createPipe updatePipe removePipe createPipe Creates a new pipe in the database. Query attributes: inputUuid : string . The UUID of the input step. outputUuid : string . The UUID of the output step. uuid : string (optional). The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createPipe&inputUuid=456&outputUuid=789&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createPipe\" , \"success\" : true , \"message\" : \"Pipe created.\" , \"content\" : { } } updatePipe Update pipe info in the database. Query attributes: inputUuid : string (optionnal). The UUID of the input step. outputUuid : string (optionnal). The UUID of the output step. colorSpaceUuid : string . The UUID of the color space for the files going through this pipe. filetypeUuid : string . The UUID of the file type going through this pipe. uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updatePipe&colorSpaceUuid=123&filetypeUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updatePipe\" , \"success\" : true , \"message\" : \"Pipe updated.\" , \"content\" : { } } removePipe Removes a pipe group from the database. Query attributes: uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removePipe&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removePipe\" , \"success\" : true , \"message\" : \"Pipe removed.\" , \"content\" : { } }","title":"Pipe queries"},{"location":"dev/server-reference/pipes/#queries-for-managing-pipes","text":"Pipes are the connections between Steps which form the pipeline. Hint There is no method to retrieve pipes directly; pipes are returned by the project method getProjects Queries for managing pipes createPipe updatePipe removePipe","title":"Queries for managing pipes"},{"location":"dev/server-reference/pipes/#createpipe","text":"Creates a new pipe in the database. Query attributes: inputUuid : string . The UUID of the input step. outputUuid : string . The UUID of the output step. uuid : string (optional). The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createPipe&inputUuid=456&outputUuid=789&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createPipe\" , \"success\" : true , \"message\" : \"Pipe created.\" , \"content\" : { } }","title":"createPipe"},{"location":"dev/server-reference/pipes/#updatepipe","text":"Update pipe info in the database. Query attributes: inputUuid : string (optionnal). The UUID of the input step. outputUuid : string (optionnal). The UUID of the output step. colorSpaceUuid : string . The UUID of the color space for the files going through this pipe. filetypeUuid : string . The UUID of the file type going through this pipe. uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updatePipe&colorSpaceUuid=123&filetypeUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updatePipe\" , \"success\" : true , \"message\" : \"Pipe updated.\" , \"content\" : { } }","title":"updatePipe"},{"location":"dev/server-reference/pipes/#removepipe","text":"Removes a pipe group from the database. Query attributes: uuid : string . The pipe\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removePipe&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removePipe\" , \"success\" : true , \"message\" : \"Pipe removed.\" , \"content\" : { } }","title":"removePipe"},{"location":"dev/server-reference/projects/","text":"Queries for managing projects Queries for managing projects createProject getProject getProjects updateProject removeProject assignStep createProject Creates a new project in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createProject&name=Mythomen&shortName=Mytho&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createProject\" , \"success\" : true , \"message\" : \"Project \\\"Mytho\\\" created.\" , \"content\" : { } } getProject Retrieves a single project. Query attributes: uuid : string . The project unique identifier. token : string . The session token returned with login . Reply content: The server replies with a project object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. steps : array of object . The list of steps. This step object contains these properties: name : string . shortName : string . uuid : string . projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. colorSpaceUuid : string . The UUID of the color space used in the files going through this pipe. filetypeUuid : string . The UUID of the file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . assets : array of object . The list of assets. This asset object contains these properties: name : string . shortName : string . tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . sequences : array of object . The list of sequences. This sequence object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . shots : array of object . The list of shots. This shot object contains these properties: name : string . shortName : string . duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . Examples: Query: http://your.server/ramses/?getProject&uuid=123abc&token=123 Reply: { \"accepted\" : true , \"query\" : \"getProject\" , \"success\" : true , \"message\" : \"Project retrieved\" , \"content\" : { \"name\" : \"Mythomen\" , \"shortName\" : \"Mytho\" , \"uuid\" : \"123abc\" , \"folderPath\" : \"PROJECTS/MYTHO\" , \"framerate\" : 25.0 , \"width\" : 1920 , \"height\" : 1080 , \"aspectRatio\" : 1.78 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot123\" , \"uuidshot456\" ] } } getProjects Retrieves the list of all projects. Query attributes: token : string . The session token returned with login . Reply content: The server replies with an array of project information. Each project is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. steps : array of object . The list of steps. This step object contains these properties: name : string . shortName : string . uuid : string . projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. colorSpaceUuid : string . The UUID of the color space used in the files going through this pipe. filetypeUuid : string . The UUID of the file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . assets : array of object . The list of assets. This asset object contains these properties: name : string . shortName : string . tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . sequences : array of object . The list of sequences. This sequence object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . shots : array of object . The list of shots. This shot object contains these properties: name : string . shortName : string . duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . Examples: Query: http://your.server/ramses/?getProjects&token=123 Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Projects list retrieved.\" , \"content\" : [ { \"name\" : \"Mythomen\" , \"shortName\" : \"Mytho\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"PROJECTS/MYTHO\" , \"framerate\" : 25.0 , \"width\" : 1920 , \"height\" : 1080 , \"aspectRatio\" : 1.78 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot123\" , \"uuidshot456\" ] }, { \"name\" : \"Purpleboy\" , \"shortName\" : \"PPB\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"PROJECTS/PPB\" , \"framerate\" : 24.0 , \"width\" : 2048 , \"height\" : 858 , \"aspectRatio\" : 2.39 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot789\" , \"uuidshot001\" ] } ] } updateProject Updates project information. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. folderPath : string (optionnal). The path for the project folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateProject&name=Mythomen&shortName=Mytho&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateProject\" , \"success\" : true , \"message\" : \"Project \\\"Mytho\\\" updated.\" , \"content\" : { } } removeProject Removes a project from the database. Query attributes: uuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeProject&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeProject\" , \"success\" : true , \"message\" : \"Project uuid123 removed.\" , \"content\" : { } } assignStep Assigns a template step to a project Query attributes: stepUuid : string . The template step\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignStep&stepUuid=123&projectUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignStep\" , \"success\" : true , \"message\" : \"Step uuid123 associated with project uuid456.\" , \"content\" : { } } { \u201caccepted\u201d: true, \u201cquery\u201d: \u201cassignStep\u201d, \u201csuccess\u201d: true, \u201cmessage\u201d: \u201cStep uuid123 removed from project uuid456.\u201d, \u201ccontent\u201d: { } } ```","title":"Project queries"},{"location":"dev/server-reference/projects/#queries-for-managing-projects","text":"Queries for managing projects createProject getProject getProjects updateProject removeProject assignStep","title":"Queries for managing projects"},{"location":"dev/server-reference/projects/#createproject","text":"Creates a new project in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createProject&name=Mythomen&shortName=Mytho&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createProject\" , \"success\" : true , \"message\" : \"Project \\\"Mytho\\\" created.\" , \"content\" : { } }","title":"createProject"},{"location":"dev/server-reference/projects/#getproject","text":"Retrieves a single project. Query attributes: uuid : string . The project unique identifier. token : string . The session token returned with login . Reply content: The server replies with a project object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. steps : array of object . The list of steps. This step object contains these properties: name : string . shortName : string . uuid : string . projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. colorSpaceUuid : string . The UUID of the color space used in the files going through this pipe. filetypeUuid : string . The UUID of the file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . assets : array of object . The list of assets. This asset object contains these properties: name : string . shortName : string . tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . sequences : array of object . The list of sequences. This sequence object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . shots : array of object . The list of shots. This shot object contains these properties: name : string . shortName : string . duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . Examples: Query: http://your.server/ramses/?getProject&uuid=123abc&token=123 Reply: { \"accepted\" : true , \"query\" : \"getProject\" , \"success\" : true , \"message\" : \"Project retrieved\" , \"content\" : { \"name\" : \"Mythomen\" , \"shortName\" : \"Mytho\" , \"uuid\" : \"123abc\" , \"folderPath\" : \"PROJECTS/MYTHO\" , \"framerate\" : 25.0 , \"width\" : 1920 , \"height\" : 1080 , \"aspectRatio\" : 1.78 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot123\" , \"uuidshot456\" ] } }","title":"getProject"},{"location":"dev/server-reference/projects/#getprojects","text":"Retrieves the list of all projects. Query attributes: token : string . The session token returned with login . Reply content: The server replies with an array of project information. Each project is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. framerate : float . The framerate of the project. width : integer . The width of the project in pixels. height : integer . The height of the project in pixels. aspectRatio : float . The aspectRatio of the project. steps : array of object . The list of steps. This step object contains these properties: name : string . shortName : string . uuid : string . projectUuid : string . The UUID of the project. type : string . One of asset , shot , pre , or post . order : int . Order of the step in the pipeline. pipes : array of object . The list of pipes connecting the steps. The pipe object contains these properties: uuid : string . projectUuid : string . The UUID of the project. inputStepUuid : string . The UUID of the input step. outputStepUuid : string . The UUID of the output step. colorSpaceUuid : string . The UUID of the color space used in the files going through this pipe. filetypeUuid : string . The UUID of the file types going through this pipe. assetGroups : array of object . The list of asset groups. This asset group object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . assets : array of object . The list of assets. This asset object contains these properties: name : string . shortName : string . tags : string . A comma-separated list of descriptive tags. assetGroupUuid : string . The UUID of the containing asset group. uuid : string . sequences : array of object . The list of sequences. This sequence object contains these properties: name : string shortName : string . uuid : string . projectUuid : string . shots : array of object . The list of shots. This shot object contains these properties: name : string . shortName : string . duration : float . The duration of the shot in seconds. order : integer . The order of the shot in the sequence. sequenceUuid : string . The UUID of the containing sequence. uuid : string . Examples: Query: http://your.server/ramses/?getProjects&token=123 Reply: { \"accepted\" : true , \"query\" : \"getProjects\" , \"success\" : true , \"message\" : \"Projects list retrieved.\" , \"content\" : [ { \"name\" : \"Mythomen\" , \"shortName\" : \"Mytho\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"PROJECTS/MYTHO\" , \"framerate\" : 25.0 , \"width\" : 1920 , \"height\" : 1080 , \"aspectRatio\" : 1.78 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot123\" , \"uuidshot456\" ] }, { \"name\" : \"Purpleboy\" , \"shortName\" : \"PPB\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"PROJECTS/PPB\" , \"framerate\" : 24.0 , \"width\" : 2048 , \"height\" : 858 , \"aspectRatio\" : 2.39 , \"steps\" : [ \"uuid123\" , \"uuid456\" ], \"shots\" : [ \"uuidshot789\" , \"uuidshot001\" ] } ] }","title":"getProjects"},{"location":"dev/server-reference/projects/#updateproject","text":"Updates project information. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. folderPath : string (optionnal). The path for the project folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateProject&name=Mythomen&shortName=Mytho&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateProject\" , \"success\" : true , \"message\" : \"Project \\\"Mytho\\\" updated.\" , \"content\" : { } }","title":"updateProject"},{"location":"dev/server-reference/projects/#removeproject","text":"Removes a project from the database. Query attributes: uuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeProject&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeProject\" , \"success\" : true , \"message\" : \"Project uuid123 removed.\" , \"content\" : { } }","title":"removeProject"},{"location":"dev/server-reference/projects/#assignstep","text":"Assigns a template step to a project Query attributes: stepUuid : string . The template step\u2019s Universal Unique Identifier. projectUuid : string . The project\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignStep&stepUuid=123&projectUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignStep\" , \"success\" : true , \"message\" : \"Step uuid123 associated with project uuid456.\" , \"content\" : { } } { \u201caccepted\u201d: true, \u201cquery\u201d: \u201cassignStep\u201d, \u201csuccess\u201d: true, \u201cmessage\u201d: \u201cStep uuid123 removed from project uuid456.\u201d, \u201ccontent\u201d: { } } ```","title":"assignStep"},{"location":"dev/server-reference/sequences/","text":"Queries for managing sequences Hint There is no method to retrieve sequences directly; sequences are returned by the project method getProjects Queries for managing sequences createSequence updateSequence removeSequence createSequence Creates a new squence in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the sequence to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createSequence&name=Sequence 01&shortName=SEQ01&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createSequence\" , \"success\" : true , \"message\" : \"Sequence \\\"SEQ01\\\" created.\" , \"content\" : { } } updateSequence Update sequence info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateSequence&name=Sequence 01&shortName=SEQ01&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateSequence\" , \"success\" : true , \"message\" : \"Sequence \\\"SEQ01\\\" updated.\" , \"content\" : { } } removeSequence Removes a sequence from the database. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeSequence&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeSequence\" , \"success\" : true , \"message\" : \"Sequence uuid123 removed.\" , \"content\" : { } }","title":"Sequence queries"},{"location":"dev/server-reference/sequences/#queries-for-managing-sequences","text":"Hint There is no method to retrieve sequences directly; sequences are returned by the project method getProjects Queries for managing sequences createSequence updateSequence removeSequence","title":"Queries for managing sequences"},{"location":"dev/server-reference/sequences/#createsequence","text":"Creates a new squence in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the sequence to. uuid : string (optionnal). The asset group\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createSequence&name=Sequence 01&shortName=SEQ01&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createSequence\" , \"success\" : true , \"message\" : \"Sequence \\\"SEQ01\\\" created.\" , \"content\" : { } }","title":"createSequence"},{"location":"dev/server-reference/sequences/#updatesequence","text":"Update sequence info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateSequence&name=Sequence 01&shortName=SEQ01&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateSequence\" , \"success\" : true , \"message\" : \"Sequence \\\"SEQ01\\\" updated.\" , \"content\" : { } }","title":"updateSequence"},{"location":"dev/server-reference/sequences/#removesequence","text":"Removes a sequence from the database. Query attributes: uuid : string . The sequence\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeSequence&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeSequence\" , \"success\" : true , \"message\" : \"Sequence uuid123 removed.\" , \"content\" : { } }","title":"removeSequence"},{"location":"dev/server-reference/shots/","text":"Queries for managing shots Hint There is no method to retrieve shots directly; shots are returned by the project method getProjects Queries for managing shots createShot updateShot moveShot removeShot setShotStatus createShot Creates a new shot in the database and assigns it to a sequence group. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string . The UUID of the sequence to assign the shot to. duration : float (optional). The duration of the shot in seconds. order : integer (optional). The order at which to insert the new shot. If omitted, the shot is added at the end of the list. uuid : string (optional). The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createShot&name=s001&shortName=001&sequenceUuid=123&duration=2.12&order=12&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createShot\" , \"success\" : true , \"message\" : \"Shot \\\"001\\\" created.\" , \"content\" : { } } updateShot Update shot info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string (optional). The UUID of the sequence to reassign the shot to. duration : float (optional). The new duration of the shot, in seconds. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateShot&name=S003&shortName=003&sequenceUuid=123&duration=3.36&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateShot\" , \"success\" : true , \"message\" : \"Shot \\\"003\\\" updated.\" , \"content\" : { } } moveShot Moves a shot in the list. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?moveShot&order=6&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"moveShot\" , \"success\" : true , \"message\" : \"Shot moved.\" , \"content\" : { } } removeShot Removes a shot from the database. Query attributes: uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeShot&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeShot\" , \"success\" : true , \"message\" : \"Shot removed.\" , \"content\" : { } } setShotStatus Sets a new status for a shot Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. shotUuid : string . The shot\u2019s Universal Unique Identifier. completionRation : int (optionnal). The current completion ratio in the range [0, 100]. userUuid : string (optionnal). The uuid of the user setting the status. Will use the currently connected user if not provided. stateUuid : string . The uuid of the associated state. comment : string (optionnal). A comment. version : int (optionnal). The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?setAssetStatus&uuid=123&shotUuid=123&completionRatio=50&userUuid=123&stateUuid=123&comment=A nice comment&version=12&stepUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"setShotStatus\" , \"success\" : true , \"message\" : \"Shot status updated.\" , \"content\" : { } }","title":"Shot queries"},{"location":"dev/server-reference/shots/#queries-for-managing-shots","text":"Hint There is no method to retrieve shots directly; shots are returned by the project method getProjects Queries for managing shots createShot updateShot moveShot removeShot setShotStatus","title":"Queries for managing shots"},{"location":"dev/server-reference/shots/#createshot","text":"Creates a new shot in the database and assigns it to a sequence group. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string . The UUID of the sequence to assign the shot to. duration : float (optional). The duration of the shot in seconds. order : integer (optional). The order at which to insert the new shot. If omitted, the shot is added at the end of the list. uuid : string (optional). The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createShot&name=s001&shortName=001&sequenceUuid=123&duration=2.12&order=12&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createShot\" , \"success\" : true , \"message\" : \"Shot \\\"001\\\" created.\" , \"content\" : { } }","title":"createShot"},{"location":"dev/server-reference/shots/#updateshot","text":"Update shot info in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. sequenceUuid : string (optional). The UUID of the sequence to reassign the shot to. duration : float (optional). The new duration of the shot, in seconds. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateShot&name=S003&shortName=003&sequenceUuid=123&duration=3.36&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateShot\" , \"success\" : true , \"message\" : \"Shot \\\"003\\\" updated.\" , \"content\" : { } }","title":"updateShot"},{"location":"dev/server-reference/shots/#moveshot","text":"Moves a shot in the list. Query attributes: order : intenger . The new order for the shot. uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?moveShot&order=6&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"moveShot\" , \"success\" : true , \"message\" : \"Shot moved.\" , \"content\" : { } }","title":"moveShot"},{"location":"dev/server-reference/shots/#removeshot","text":"Removes a shot from the database. Query attributes: uuid : string . The shot\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeShot&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeShot\" , \"success\" : true , \"message\" : \"Shot removed.\" , \"content\" : { } }","title":"removeShot"},{"location":"dev/server-reference/shots/#setshotstatus","text":"Sets a new status for a shot Query attributes: uuid : string . The status\u2019 Universal Unique Identifier. shotUuid : string . The shot\u2019s Universal Unique Identifier. completionRation : int (optionnal). The current completion ratio in the range [0, 100]. userUuid : string (optionnal). The uuid of the user setting the status. Will use the currently connected user if not provided. stateUuid : string . The uuid of the associated state. comment : string (optionnal). A comment. version : int (optionnal). The current version. stepUuid : string . The uuid of the associated step. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?setAssetStatus&uuid=123&shotUuid=123&completionRatio=50&userUuid=123&stateUuid=123&comment=A nice comment&version=12&stepUuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"setShotStatus\" , \"success\" : true , \"message\" : \"Shot status updated.\" , \"content\" : { } }","title":"setShotStatus"},{"location":"dev/server-reference/states/","text":"Queries for managing states Queries for managing states createState getStates updateState removeState createState Creates a new state in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createState&name=Work in progress&shortName=WIP&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createState\" , \"success\" : true , \"message\" : \"State \\\"WIP\\\" created.\" , \"content\" : { } } getStates Retrieves the list of all states. Query attributes: None Reply content: The server replies an array of state information. Each state is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. color : string . The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int . The completion ratio in percentage. Examples: Query: http://your.server/ramses/?getStates&token=123 Reply: { \"accepted\" : true , \"query\" : \"getStates\" , \"success\" : true , \"message\" : \"States list retrieved.\" , \"content\" : [ { \"name\" : \"Stand by\" , \"shortName\" : \"STB\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#6d6d6d\" , \"completionRatio\" : 0 }, { \"name\" : \"To do\" , \"shortName\" : \"TODO\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#00aaff\" , \"completionRatio\" : 0 }, { \"name\" : \"Finished\" , \"shortName\" : \"OK\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#00aa00\" , \"completionRatio\" : 100 } ] } updateState Update state info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. color : string (optional). The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int (optional). The completion ratio in percentage. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateState&name=Work in progress&shortName=WIP&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateState\" , \"success\" : true , \"message\" : \"State \\\"WIP\\\" updated.\" , \"content\" : { } } removeState Removes a state from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeState&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeState\" , \"success\" : true , \"message\" : \"State uuid123 removed.\" , \"content\" : { } }","title":"State queries"},{"location":"dev/server-reference/states/#queries-for-managing-states","text":"Queries for managing states createState getStates updateState removeState","title":"Queries for managing states"},{"location":"dev/server-reference/states/#createstate","text":"Creates a new state in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createState&name=Work in progress&shortName=WIP&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createState\" , \"success\" : true , \"message\" : \"State \\\"WIP\\\" created.\" , \"content\" : { } }","title":"createState"},{"location":"dev/server-reference/states/#getstates","text":"Retrieves the list of all states. Query attributes: None Reply content: The server replies an array of state information. Each state is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. color : string . The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int . The completion ratio in percentage. Examples: Query: http://your.server/ramses/?getStates&token=123 Reply: { \"accepted\" : true , \"query\" : \"getStates\" , \"success\" : true , \"message\" : \"States list retrieved.\" , \"content\" : [ { \"name\" : \"Stand by\" , \"shortName\" : \"STB\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#6d6d6d\" , \"completionRatio\" : 0 }, { \"name\" : \"To do\" , \"shortName\" : \"TODO\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#00aaff\" , \"completionRatio\" : 0 }, { \"name\" : \"Finished\" , \"shortName\" : \"OK\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"color\" : \"#00aa00\" , \"completionRatio\" : 100 } ] }","title":"getStates"},{"location":"dev/server-reference/states/#updatestate","text":"Update state info in the database. Query attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. color : string (optional). The color to use to display the state, hexadecimal web color preceded with a # . completionRatio : int (optional). The completion ratio in percentage. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateState&name=Work in progress&shortName=WIP&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateState\" , \"success\" : true , \"message\" : \"State \\\"WIP\\\" updated.\" , \"content\" : { } }","title":"updateState"},{"location":"dev/server-reference/states/#removestate","text":"Removes a state from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeState&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeState\" , \"success\" : true , \"message\" : \"State uuid123 removed.\" , \"content\" : { } }","title":"removeState"},{"location":"dev/server-reference/status/","text":"Queries for managing status Hint There is no method to retrieve statuses directly; statuses are returned by the project method getProjects There is no method to create statuses; statuses are created by the asset or shot methods setAssetStatus and setShotStatus Queries for managing status updateStatus removeStatus updateStatus Update status info in the database. Query attributes: completionRatio : int (optional). The completion ratio in the range [0,100]. version : int (optional). The version. comment : string (optional). The comment. stateUuid : string . The Universal Unique Identifier of the associated state. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateStatus&uuid=123&stateUuid=456&comment=The new commment&version=12&completionRatio=50&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateStatus\" , \"success\" : true , \"message\" : \"Status updated.\" , \"content\" : { } } removeStatus Removes a status from the database. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeStatus&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeStatus\" , \"success\" : true , \"message\" : \"Status removed.\" , \"content\" : { } }","title":"Status queries"},{"location":"dev/server-reference/status/#queries-for-managing-status","text":"Hint There is no method to retrieve statuses directly; statuses are returned by the project method getProjects There is no method to create statuses; statuses are created by the asset or shot methods setAssetStatus and setShotStatus Queries for managing status updateStatus removeStatus","title":"Queries for managing status"},{"location":"dev/server-reference/status/#updatestatus","text":"Update status info in the database. Query attributes: completionRatio : int (optional). The completion ratio in the range [0,100]. version : int (optional). The version. comment : string (optional). The comment. stateUuid : string . The Universal Unique Identifier of the associated state. uuid : string (optional). The asset\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateStatus&uuid=123&stateUuid=456&comment=The new commment&version=12&completionRatio=50&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateStatus\" , \"success\" : true , \"message\" : \"Status updated.\" , \"content\" : { } }","title":"updateStatus"},{"location":"dev/server-reference/status/#removestatus","text":"Removes a status from the database. Query attributes: uuid : string . The status\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeStatus&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeStatus\" , \"success\" : true , \"message\" : \"Status removed.\" , \"content\" : { } }","title":"removeStatus"},{"location":"dev/server-reference/steps/","text":"Queries for managing steps Note The API also provides an access to \u201ctemplate steps\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateStep instead of createStep ) Hint There is no method to retrive steps directly; steps are returned by the project method getProjects Queries for managing steps createStep updateStep removeStep assignUser unassignUser assignApplication unassignApplication createStep Creates a new step in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the step to. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note When creating a template step with createTemplateStep , omit the projectUuid attribute. Reply content: Empty Examples: Query: http://your.server/ramses/?createStep&name=Rigging&shortName=RIG&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createStep\" , \"success\" : true , \"message\" : \"Step \\\"RIG\\\" created.\" , \"content\" : { } } updateStep Update step info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. type : string (optionnal). The type of the step. One of asset , shot , pre , or post . order : int (optionnal). The order of the step in the production pipeline. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateStep&name=Rigging&shortName=RIG&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateStep\" , \"success\" : true , \"message\" : \"Step \\\"RIG\\\" updated.\" , \"content\" : { } } removeStep Removes a step from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeStep&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeStep\" , \"success\" : true , \"message\" : \"Step uuid123 removed.\" , \"content\" : { } } assignUser Assigns a user to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignUser&stepUuid=123&userUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignUser\" , \"success\" : true , \"message\" : \"User assigned to step.\" , \"content\" : { } } unassignUser Unassigns a user from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignUser&stepUuid=123&userUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignUser\" , \"success\" : true , \"message\" : \"User unassigned from step.\" , \"content\" : { } } assignApplication Assigns an application to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignApplication&stepUuid=123&applicationUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignApplication\" , \"success\" : true , \"message\" : \"Application assigned to step.\" , \"content\" : { } } unassignApplication Unassigns an application from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignApplication&stepUuid=123&applicationUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignApplication\" , \"success\" : true , \"message\" : \"Application unassigned from step.\" , \"content\" : { } }","title":"Step queries"},{"location":"dev/server-reference/steps/#queries-for-managing-steps","text":"Note The API also provides an access to \u201ctemplate steps\u201d which can be assigned to projects. The calls are exactly the same except you have to insert the \u201cTemplate\u201d word (e.g. use createTemplateStep instead of createStep ) Hint There is no method to retrive steps directly; steps are returned by the project method getProjects Queries for managing steps createStep updateStep removeStep assignUser unassignUser assignApplication unassignApplication","title":"Queries for managing steps"},{"location":"dev/server-reference/steps/#createstep","text":"Creates a new step in the database and assigns it to a project. Query attributes: name : string . The new name. shortName : string . The new shortName. projectUuid : string . The UUID of the project to assign the step to. uuid : string (optionnal). The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note When creating a template step with createTemplateStep , omit the projectUuid attribute. Reply content: Empty Examples: Query: http://your.server/ramses/?createStep&name=Rigging&shortName=RIG&projectUuid=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createStep\" , \"success\" : true , \"message\" : \"Step \\\"RIG\\\" created.\" , \"content\" : { } }","title":"createStep"},{"location":"dev/server-reference/steps/#updatestep","text":"Update step info in the database. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. type : string (optionnal). The type of the step. One of asset , shot , pre , or post . order : int (optionnal). The order of the step in the production pipeline. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login Reply content: Empty Examples: Query: http://your.server/ramses/?updateStep&name=Rigging&shortName=RIG&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateStep\" , \"success\" : true , \"message\" : \"Step \\\"RIG\\\" updated.\" , \"content\" : { } }","title":"updateStep"},{"location":"dev/server-reference/steps/#removestep","text":"Removes a step from the database. Query attributes: uuid : string . The step\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeStep&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeStep\" , \"success\" : true , \"message\" : \"Step uuid123 removed.\" , \"content\" : { } }","title":"removeStep"},{"location":"dev/server-reference/steps/#assignuser","text":"Assigns a user to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignUser&stepUuid=123&userUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignUser\" , \"success\" : true , \"message\" : \"User assigned to step.\" , \"content\" : { } }","title":"assignUser"},{"location":"dev/server-reference/steps/#unassignuser","text":"Unassigns a user from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. userUuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignUser&stepUuid=123&userUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignUser\" , \"success\" : true , \"message\" : \"User unassigned from step.\" , \"content\" : { } }","title":"unassignUser"},{"location":"dev/server-reference/steps/#assignapplication","text":"Assigns an application to a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?assignApplication&stepUuid=123&applicationUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"assignApplication\" , \"success\" : true , \"message\" : \"Application assigned to step.\" , \"content\" : { } }","title":"assignApplication"},{"location":"dev/server-reference/steps/#unassignapplication","text":"Unassigns an application from a step. Query attributes: stepUuid : string . The step\u2019s Universal Unique Identifier. applicationUuid : string . The application\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?unassignApplication&stepUuid=123&applicationUuid=456&token=123 Reply: { \"accepted\" : true , \"query\" : \"unassignApplication\" , \"success\" : true , \"message\" : \"Application unassigned from step.\" , \"content\" : { } }","title":"unassignApplication"},{"location":"dev/server-reference/users/","text":"Queries for managing users Queries for managing users updateUser updatePassword getUsers createUser removeUser updateUser Logs in with a username and a (hashed) password. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. role : string (optionnal). The new role of the user. One of admin , project , lead , or standard . folderPath : string (optionnal). The path for the user folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateUser&name=Nicolas Dufresne&shortName=Duduf&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" updated.\" , \"content\" : { } } updatePassword Changes the password of a specific user Query attributes: current : string . The current (hashed) password. new : string . The new (hashed) password. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: Empty Examples: Query: http://your.server/ramses/?updatePassword&current=123&new=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" updated.\" , \"content\" : { } } getUsers Retrieves the list of all users. Query attributes: token : string . The session token returned with login . Reply content: The server replies an array of user information. Each user is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. One of admin , project , lead , or standard . Examples: Query: http://your.server/ramses/?getUsers&token=123 Reply: { \"accepted\" : true , \"query\" : \"getUsers\" , \"success\" : true , \"message\" : \"Users list retrieved.\" , \"content\" : [ { \"name\" : \"Nicolas Dufresne\" , \"shortName\" : \"Duduf\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/duduf\" , \"role\" : \"admin\" , }, { \"name\" : \"J. Doh\" , \"shortName\" : \"User\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/doe\" , \"role\" : \"standard\" , } ] } createUser Creates a new user in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createUser&name=Nicolas Dufresne&shortName=Duduf&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" created.\" , \"content\" : { } } removeUser Removes a user from the database. Query attributes: uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeUser&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeUser\" , \"success\" : true , \"message\" : \"User 123 removed.\" , \"content\" : { } }","title":"User queries"},{"location":"dev/server-reference/users/#queries-for-managing-users","text":"Queries for managing users updateUser updatePassword getUsers createUser removeUser","title":"Queries for managing users"},{"location":"dev/server-reference/users/#updateuser","text":"Logs in with a username and a (hashed) password. Query attributes: name : string . The new (or current for no change) name. shortName : string . The new (or current for no change) shortName. role : string (optionnal). The new role of the user. One of admin , project , lead , or standard . folderPath : string (optionnal). The path for the user folder. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?updateUser&name=Nicolas Dufresne&shortName=Duduf&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" updated.\" , \"content\" : { } }","title":"updateUser"},{"location":"dev/server-reference/users/#updatepassword","text":"Changes the password of a specific user Query attributes: current : string . The current (hashed) password. new : string . The new (hashed) password. uuid : string . The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Note Your application / client should not send a clear password, but it should hash it first, even when using a secure/SSL connection. Reply content: Empty Examples: Query: http://your.server/ramses/?updatePassword&current=123&new=456&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"updateUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" updated.\" , \"content\" : { } }","title":"updatePassword"},{"location":"dev/server-reference/users/#getusers","text":"Retrieves the list of all users. Query attributes: token : string . The session token returned with login . Reply content: The server replies an array of user information. Each user is an object with the following attributes: name : string . The name of the user. shortName : string . The username. uuid : string . The Universal Unique Identifier of this user. folderPath : string . The user folder path. role : string . The userrole. One of admin , project , lead , or standard . Examples: Query: http://your.server/ramses/?getUsers&token=123 Reply: { \"accepted\" : true , \"query\" : \"getUsers\" , \"success\" : true , \"message\" : \"Users list retrieved.\" , \"content\" : [ { \"name\" : \"Nicolas Dufresne\" , \"shortName\" : \"Duduf\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/duduf\" , \"role\" : \"admin\" , }, { \"name\" : \"J. Doh\" , \"shortName\" : \"User\" , \"uuid\" : \"2d7d7e01-671c-11e7-a78f-4ccc6a288527\" , \"folderPath\" : \"/home/doe\" , \"role\" : \"standard\" , } ] }","title":"getUsers"},{"location":"dev/server-reference/users/#createuser","text":"Creates a new user in the database. Query attributes: name : string . The new name. shortName : string . The new shortName. uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?createUser&name=Nicolas Dufresne&shortName=Duduf&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"createUser\" , \"success\" : true , \"message\" : \"User \\\"Duduf\\\" created.\" , \"content\" : { } }","title":"createUser"},{"location":"dev/server-reference/users/#removeuser","text":"Removes a user from the database. Query attributes: uuid : string (optionnal). The user\u2019s Universal Unique Identifier. token : string . The session token returned with login . Reply content: Empty Examples: Query: http://your.server/ramses/?removeUser&uuid=123&token=123 Reply: { \"accepted\" : true , \"query\" : \"removeUser\" , \"success\" : true , \"message\" : \"User 123 removed.\" , \"content\" : { } }","title":"removeUser"},{"location":"files/naming/","text":"File and folder naming scheme Ramses uses a strict and specific naming convention. This naming scheme is based on the short names of the elements, which are defined by the administrator users. We provide a set of regular expressions to help developpers manipulate this naming scheme. File and folder naming scheme Short names (ID) Naming scheme Blocks Examples Master media files and final exports Blocks Examples Short names (ID) In Ramses , all elements (users, assets, shots, projects\u2026) have two names: the actual name used in the user interface and displayed anywhere there is enough room, and a short name which is no longer than 10 characters (but it may be the same as the actual name). Short names are unique (while names may not be unique, although it\u2019s good practice to keep them unique too) and they are used as identifiers. While names can contain a lot of different characters, short names can consist only of alphanumeric characters (without any special character or accent), and the plus + and minus - characters. For the sake of readability, we are going to call these short names : ID s in the rest of this document. Naming scheme This is the complete naming scheme, for all files and folders: projectID_A|S|G(_assetID|shotID)_stepID(_resource name)(_version)(.extension) Explanations: The name is divided into blocks, separated by the underscore _ character. Optionnal blocks are shown in parenthesis () The vertical bar | characters means \u201cor\u201d and represents a choice in a list of possibilities. A file name must include at least 3 blocks : projectID , Type ( A , S or G ), and stepID and can include up to 6 blocks if adding the assetId or shotID , the resource name, and the version. Blocks projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. A|S|G tells if the file or folder refers to an Asset ( A ), a shot ( S ) or a general item ( G ). assetID is the ID of the asset, if the previous block is A . Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. shotID is the ID of the shot, if the previous block is S . Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. stepID is the ID of the production step. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. resource name describes the specific resource this file or folder refers to. Between 1 and 20 characters consisting only of a-z , 0-9 and +- characters and may contain spaces. Resource names cannot start with a status ID followed by a number (e.g. v01 or wip2 ) nor a number alone. version contains the status and version number. May start with either v or the ID of the status (e.g. \u201cwip\u201d, \u201cok\u201d, etc.), and includes one or more numbers. No other character allowed. extension is the file extension. The extension may include multiple dots, for example: .tar.gz Examples Master media files and final exports Final masters have a specific naming scheme. projectID_codec(-colorspace)_widthxheight(p|i)_fps(_language)_(subtitlesst).ext Blocks projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. codec is the name of the codec. Between 1 and 10 characters consisting only of a-z and 0-9 characters. No space allowed. No dot allowed (e.g. h.264 must be named h264 ). colorspace represents the colorspace used if it\u2019s not the most common one for this codec. Between 1 and 10 characters consisting only of a-z and 0-9 characters. No space allowed. No dot allowed. Examples: YUV420 , sRGB , YUV444 , sRGBA \u2026 widthxheight is the resolution of the file. p|i tells if the video is interlaced or progressive. If omitted, the video is considered progressive. fps is the framerate. A number, which may contain a dot . character, and optionnaly the fps suffix. language is the spoken language. Omitted if there are no dialogs nor any written text. subtitlesst is the language code for the subtitles followed by the st suffix. Omitted if there are no subtitles. ext is the file extension. The extension may include multiple dots, for example: .tar.gz Examples","title":"Naming scheme"},{"location":"files/naming/#file-and-folder-naming-scheme","text":"Ramses uses a strict and specific naming convention. This naming scheme is based on the short names of the elements, which are defined by the administrator users. We provide a set of regular expressions to help developpers manipulate this naming scheme. File and folder naming scheme Short names (ID) Naming scheme Blocks Examples Master media files and final exports Blocks Examples","title":"File and folder naming scheme"},{"location":"files/naming/#short-names-id","text":"In Ramses , all elements (users, assets, shots, projects\u2026) have two names: the actual name used in the user interface and displayed anywhere there is enough room, and a short name which is no longer than 10 characters (but it may be the same as the actual name). Short names are unique (while names may not be unique, although it\u2019s good practice to keep them unique too) and they are used as identifiers. While names can contain a lot of different characters, short names can consist only of alphanumeric characters (without any special character or accent), and the plus + and minus - characters. For the sake of readability, we are going to call these short names : ID s in the rest of this document.","title":"Short names (ID)"},{"location":"files/naming/#naming-scheme","text":"This is the complete naming scheme, for all files and folders: projectID_A|S|G(_assetID|shotID)_stepID(_resource name)(_version)(.extension) Explanations: The name is divided into blocks, separated by the underscore _ character. Optionnal blocks are shown in parenthesis () The vertical bar | characters means \u201cor\u201d and represents a choice in a list of possibilities. A file name must include at least 3 blocks : projectID , Type ( A , S or G ), and stepID and can include up to 6 blocks if adding the assetId or shotID , the resource name, and the version.","title":"Naming scheme"},{"location":"files/naming/#blocks","text":"projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. A|S|G tells if the file or folder refers to an Asset ( A ), a shot ( S ) or a general item ( G ). assetID is the ID of the asset, if the previous block is A . Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. shotID is the ID of the shot, if the previous block is S . Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. stepID is the ID of the production step. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. resource name describes the specific resource this file or folder refers to. Between 1 and 20 characters consisting only of a-z , 0-9 and +- characters and may contain spaces. Resource names cannot start with a status ID followed by a number (e.g. v01 or wip2 ) nor a number alone. version contains the status and version number. May start with either v or the ID of the status (e.g. \u201cwip\u201d, \u201cok\u201d, etc.), and includes one or more numbers. No other character allowed. extension is the file extension. The extension may include multiple dots, for example: .tar.gz","title":"Blocks"},{"location":"files/naming/#examples","text":"","title":"Examples"},{"location":"files/naming/#master-media-files-and-final-exports","text":"Final masters have a specific naming scheme. projectID_codec(-colorspace)_widthxheight(p|i)_fps(_language)_(subtitlesst).ext","title":"Master media files and final exports"},{"location":"files/naming/#blocks_1","text":"projectID is the ID of the project. Between 1 and 10 characters consisting only of a-z , 0-9 and +- characters. No space allowed. codec is the name of the codec. Between 1 and 10 characters consisting only of a-z and 0-9 characters. No space allowed. No dot allowed (e.g. h.264 must be named h264 ). colorspace represents the colorspace used if it\u2019s not the most common one for this codec. Between 1 and 10 characters consisting only of a-z and 0-9 characters. No space allowed. No dot allowed. Examples: YUV420 , sRGB , YUV444 , sRGBA \u2026 widthxheight is the resolution of the file. p|i tells if the video is interlaced or progressive. If omitted, the video is considered progressive. fps is the framerate. A number, which may contain a dot . character, and optionnaly the fps suffix. language is the spoken language. Omitted if there are no dialogs nor any written text. subtitlesst is the language code for the subtitles followed by the st suffix. Omitted if there are no subtitles. ext is the file extension. The extension may include multiple dots, for example: .tar.gz","title":"Blocks"},{"location":"files/naming/#examples_1","text":"","title":"Examples"},{"location":"files/tree/","text":"Folder Structure: the Ramses Tree One of Ramses\u2019 goals is to manage all your files and folders; sometimes, you may still need to manually add, remove, or edit files and folders through your explorator, in which case you should always try to respect the Ramses Tree described here. This document will also help you find your files should Ramses be unavailable for some reason. Folder Structure: the Ramses Tree Introduction Remote files on Windows Remote files on Unix-like Systems (Linux, Mac OS) The Ramses Folder The Project Folder A working folder Introduction All folders inside the Ramses Tree follow the Ramses Naming Scheme . The folders used by Ramses can be located either locally or on remote computers and servers. The supported protocols (SMB, FTP\u2026) may vary depending on the platform (read below for more information). Ramses includes a system of alternative trees , which means you can use different paths to folders used by Ramses, and that it is compatible with virtually all syncing applications (Dropbox, Syncthing, Synology\u2026), wether they are automatic or manual (like backup tools). If a specific file or folder is not found in the main tree , Ramses will automatically look for it in the alternative trees and try to sync (i.e. copy in the main tree ) them. Tip For best performance, it is advised to work with local files, and use remote locations only as alternative trees ; in conjunction with a syncing tool like Syncthing or the Synology Drive application for example, it is both easy, safe and powerful to keep a shared copy of the projects while working locally. Remote files on Windows Ramses should be able to access files located on remote locations using the Samba ( SMB ) protocol, using standard URL starting with \\\\server-name . Another way to access remote locations, which enables FTP and other protocols support, is to use Windows Network Drives to mount the remote locations. To make it easy to deploy Ramses on several devices, they should all use the same letter for the network drive. Remote files on Unix-like Systems (Linux, Mac OS) The quickest and easiest way to use Ramses on remote folders on Unix-like systems is to automatically mount the remote locations in a specific folder. This can work for a lot of different protocols ( Samba , FTP(s) , SFTP , NFS \u2026) The Ramses Folder The easiest way to use Ramses to manage all your projects is to define a root folder for all Ramses projects, where Ramses will create a subfolder for each project. This Ramses folder is also used to store user specific files, some configuration files, etc. Nevertheless, you can always choose another folder to store a specific project, outside of the Ramses Folder. - Ramses Folder - Config # Configuration files - Projects # All projects - Project01 # First project - Project02 # Second project - ... - Users # User files - User01 # Files for a single user - Config # Configuration files for this user - User02 - Config - ... The Project Folder These are the contents of the Project folder: - PROJECTID # Root - 00 -ADMIN # Project administration - 01 -PRE-PROD # Pre-production steps - 02 -PROD # Production steps - 03 -POST-PROD # Post-production steps - 04 -ASSETS # All the Assets - 05 -SHOTS # All the Shots - 06 -EXPORT # Media files The root folder of a project only contains other folders and no files. The subfolder in the root folder are numbered to help sorting them and quickly find them. Here is an example of a typical project tree, without showing the details in the working directories nor any file. - PROJECTID # Root - 00 -ADMIN - 01 -PRE-PROD - PROJECTID_SCRIPT # Pre production step - PROJECTID_STORYBOARD - 02 -PROD - PROJECTID_MOD # Common files for the mod step - PROJECTID_MOD_Templates # Template files for the mod step - PROJECTID_RIG # Common files for the rig step - PROJECTID_RIG_Templates # Template files for the rig step - PROJECTID_TEX - PROJECTID_TEX_Templates - PROJECTID_ANIM - PROJECTID_ANIM_Templates - PROJECTID_LIGHT - PROJECTID_LIGHT_Templates - PROJECTID_COMP - PROJECTID_COMP_Templates - 03 -POST-PROD - PROJECTID_EDIT # Post production step - 04 -ASSETS - Characters # A Group of Assets - PROJECTID_A_TRISTAN # An Asset - PROJECTID_A_TRISTAN_DESIGN # An asset production step - PROJECTID_A_TRISTAN_MOD - PROJECTID_A_TRISTAN_RIG - PROJECTID_A_TRISTAN_TEX - PROJECTID_A_ISOLDE # An Asset - Props # A Group of Assets - Sets # A Group of Assets - 05 -SHOTS - PROJECTID_S_01-001 # A Shot - PROJECTID_S_01-001_ANIM # A shot production step - PROJECTID_S_01-001_LIGHT - PROJECTID_S_01-001_COMP - PROJECTID_S_01-002 # A Shot - PROJECTID_S_01-003 # A Shot - PROJECTID_S_02-001 # A Shot - 06 -EXPORT A working folder A folder containing working files is always organised the same way. Here is an example for the modelling step of the asset called Tristan . - PROJECTID_A_TRISTAN_MOD # The working folder, subfolder of the asset folder. - PROJECTID_A_TRISTAN_MOD.blend # The main file for modelling Tristan (on Blender) - PROJECTID_A_TRISTAN_MOD_Sculpt.blend # Another resource - _versions # The versionning folder, handled by Ramses. - PROJECTID_A_TRISTAN_MOD_wip001.blend # A WIP version - PROJECTID_A_TRISTAN_MOD_wip002.blend - PROJECTID_A_TRISTAN_MOD_chk003.blend # The version which has to be checked by the lead - PROJECTID_A_TRISTAN_MOD_ok004.blend # The validated version - PROJECTID_A_TRISTAN_MOD_pub005.blend # The version which has been published - PROJECTID_A_TRISTAN_MOD_Sculpt_v001.blend # The first version of a resource - PROJECTID_A_TRISTAN_MOD_Sculpt_v002.blend # The second version of a resource - _publish - PROJECTID_A_TRISTAN_MOD.blend # The working file as it was when publishing - PROJECTID_A_TRISTAN_MOD.abc # The published export (an *Alembic* file) - _preview - PROJECTID_A_TRISTAN_MOD.jpg # A file for previewing the modelling - PROJECTID_A_TRISTAN_MOD.mp4 # A file for previewing the modelling The ramses_versions subfolder contains the versionning and history of the work. The published subfolder contains the published and exported files to be used by other steps. The preview subfolder contains the files for previewing the current work, like videos or images. These files may be used by Ramses to generate thumbnails. Ramses is also able to list, preview, and play these files (if their format is standard and supported). Important The working file and published files do not include the version in their names, and the versionning and history are hidden in a ramses_versions subfolder. This way, there can be no mistake about what file to open or import. Note Only Ramses should access the ramses_versions subfolder and it should not be needed for the user to manipulate these files. Tip When backuping a project, only the files in the published subfolder may be kept.","title":"Folder structure"},{"location":"files/tree/#folder-structure-the-ramses-tree","text":"One of Ramses\u2019 goals is to manage all your files and folders; sometimes, you may still need to manually add, remove, or edit files and folders through your explorator, in which case you should always try to respect the Ramses Tree described here. This document will also help you find your files should Ramses be unavailable for some reason. Folder Structure: the Ramses Tree Introduction Remote files on Windows Remote files on Unix-like Systems (Linux, Mac OS) The Ramses Folder The Project Folder A working folder","title":"Folder Structure: the Ramses Tree"},{"location":"files/tree/#introduction","text":"All folders inside the Ramses Tree follow the Ramses Naming Scheme . The folders used by Ramses can be located either locally or on remote computers and servers. The supported protocols (SMB, FTP\u2026) may vary depending on the platform (read below for more information). Ramses includes a system of alternative trees , which means you can use different paths to folders used by Ramses, and that it is compatible with virtually all syncing applications (Dropbox, Syncthing, Synology\u2026), wether they are automatic or manual (like backup tools). If a specific file or folder is not found in the main tree , Ramses will automatically look for it in the alternative trees and try to sync (i.e. copy in the main tree ) them. Tip For best performance, it is advised to work with local files, and use remote locations only as alternative trees ; in conjunction with a syncing tool like Syncthing or the Synology Drive application for example, it is both easy, safe and powerful to keep a shared copy of the projects while working locally.","title":"Introduction"},{"location":"files/tree/#remote-files-on-windows","text":"Ramses should be able to access files located on remote locations using the Samba ( SMB ) protocol, using standard URL starting with \\\\server-name . Another way to access remote locations, which enables FTP and other protocols support, is to use Windows Network Drives to mount the remote locations. To make it easy to deploy Ramses on several devices, they should all use the same letter for the network drive.","title":"Remote files on Windows"},{"location":"files/tree/#remote-files-on-unix-like-systems-linux-mac-os","text":"The quickest and easiest way to use Ramses on remote folders on Unix-like systems is to automatically mount the remote locations in a specific folder. This can work for a lot of different protocols ( Samba , FTP(s) , SFTP , NFS \u2026)","title":"Remote files on Unix-like Systems (Linux, Mac OS)"},{"location":"files/tree/#the-ramses-folder","text":"The easiest way to use Ramses to manage all your projects is to define a root folder for all Ramses projects, where Ramses will create a subfolder for each project. This Ramses folder is also used to store user specific files, some configuration files, etc. Nevertheless, you can always choose another folder to store a specific project, outside of the Ramses Folder. - Ramses Folder - Config # Configuration files - Projects # All projects - Project01 # First project - Project02 # Second project - ... - Users # User files - User01 # Files for a single user - Config # Configuration files for this user - User02 - Config - ...","title":"The Ramses Folder"},{"location":"files/tree/#the-project-folder","text":"These are the contents of the Project folder: - PROJECTID # Root - 00 -ADMIN # Project administration - 01 -PRE-PROD # Pre-production steps - 02 -PROD # Production steps - 03 -POST-PROD # Post-production steps - 04 -ASSETS # All the Assets - 05 -SHOTS # All the Shots - 06 -EXPORT # Media files The root folder of a project only contains other folders and no files. The subfolder in the root folder are numbered to help sorting them and quickly find them. Here is an example of a typical project tree, without showing the details in the working directories nor any file. - PROJECTID # Root - 00 -ADMIN - 01 -PRE-PROD - PROJECTID_SCRIPT # Pre production step - PROJECTID_STORYBOARD - 02 -PROD - PROJECTID_MOD # Common files for the mod step - PROJECTID_MOD_Templates # Template files for the mod step - PROJECTID_RIG # Common files for the rig step - PROJECTID_RIG_Templates # Template files for the rig step - PROJECTID_TEX - PROJECTID_TEX_Templates - PROJECTID_ANIM - PROJECTID_ANIM_Templates - PROJECTID_LIGHT - PROJECTID_LIGHT_Templates - PROJECTID_COMP - PROJECTID_COMP_Templates - 03 -POST-PROD - PROJECTID_EDIT # Post production step - 04 -ASSETS - Characters # A Group of Assets - PROJECTID_A_TRISTAN # An Asset - PROJECTID_A_TRISTAN_DESIGN # An asset production step - PROJECTID_A_TRISTAN_MOD - PROJECTID_A_TRISTAN_RIG - PROJECTID_A_TRISTAN_TEX - PROJECTID_A_ISOLDE # An Asset - Props # A Group of Assets - Sets # A Group of Assets - 05 -SHOTS - PROJECTID_S_01-001 # A Shot - PROJECTID_S_01-001_ANIM # A shot production step - PROJECTID_S_01-001_LIGHT - PROJECTID_S_01-001_COMP - PROJECTID_S_01-002 # A Shot - PROJECTID_S_01-003 # A Shot - PROJECTID_S_02-001 # A Shot - 06 -EXPORT","title":"The Project Folder"},{"location":"files/tree/#a-working-folder","text":"A folder containing working files is always organised the same way. Here is an example for the modelling step of the asset called Tristan . - PROJECTID_A_TRISTAN_MOD # The working folder, subfolder of the asset folder. - PROJECTID_A_TRISTAN_MOD.blend # The main file for modelling Tristan (on Blender) - PROJECTID_A_TRISTAN_MOD_Sculpt.blend # Another resource - _versions # The versionning folder, handled by Ramses. - PROJECTID_A_TRISTAN_MOD_wip001.blend # A WIP version - PROJECTID_A_TRISTAN_MOD_wip002.blend - PROJECTID_A_TRISTAN_MOD_chk003.blend # The version which has to be checked by the lead - PROJECTID_A_TRISTAN_MOD_ok004.blend # The validated version - PROJECTID_A_TRISTAN_MOD_pub005.blend # The version which has been published - PROJECTID_A_TRISTAN_MOD_Sculpt_v001.blend # The first version of a resource - PROJECTID_A_TRISTAN_MOD_Sculpt_v002.blend # The second version of a resource - _publish - PROJECTID_A_TRISTAN_MOD.blend # The working file as it was when publishing - PROJECTID_A_TRISTAN_MOD.abc # The published export (an *Alembic* file) - _preview - PROJECTID_A_TRISTAN_MOD.jpg # A file for previewing the modelling - PROJECTID_A_TRISTAN_MOD.mp4 # A file for previewing the modelling The ramses_versions subfolder contains the versionning and history of the work. The published subfolder contains the published and exported files to be used by other steps. The preview subfolder contains the files for previewing the current work, like videos or images. These files may be used by Ramses to generate thumbnails. Ramses is also able to list, preview, and play these files (if their format is standard and supported). Important The working file and published files do not include the version in their names, and the versionning and history are hidden in a ramses_versions subfolder. This way, there can be no mistake about what file to open or import. Note Only Ramses should access the ramses_versions subfolder and it should not be needed for the user to manipulate these files. Tip When backuping a project, only the files in the published subfolder may be kept.","title":"A working folder"},{"location":"help/","text":"Ramses The Rx Asset Management System is a complete framework to manage your assets, shots and generally speaking your motion pictures production pipeline. Ramses Objects Ramses tree Object general attributes Object folders Objects Ramses several components all handle the same objects which are described precisely in this documentation. Here are these objects: A user is someone working on the production. A project is the first level of the production. It could represent a feature film (or one of its sequences), a short movie, a TV Series episode\u2026 A step is one of the stages each asset or shot has to go through to be produced (e.g. modeling, animation, lighting, compositing\u2026) An Application is a piece of software used to produce the assets or shots . A File type is used by applications either for working, previewing or publishing assets and shots . The Pipeline is the way steps are connected together and how the depend on each other. An Asset Group contains some of the assets of a project. An Asset is produced independently from the shots and can be used in several shots. A Status describes the status of the production of the asset for each step. A Sequence contain some of the shots of a project. A Shot is a single video used in the final edit. A Status describes the status of the production of the shot for each step. A State is part of an asset or shot status, and defines its working state (e.g. work in progress, to do, OK, etc.) Ramses tree The easiest way to let Ramses manage your files and pipeline is to just set its working folder. See the section entitled Ramese Tree for more information. You can also set alternative paths to the Ramses working folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. Finally, you can set a backup path too, which is a copy of the main folder where all files are stored. Ramses is able to update this backup folder, but will never read data from it. Note Alternative and Backup paths are not implemented yet. Object general attributes All these objects are defined by at least: A full name: a longer name describing the object. A short name: a short version (less than 10 characters) of the name of the object, used in UI when there is not enough room and in filenames. Warning The full name can be changed as any moment during the production. The short name can also be changed at any moment, as Ramses uses unique identifiers internally to refer to each objects, be be warned that the short names are used in the Ramses Tree so when changing the name of an object, you also need to rename/move all files and folders to the new name. This can easily be done at the start of the production but may become very difficult if the object is already used a lot. Object folders Most of the folders are managed by Ramses inside the Ramses Tree , but for some specific objects, the folder can also be user-defined. That\u2019s the case for: Projects Users Note The Ramses Tree is relative to the main Ramses folder. This folder can be different on each workstation, NAS or other remote locations. If a custom folder is defined for a project, all its child-objects folders will be relative to that new project folder. Read the Ramses Tree section of this documentation for more information.","title":"Ramses"},{"location":"help/#ramses","text":"The Rx Asset Management System is a complete framework to manage your assets, shots and generally speaking your motion pictures production pipeline. Ramses Objects Ramses tree Object general attributes Object folders","title":"Ramses"},{"location":"help/#objects","text":"Ramses several components all handle the same objects which are described precisely in this documentation. Here are these objects: A user is someone working on the production. A project is the first level of the production. It could represent a feature film (or one of its sequences), a short movie, a TV Series episode\u2026 A step is one of the stages each asset or shot has to go through to be produced (e.g. modeling, animation, lighting, compositing\u2026) An Application is a piece of software used to produce the assets or shots . A File type is used by applications either for working, previewing or publishing assets and shots . The Pipeline is the way steps are connected together and how the depend on each other. An Asset Group contains some of the assets of a project. An Asset is produced independently from the shots and can be used in several shots. A Status describes the status of the production of the asset for each step. A Sequence contain some of the shots of a project. A Shot is a single video used in the final edit. A Status describes the status of the production of the shot for each step. A State is part of an asset or shot status, and defines its working state (e.g. work in progress, to do, OK, etc.)","title":"Objects"},{"location":"help/#ramses-tree","text":"The easiest way to let Ramses manage your files and pipeline is to just set its working folder. See the section entitled Ramese Tree for more information. You can also set alternative paths to the Ramses working folder. Missing files will be looked for in these paths (and copied to the main path if available), and they will be used if the main path is not available. Finally, you can set a backup path too, which is a copy of the main folder where all files are stored. Ramses is able to update this backup folder, but will never read data from it. Note Alternative and Backup paths are not implemented yet.","title":"Ramses tree"},{"location":"help/#object-general-attributes","text":"All these objects are defined by at least: A full name: a longer name describing the object. A short name: a short version (less than 10 characters) of the name of the object, used in UI when there is not enough room and in filenames. Warning The full name can be changed as any moment during the production. The short name can also be changed at any moment, as Ramses uses unique identifiers internally to refer to each objects, be be warned that the short names are used in the Ramses Tree so when changing the name of an object, you also need to rename/move all files and folders to the new name. This can easily be done at the start of the production but may become very difficult if the object is already used a lot.","title":"Object general attributes"},{"location":"help/#object-folders","text":"Most of the folders are managed by Ramses inside the Ramses Tree , but for some specific objects, the folder can also be user-defined. That\u2019s the case for: Projects Users Note The Ramses Tree is relative to the main Ramses folder. This folder can be different on each workstation, NAS or other remote locations. If a custom folder is defined for a project, all its child-objects folders will be relative to that new project folder. Read the Ramses Tree section of this documentation for more information.","title":"Object folders"},{"location":"help/applications/","text":"Applications In order to manage the assets and the files they use, Ramses keeps track of the Applications used in the production. For each Application , Ramses keeps also three lists of file types : Native types are the file types used natively by the applications; the ones which type can be created with a save command and which store data in a lossless manner. Import types are all the file types the application can import. Export types are all the file types the application can create, usually with an export or bake command for example. The Ramses client can open applications and open files in applications; Ramses Add-ons should be able to save and manage the versionning in an application, as long as import and export assets. Attributes The applications are defined by their: Name Short name The applications also have these additional attributes (read above): Native types Import types Export Types","title":"Applications"},{"location":"help/applications/#applications","text":"In order to manage the assets and the files they use, Ramses keeps track of the Applications used in the production. For each Application , Ramses keeps also three lists of file types : Native types are the file types used natively by the applications; the ones which type can be created with a save command and which store data in a lossless manner. Import types are all the file types the application can import. Export types are all the file types the application can create, usually with an export or bake command for example. The Ramses client can open applications and open files in applications; Ramses Add-ons should be able to save and manage the versionning in an application, as long as import and export assets.","title":"Applications"},{"location":"help/applications/#attributes","text":"The applications are defined by their: Name Short name The applications also have these additional attributes (read above): Native types Import types Export Types","title":"Attributes"},{"location":"help/assetgroups/","text":"Asset Groups Asset Groups store the assets of a project. They can be for example : Characters , Sets , Props \u2026 Each Asset Group stores a list of Assets , and each Asset belong to one and only one Asset Group. Attributes As any other object in Ramses , the assset groups are defined by their: Name Short Name The asset groups also have these additional attributes: Assets : The list of assets stored by this step. Folder : Each asset group also has its own folder inside the project file structure, to keep all common assets for the given group. See the Ramses Tree for more information.","title":"Asset Groups"},{"location":"help/assetgroups/#asset-groups","text":"Asset Groups store the assets of a project. They can be for example : Characters , Sets , Props \u2026 Each Asset Group stores a list of Assets , and each Asset belong to one and only one Asset Group.","title":"Asset Groups"},{"location":"help/assetgroups/#attributes","text":"As any other object in Ramses , the assset groups are defined by their: Name Short Name The asset groups also have these additional attributes: Assets : The list of assets stored by this step. Folder : Each asset group also has its own folder inside the project file structure, to keep all common assets for the given group. See the Ramses Tree for more information.","title":"Attributes"},{"location":"help/assets/","text":"Assets An Asset is produced independently from the shots and can be used in several shots. They are the characters, sets, props, and any other re-usable item in the production. They\u2019re grouped in Asset Groups and produces through Asset Production Steps . Attributes As any other object in Ramses , the assets are defined by their: Name Short Name The assets also have these additional attributes: Tags : A list of tags used when searching specific assets. Status : The status of the production of the asset, for each Asset Production Step .","title":"Assets"},{"location":"help/assets/#assets","text":"An Asset is produced independently from the shots and can be used in several shots. They are the characters, sets, props, and any other re-usable item in the production. They\u2019re grouped in Asset Groups and produces through Asset Production Steps .","title":"Assets"},{"location":"help/assets/#attributes","text":"As any other object in Ramses , the assets are defined by their: Name Short Name The assets also have these additional attributes: Tags : A list of tags used when searching specific assets. Status : The status of the production of the asset, for each Asset Production Step .","title":"Attributes"},{"location":"help/filetypes/","text":"File types In order to manage the assets and the files they use, Ramses keeps track of the File Types used in the production. Specific file types can be marked as preview types , which means they\u2019re light and standard and can be used to display or preview an asset, but can store data in a lossy manner. The Ramses client can also display and preview file types marked as preview types . Attributes The file types are defined by their: Name / Short description Default extension The file types also have these additional attributes: Extension list : the list of alternative file extensions (i.e. .jpeg for jpg files).","title":"File Types"},{"location":"help/filetypes/#file-types","text":"In order to manage the assets and the files they use, Ramses keeps track of the File Types used in the production. Specific file types can be marked as preview types , which means they\u2019re light and standard and can be used to display or preview an asset, but can store data in a lossy manner. The Ramses client can also display and preview file types marked as preview types .","title":"File types"},{"location":"help/filetypes/#attributes","text":"The file types are defined by their: Name / Short description Default extension The file types also have these additional attributes: Extension list : the list of alternative file extensions (i.e. .jpeg for jpg files).","title":"Attributes"},{"location":"help/pipeline/","text":"Pipeline Ramses is able to handle your whole pipeline from the pre-production to the post-production. The pipeline describes the way the production of the assets and the shots goes through each step. It actually describes each connection, each pipe between each step, keeping important information like the file type used and its color space for example. Pipes Each pipe is a connection between two steps. It keeps the file type used to export from and import to these steps, as long as the color space of the file. Ramses Addons can use this information to automate the process. Pipes also handle triggers which run scripts in your applications when a state changes in the corresponding steps (when a file runs through the pipe ). Pipes also automate the production management and are able to automatically update statuses, notify users of changes and of the disponibility of new materials for example. The pipes are managed within the Ramses client and its Pipeline editor .","title":"Pipeline"},{"location":"help/pipeline/#pipeline","text":"Ramses is able to handle your whole pipeline from the pre-production to the post-production. The pipeline describes the way the production of the assets and the shots goes through each step. It actually describes each connection, each pipe between each step, keeping important information like the file type used and its color space for example.","title":"Pipeline"},{"location":"help/pipeline/#pipes","text":"Each pipe is a connection between two steps. It keeps the file type used to export from and import to these steps, as long as the color space of the file. Ramses Addons can use this information to automate the process. Pipes also handle triggers which run scripts in your applications when a state changes in the corresponding steps (when a file runs through the pipe ). Pipes also automate the production management and are able to automatically update statuses, notify users of changes and of the disponibility of new materials for example. The pipes are managed within the Ramses client and its Pipeline editor .","title":"Pipes"},{"location":"help/projects/","text":"Projects Projects represent the final artwork: a feature film or one of its sequence, an episode in a TV series, a short movie, a music video\u2026 It is made of Shots which are in turned made of Assets . Assets and Shots are produced through different Steps which are interdependent. Shots are grouped in Sequences , and a project contains at least one sequence. Assets are grouped in Asset Groups (e.g. characters, sets, props\u2026). Note It is not mandatory to use sequences, and for short projects (less than a hundred shots), it is usually easier to just have a single sequence. Attributes As any other object in Ramses , the projects are defined by their: Name Short Name Framerate is the framerate of the project. Height is the height of the final video, in pixels. Width is the width of the final video, in pixels. Aspect Ratio is the aspect ratio of the final video (which may be different than width/height if it does not use square pixels). Project Folder which is by default in the projects subfolder of the main Ramses folder. The projects also have these additional attributes: Steps : the list of steps in the production pipeline. Asset Groups contain the Assets used in this project. Sequences or shot groups which contain the Shots of the projects. Users : the list of users assigned to this project.","title":"Projects"},{"location":"help/projects/#projects","text":"Projects represent the final artwork: a feature film or one of its sequence, an episode in a TV series, a short movie, a music video\u2026 It is made of Shots which are in turned made of Assets . Assets and Shots are produced through different Steps which are interdependent. Shots are grouped in Sequences , and a project contains at least one sequence. Assets are grouped in Asset Groups (e.g. characters, sets, props\u2026). Note It is not mandatory to use sequences, and for short projects (less than a hundred shots), it is usually easier to just have a single sequence.","title":"Projects"},{"location":"help/projects/#attributes","text":"As any other object in Ramses , the projects are defined by their: Name Short Name Framerate is the framerate of the project. Height is the height of the final video, in pixels. Width is the width of the final video, in pixels. Aspect Ratio is the aspect ratio of the final video (which may be different than width/height if it does not use square pixels). Project Folder which is by default in the projects subfolder of the main Ramses folder. The projects also have these additional attributes: Steps : the list of steps in the production pipeline. Asset Groups contain the Assets used in this project. Sequences or shot groups which contain the Shots of the projects. Users : the list of users assigned to this project.","title":"Attributes"},{"location":"help/sequences/","text":"Sequences Sequences are a way to group Shots . A project contains at least one Sequence . You can use projects and sequences in many different ways: Series (or a single season) can be a single project, each episode would then be a sequence. This works well for short episodes without too many shots. You can subdivide a long project, like a feature film, into sequences. For a short project, you could use a single sequence to make things simpler. Each Sequence stores a list of Shots , and each Shot belong to one and only one Sequence. To the contrary of Assets and Asset Groups , sequence don\u2019t have their own folder. All shots are always stored in the same folder (read Ramses Tree for more information). Attributes As any other object in Ramses , the sequences are defined by their: Name Short Name The sequences also have these additional attributes: Shots : The list of shots stored by this sequence.","title":"Sequences"},{"location":"help/sequences/#sequences","text":"Sequences are a way to group Shots . A project contains at least one Sequence . You can use projects and sequences in many different ways: Series (or a single season) can be a single project, each episode would then be a sequence. This works well for short episodes without too many shots. You can subdivide a long project, like a feature film, into sequences. For a short project, you could use a single sequence to make things simpler. Each Sequence stores a list of Shots , and each Shot belong to one and only one Sequence. To the contrary of Assets and Asset Groups , sequence don\u2019t have their own folder. All shots are always stored in the same folder (read Ramses Tree for more information).","title":"Sequences"},{"location":"help/sequences/#attributes","text":"As any other object in Ramses , the sequences are defined by their: Name Short Name The sequences also have these additional attributes: Shots : The list of shots stored by this sequence.","title":"Attributes"},{"location":"help/shots/","text":"Shots A Shot is produced using Assets and stored in a Sequence . They\u2019re produced through Shot Production Steps . They have a duration. Attributes As any other object in Ramses , the shots are defined by their: Name Short Name The shots also have these additional attributes: Duration : The duration of the shot in the final edit. Status : The status of the production of the asset, for each Shot Production Step .","title":"Shots"},{"location":"help/shots/#shots","text":"A Shot is produced using Assets and stored in a Sequence . They\u2019re produced through Shot Production Steps . They have a duration.","title":"Shots"},{"location":"help/shots/#attributes","text":"As any other object in Ramses , the shots are defined by their: Name Short Name The shots also have these additional attributes: Duration : The duration of the shot in the final edit. Status : The status of the production of the asset, for each Shot Production Step .","title":"Attributes"},{"location":"help/states/","text":"States States are part of assets and shots status , along with comments and history. They also define a also percentage of completion of the work for the corresponding step on the asset or shot , which is used for production management and evaluating the global completion of a project. They can be configured globally to be used everywhere there\u2019s a need to show a status . By default, Ramses includes a few predefined states, and three of them cannot be removed as they are needed by Ramses automations. Needed states These states cannot be removed from Ramses , but you can modify all their attributes except their short name. Finished / OK (100%). To be used when an asset / shot is completely finished. To do / TODO (0%). This asset / shot is ready to be worked on. Stand by / STB (0%). Some dependencies are not satisfied to be able to work on this asset / shot yet. Nothing to do / NO (100%). There\u2019s nothing to do with this asset / shot for this step. These are ignored in the calculation of the completion of the project. Optional predefined states These states are provided as examples, you can modify or remove them. Work in progress / WIP (50%) To be rendered / RDR (90%) Rendering / RDRNG (95%) Could be better / CBB (95%) To be checked / CHK (85%) Needs a retake / RTK (75%) Attributes As any other object in Ramses , the steps are defined by their: Name Short Name The states also have these additional attributes: Completion Ratio : when an asset or a shot is in this state, it should be considered completed at this percentage. Color : each state has its own color which is used for displaying them in the interfaces of the Ramses components, and provide a quick visual feedback on the production of the assets , shots , and projects .","title":"States"},{"location":"help/states/#states","text":"States are part of assets and shots status , along with comments and history. They also define a also percentage of completion of the work for the corresponding step on the asset or shot , which is used for production management and evaluating the global completion of a project. They can be configured globally to be used everywhere there\u2019s a need to show a status . By default, Ramses includes a few predefined states, and three of them cannot be removed as they are needed by Ramses automations.","title":"States"},{"location":"help/states/#needed-states","text":"These states cannot be removed from Ramses , but you can modify all their attributes except their short name. Finished / OK (100%). To be used when an asset / shot is completely finished. To do / TODO (0%). This asset / shot is ready to be worked on. Stand by / STB (0%). Some dependencies are not satisfied to be able to work on this asset / shot yet. Nothing to do / NO (100%). There\u2019s nothing to do with this asset / shot for this step. These are ignored in the calculation of the completion of the project.","title":"Needed states"},{"location":"help/states/#optional-predefined-states","text":"These states are provided as examples, you can modify or remove them. Work in progress / WIP (50%) To be rendered / RDR (90%) Rendering / RDRNG (95%) Could be better / CBB (95%) To be checked / CHK (85%) Needs a retake / RTK (75%)","title":"Optional predefined states"},{"location":"help/states/#attributes","text":"As any other object in Ramses , the steps are defined by their: Name Short Name The states also have these additional attributes: Completion Ratio : when an asset or a shot is in this state, it should be considered completed at this percentage. Color : each state has its own color which is used for displaying them in the interfaces of the Ramses components, and provide a quick visual feedback on the production of the assets , shots , and projects .","title":"Attributes"},{"location":"help/status/","text":"Status date user state comment version completion ratio","title":"Status"},{"location":"help/status/#status","text":"date user state comment version completion ratio","title":"Status"},{"location":"help/statushistory/","text":"Status History history (list of status) current status step","title":"Status History"},{"location":"help/statushistory/#status-history","text":"history (list of status) current status step","title":"Status History"},{"location":"help/steps/","text":"Steps Steps represent the stages the assets and shots have to go through before completion, e.g. Modeling, Rigging, Animation, Lighting\u2026 There are 4 different types of steps: Pre-Production includes all the steps of the work which has to be done to prepare and develop the project, but which will not actually be included in the project (e.g. the storyboard, the script, etc.) Asset Production steps are the steps building assets which are needed to finalize the shots of the project (e.g. the characters, props, sets, etc.) Shot Production steps are the stages where shots are built using assets (e.g. animation, lighting, compositing, etc.) Post-Production includes all the steps from the edit to the delivery, where the work is made on the whole edit and not individual shots (e.g. editing, sound design, music, etc.) Steps are associated with the Applications used to produce the assets and shots. Each steps also stores the list of users assigned to it. Hint Ramses comes with a set of step templates, but they can be completely adjusted to any production needs; for example, if you consider Character Desgin to be a pre-production step instead of an asset production step, it\u2019s up to you to customize the templates. Attributes As any other object in Ramses , the steps are defined by their: Name Short Name The steps also have these additional attributes: Type : either Pre-Production , Asset Production , Shot Production or Post-Production Users : The list of users assigned to the step. Applications : The list of applications used in this step. Folder : Each step also has its own folder inside the project file structure, to keep all common files for the given step. See the Ramses Tree for more information.","title":"Steps"},{"location":"help/steps/#steps","text":"Steps represent the stages the assets and shots have to go through before completion, e.g. Modeling, Rigging, Animation, Lighting\u2026 There are 4 different types of steps: Pre-Production includes all the steps of the work which has to be done to prepare and develop the project, but which will not actually be included in the project (e.g. the storyboard, the script, etc.) Asset Production steps are the steps building assets which are needed to finalize the shots of the project (e.g. the characters, props, sets, etc.) Shot Production steps are the stages where shots are built using assets (e.g. animation, lighting, compositing, etc.) Post-Production includes all the steps from the edit to the delivery, where the work is made on the whole edit and not individual shots (e.g. editing, sound design, music, etc.) Steps are associated with the Applications used to produce the assets and shots. Each steps also stores the list of users assigned to it. Hint Ramses comes with a set of step templates, but they can be completely adjusted to any production needs; for example, if you consider Character Desgin to be a pre-production step instead of an asset production step, it\u2019s up to you to customize the templates.","title":"Steps"},{"location":"help/steps/#attributes","text":"As any other object in Ramses , the steps are defined by their: Name Short Name The steps also have these additional attributes: Type : either Pre-Production , Asset Production , Shot Production or Post-Production Users : The list of users assigned to the step. Applications : The list of applications used in this step. Folder : Each step also has its own folder inside the project file structure, to keep all common files for the given step. See the Ramses Tree for more information.","title":"Attributes"},{"location":"help/users/","text":"Users Each person working with Ramses is a user. There are three different kind of users, which are called roles in Ramses : Administrator Lead Standard User Each role defines different rights to interact with the production pipeline. Read below to learn mode. Roles Administrator (Admin) The Administrator has all rights to configure and modify Ramses , especially but non exclusively: Creating, removing projects. Creating, modifying, removing template steps. Creating, modifying, removing users. The Administrator had all other rights from other roles too. Note Althought the administrator has the right to modify all users, he cannot remove himself nor change his own role. Another administrator has to do it. Project Administrator (Proj Admin) The Project Administrator has the necessary rights to configure and modify projects, especially but non exclusively: Modifying projects. Creating, modifying, removing steps. Assigning Users to steps. Creating, modifying, removing Asset Groups. Creating, modifying, removing Sequences. Leader (Lead) The leader is a user who can manage projects, and has less rights than the administrator : Creating, modifying, removing shots. Creating, modifying, removing assets. Assigning users to assets and shots. Standard User (User) The standard user cannot modify nor remove anything from Ramses , but interacts with shots and assets. Other attributes As any other object in Ramses , the users are defined by their: Name Short Name User Folder which is by default in the users subfolder of the main Ramses folder. It contains the user\u2019s specific files, documents, tests\u2026 Anything the user wants to keep for herself or himself. The user also has these additional attributes: Role , see above. Password , used to log in.","title":"Users"},{"location":"help/users/#users","text":"Each person working with Ramses is a user. There are three different kind of users, which are called roles in Ramses : Administrator Lead Standard User Each role defines different rights to interact with the production pipeline. Read below to learn mode.","title":"Users"},{"location":"help/users/#roles","text":"","title":"Roles"},{"location":"help/users/#administrator-admin","text":"The Administrator has all rights to configure and modify Ramses , especially but non exclusively: Creating, removing projects. Creating, modifying, removing template steps. Creating, modifying, removing users. The Administrator had all other rights from other roles too. Note Althought the administrator has the right to modify all users, he cannot remove himself nor change his own role. Another administrator has to do it.","title":"Administrator (Admin)"},{"location":"help/users/#project-administrator-proj-admin","text":"The Project Administrator has the necessary rights to configure and modify projects, especially but non exclusively: Modifying projects. Creating, modifying, removing steps. Assigning Users to steps. Creating, modifying, removing Asset Groups. Creating, modifying, removing Sequences.","title":"Project Administrator (Proj Admin)"},{"location":"help/users/#leader-lead","text":"The leader is a user who can manage projects, and has less rights than the administrator : Creating, modifying, removing shots. Creating, modifying, removing assets. Assigning users to assets and shots.","title":"Leader (Lead)"},{"location":"help/users/#standard-user-user","text":"The standard user cannot modify nor remove anything from Ramses , but interacts with shots and assets.","title":"Standard User (User)"},{"location":"help/users/#other-attributes","text":"As any other object in Ramses , the users are defined by their: Name Short Name User Folder which is by default in the users subfolder of the main Ramses folder. It contains the user\u2019s specific files, documents, tests\u2026 Anything the user wants to keep for herself or himself. The user also has these additional attributes: Role , see above. Password , used to log in.","title":"Other attributes"},{"location":"install/server/","text":"Ramses Server installation Ramses Server runs on very standard web servers, with the usual Web Server / PHP / mySQL stack. That means you can install it on almost any desktop or server computers, private server, shared hosting, workstation, Raspberry\u2026 It does not need much resources. Ramses Server installation Prerequisites Installation Prerequisites Ramses Server must be installed on a computer with: An http web server PHP 7 It also needs an acces to a mySQL database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 4GB of RAM if the SQL server is on the same computer. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future. Installation Create a new base on the SQL server, along with its user and password. Copy the Ramses Server files to the web server. Edit config.php with needed info. Go to http://your.server/ramses/install Delete the install folder from the server. The default user for Ramses is Admin with the password password . You should start by changing this name and password.","title":"Ramses Server"},{"location":"install/server/#ramses-server-installation","text":"Ramses Server runs on very standard web servers, with the usual Web Server / PHP / mySQL stack. That means you can install it on almost any desktop or server computers, private server, shared hosting, workstation, Raspberry\u2026 It does not need much resources. Ramses Server installation Prerequisites Installation","title":"Ramses Server installation"},{"location":"install/server/#prerequisites","text":"Ramses Server must be installed on a computer with: An http web server PHP 7 It also needs an acces to a mySQL database. The recommended configuration is a standard AMP stack ( Apache - mySQL - PHP ), with at least 4GB of RAM if the SQL server is on the same computer. Note As Ramses is still in development, the only compatible SQL database is mySQL . We may add support for other databases in the future.","title":"Prerequisites"},{"location":"install/server/#installation","text":"Create a new base on the SQL server, along with its user and password. Copy the Ramses Server files to the web server. Edit config.php with needed info. Go to http://your.server/ramses/install Delete the install folder from the server. The default user for Ramses is Admin with the password password . You should start by changing this name and password.","title":"Installation"},{"location":"licenses/gfdl/","text":"GNU Free Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \u201cfree\u201d in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u00e2\u20ac\u201dfor example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements\u201d. 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith \u00e2\u20ac\u00a6 Texts.\u201d line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"Documentation license"},{"location":"licenses/gfdl/#gnu-free-documentation-license","text":"Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU Free Documentation License"},{"location":"licenses/gfdl/#0-preamble","text":"The purpose of this License is to make a manual, textbook, or other functional and useful document \u201cfree\u201d in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.","title":"0. PREAMBLE"},{"location":"licenses/gfdl/#1-applicability-and-definitions","text":"This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.","title":"1. APPLICABILITY AND DEFINITIONS"},{"location":"licenses/gfdl/#2-verbatim-copying","text":"You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies.","title":"2. VERBATIM COPYING"},{"location":"licenses/gfdl/#3-copying-in-quantity","text":"If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.","title":"3. COPYING IN QUANTITY"},{"location":"licenses/gfdl/#4-modifications","text":"You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u00e2\u20ac\u201dfor example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.","title":"4. MODIFICATIONS"},{"location":"licenses/gfdl/#5-combining-documents","text":"You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements\u201d.","title":"5. COMBINING DOCUMENTS"},{"location":"licenses/gfdl/#6-collections-of-documents","text":"You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.","title":"6. COLLECTIONS OF DOCUMENTS"},{"location":"licenses/gfdl/#7-aggregation-with-independent-works","text":"A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.","title":"7. AGGREGATION WITH INDEPENDENT WORKS"},{"location":"licenses/gfdl/#8-translation","text":"Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.","title":"8. TRANSLATION"},{"location":"licenses/gfdl/#9-termination","text":"You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.","title":"9. TERMINATION"},{"location":"licenses/gfdl/#10-future-revisions-of-this-license","text":"The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.","title":"10. FUTURE REVISIONS OF THIS LICENSE"},{"location":"licenses/gfdl/#11-relicensing","text":"\u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.","title":"11. RELICENSING"},{"location":"licenses/gfdl/#addendum-how-to-use-this-license-for-your-documents","text":"To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith \u00e2\u20ac\u00a6 Texts.\u201d line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"ADDENDUM: How to use this License for your documents"},{"location":"licenses/gnu-gpl/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u2019 and authors\u2019 protection, the GPL clearly explains that there is no warranty for this free software. For both users\u2019 and authors\u2019 sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u2019 freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u2019 Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w\u2019 and `show c\u2019 should show the appropriate parts of the General Public License. Of course, your program\u2019s commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"GNU GPLv3"},{"location":"licenses/gnu-gpl/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU GENERAL PUBLIC LICENSE"},{"location":"licenses/gnu-gpl/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u2019 and authors\u2019 protection, the GPL clearly explains that there is no warranty for this free software. For both users\u2019 and authors\u2019 sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u2019 freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"licenses/gnu-gpl/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"licenses/gnu-gpl/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"licenses/gnu-gpl/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"licenses/gnu-gpl/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"licenses/gnu-gpl/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"licenses/gnu-gpl/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"licenses/gnu-gpl/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"licenses/gnu-gpl/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"licenses/gnu-gpl/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"licenses/gnu-gpl/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"licenses/gnu-gpl/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"licenses/gnu-gpl/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"licenses/gnu-gpl/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"licenses/gnu-gpl/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"licenses/gnu-gpl/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License."},{"location":"licenses/gnu-gpl/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"licenses/gnu-gpl/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"licenses/gnu-gpl/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"licenses/gnu-gpl/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"licenses/gnu-gpl/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w\u2019 and `show c\u2019 should show the appropriate parts of the General Public License. Of course, your program\u2019s commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"}]}